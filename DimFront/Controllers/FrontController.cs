using Amazon.S3;
using Amazon.S3.Model;
using Common;
using DimFront.AutherizationAtteributes;
using DimFront.Providers;
using ELog;
using Microsoft.Ajax.Utilities;
using Models.DimFront;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Services.CacheManager;
using Services.DimFront;
using Services.RedisManage;
using Services.RedisManager;
using StackExchange.Redis;
using System;
using System.Collections.Generic;
using System.Data;
using System.IdentityModel.Tokens;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using System.Web.Http;

namespace DimFront.Controllers
{
    [ModelValid]
    [RoutePrefix("api/dimfront")]
    public class FrontController : ApiController
    {
        #region Fields

        private readonly IDimFrontService _dimfrontservice;
        private readonly IRedisManager _cacheManager;
        //private readonly IRedisManager2 _cacheManager1;
        private readonly IRedisManagerCric _cacheManagerCric;
        private readonly IRedisManagerFoot _cacheManagerFoot;
        private readonly IRedisManagerTenni _cacheManagerTenni;
        private readonly IRedisManagerOther _cacheManagerOther;
        private readonly IRedisManagerTrader _redisManagerTrader;
        private readonly IRedis1 _cache;
        //private static readonly SemaphoreSlim _addEventLock = new(1, 1);

        #endregion

        #region Ctor

        public FrontController(IDimFrontService dimfrontservice, IRedisManager rediscache, IRedisManagerTrader redisManagerTrader, IRedisManagerCric redisManagerCric, IRedisManagerFoot redisManagerFoot, IRedisManagerTenni redisManagerTenni, IRedisManagerOther redisManagerOther, IRedis1 cache)
        {
            _dimfrontservice = dimfrontservice;
            _cacheManager = rediscache;
            _cacheManagerCric = redisManagerCric;
            _cacheManagerFoot = redisManagerFoot;
            _cacheManagerTenni = redisManagerTenni;
            _cacheManagerOther = redisManagerOther;
            _redisManagerTrader = redisManagerTrader;
            _cache = cache;
        }

        #endregion

        #region Methods

        public HttpResponseMessage Return100(String Msg)
        {
            return Request.CreateResponse(HttpStatusCode.OK, new { status = 100, msg = Msg });
        }
        public HttpResponseMessage Return200(String Msg, Object Data = null)
        {
            if (Data == null)
                return Request.CreateResponse(HttpStatusCode.OK, new { status = 200, msg = Msg });
            return Request.CreateResponse(HttpStatusCode.OK, new { status = 200, msg = Msg, data = Data });
        }
        public HttpResponseMessage Return300(String Msg)
        {
            return Request.CreateResponse(HttpStatusCode.OK, new { status = 300, msg = Msg });
        }
        public HttpResponseMessage Return400(String Msg)
        {
            return Request.CreateResponse(HttpStatusCode.OK, new { status = 400, msg = Msg });
        }
        public HttpResponseMessage Return401(String Msg)
        {
            return Request.CreateResponse(HttpStatusCode.OK, new { status = 401, msg = Msg });
        }
        private static async Task<long> GetValuesFunctionAsync(IDatabaseAsync db, RedisKey[] in_redis_keys, RedisValue[] out_values, int max_array_size = 5000)
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();

            int sourceIndex = 0;
            int count = in_redis_keys.Count();
            RedisKey[] redis_keys_tmp_prepared = new RedisKey[max_array_size];

            while (count > 0)
            {
                int array_count = (count - max_array_size) < 0 ? count : max_array_size;
                count -= array_count;

                RedisKey[] redis_keys_tmp = redis_keys_tmp_prepared;

                if (array_count != max_array_size)
                {
                    redis_keys_tmp = new RedisKey[array_count];
                }

                Array.Copy(in_redis_keys, sourceIndex, redis_keys_tmp, 0, array_count);

                RedisValue[] string_get_result = await db.StringGetAsync(redis_keys_tmp);

                Array.Copy(string_get_result, 0, out_values, sourceIndex, array_count);

                sourceIndex += array_count;

                // if (count > 0) // effect too low
                //    System.Threading.Thread.Sleep(4);
            }

            watch.Stop();
            return watch.ElapsedMilliseconds;
        }

        private static long GetValuesFunction(IDatabase db, RedisKey[] in_redis_keys, RedisValue[] out_values, int max_array_size = 5000)
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();

            int sourceIndex = 0;
            int count = in_redis_keys.Count();
            RedisKey[] redis_keys_tmp_prepared = new RedisKey[max_array_size];

            while (count > 0)
            {
                int array_count = (count - max_array_size) < 0 ? count : max_array_size;
                count -= array_count;

                RedisKey[] redis_keys_tmp = redis_keys_tmp_prepared;

                if (array_count != max_array_size)
                {
                    redis_keys_tmp = new RedisKey[array_count];
                }

                Array.Copy(in_redis_keys, sourceIndex, redis_keys_tmp, 0, array_count);

                RedisValue[] string_get_result = db.StringGet(redis_keys_tmp);

                Array.Copy(string_get_result, 0, out_values, sourceIndex, array_count);

                sourceIndex += array_count;

                // if (count > 0) // effect too low
                //    System.Threading.Thread.Sleep(4);
            }

            watch.Stop();

            return watch.ElapsedMilliseconds;
        }

        // select all data once by optimized function using GetValuesFunction internally
        // mainly used in highlight data
        private static long Get_redis_query_dictionary_by_db(
                dynamic _cacheManager,
                IEnumerable<dynamic> dataetid1,
                IEnumerable<dynamic> dataetid2,
                Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db
        //               database           key     value
        )
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();

            if (dataetid1 != null)
            {
                foreach (var item in dataetid1)
                {
                    var k = item;
                    if (!redis_query_dictionary_by_db.ContainsKey(k.m))
                    {
                        redis_query_dictionary_by_db[k.m] = new Dictionary<string, string>();
                    }
                    redis_query_dictionary_by_db[k.m][k.gmid.ToString()] = null;
                    redis_query_dictionary_by_db[k.m][k.mid.ToString()] = null;
                }
            }
            if (dataetid2 != null)
            {
                foreach (var item in dataetid2)
                {
                    var k = item;
                    if (!redis_query_dictionary_by_db.ContainsKey(k.m))
                    {
                        redis_query_dictionary_by_db[k.m] = new Dictionary<string, string>();
                    }
                    redis_query_dictionary_by_db[k.m][k.gmid.ToString()] = null;
                    redis_query_dictionary_by_db[k.m][k.mid.ToString()] = null;
                }
            }

            foreach (var redis_query_dictionary_item in redis_query_dictionary_by_db)
            {
                // first select a DB
                IDatabase _db = _cacheManager.getDb(redis_query_dictionary_item.Key);

                // then select a dictionary to write data to
                Dictionary<string, string> redis_query_dictionary = redis_query_dictionary_item.Value;

                RedisKey[] redis_keys = redis_query_dictionary.Select(item => (RedisKey)item.Key).ToArray();
                RedisValue[] redis_values = new RedisValue[redis_keys.Count()];

                // linear optimized operation - get values from Redis
                GetValuesFunction(_db, redis_keys, redis_values);

                // write result into dictionary
                for (var i = 0; i < redis_values.Count(); i++)
                {
                    string key = redis_keys[i];
                    string data = redis_values[i];
                    if (key == null || data == null)
                    {
                        continue; // that's normal - didn't found anything
                    }
                    redis_query_dictionary[key] = data;
                }
            }

            watch.Stop();
            return watch.ElapsedMilliseconds;
        }

        [HttpGet]
        [Route("getdate", Name = "getdate")]
        public HttpResponseMessage GetDate()
        {
            var request = HttpContext.Current.Request;
            try
            {
                var Respons = _dimfrontservice.GetDate();
                if (Respons == null || Respons.Tables.Count <= 0)
                {
                    return Return300("Invalid Data.");
                }
                if (Respons.Tables[0].Rows.Count <= 0)
                {
                    return Return300("No Record Found.");
                }
                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Server = Respons.Tables[0].Rows[0][0].ToString(),
                    India = Respons.Tables[0].Rows[0][1].ToString()
                });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetDate", request, ex.ToString());
                return Return400(ex.Message);
            }
        }
        [HttpGet]
        [Route("~/test")]
        public HttpResponseMessage Test()
        {
            //var v = Assembly.GetExecutingAssembly().GetName().Version;
            return Return200("v:1.1");
        }

        public static Boolean CheckIPValid(String strIP)
        {
            try
            {
                IPAddress address;
                if (IPAddress.TryParse(strIP, out address))
                {
                    switch (address.AddressFamily)
                    {
                        case System.Net.Sockets.AddressFamily.InterNetwork:
                            // we have IPv4
                            return true;
                        case System.Net.Sockets.AddressFamily.InterNetworkV6:
                            // we have IPv4
                            return true;
                        default:
                            return false;
                    }
                }
            }
            catch (Exception) { }
            return false;
        }
        //[HttpPost]
        //[Route("refreshtoken")]
        //public HttpResponseMessage RefreshToken(RefreshToken refresh)
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("RefreshToken", JsonConvert.SerializeObject(refresh));

        //        //var t1 = JwtTokenGenerator.Refresh(refresh);
        //        //if (t1 != null && t1.id == 1)
        //        //{
        //        //    var uguid = JwtTokenGenerator.GetSaGuid(refresh.token);
        //        //    await _cacheManager.SetInMinasync(string.Format(GlobalCacheKey.UserAccessToken, uguid), ConfigItems.expiryMinutes, t1.AccessToken, ConfigItems.RedisLocaldb);
        //        //    return Return200("success", t1);
        //        //}
        //        //else
        //        //{
        //        //    return Return401("Token - Expired");
        //        //}
        //        return Return200("success");//,t1
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.WriteLog("RefreshToken : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(refresh));
        //        return Return400("Server Error");
        //    }
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("userlogin")]
        public HttpResponseMessage UserLogin([FromBody] UserLogin userLogin)
        {
            try
            {
                //var json = JsonConvert.Serialize({
                //PlayerId: string
                //PlayerName: string});

                ErrorLog.WriteLogAll("UserLogin", JsonConvert.SerializeObject(userLogin));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                userLogin.guid = uu_id;
                var Response = _dimfrontservice.UserLogin(userLogin);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("UserLogin", JsonConvert.SerializeObject(userLogin), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());


                var t1 = new
                {
                    token = Response.Tables[0].Rows[0]["idval"],
                    url = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["url"].ToString()) ? "" : Response.Tables[0].Rows[0]["url"]
                };
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("UserLogin", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(userLogin));
                return Return400(ex.Message);
            }
        }
        //public static string EncryptString(string text, string keyString)
        //{
        //    var key = Encoding.UTF8.GetBytes(keyString);

        //    var aesAlg = Aes.Create();
        //    var encryptor = aesAlg.CreateEncryptor(key, aesAlg.IV);
        //    var msEncrypt = new MemoryStream();
        //    var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);
        //    using (var swEncrypt = new StreamWriter(csEncrypt))
        //    {
        //        swEncrypt.Write(text);
        //    }

        //    var iv = aesAlg.IV;

        //    var decryptedContent = msEncrypt.ToArray();

        //    var result = new byte[iv.Length + decryptedContent.Length];

        //    Buffer.BlockCopy(iv, 0, result, 0, iv.Length);
        //    Buffer.BlockCopy(decryptedContent, 0, result, iv.Length, decryptedContent.Length);

        //    return Convert.ToBase64String(result);
        //}
        //public static string DecryptString(string cipherText, string keyString)
        //{
        //    var fullCipher = Convert.FromBase64String(cipherText);

        //    var iv = new byte[16];
        //    var cipher = new byte[fullCipher.Length - iv.Length]; //changes here

        //    Buffer.BlockCopy(fullCipher, 0, iv, 0, iv.Length);
        //    // Buffer.BlockCopy(fullCipher, iv.Length, cipher, 0, cipher.Length);
        //    Buffer.BlockCopy(fullCipher, iv.Length, cipher, 0, fullCipher.Length - iv.Length); // changes here
        //    var key = Encoding.UTF8.GetBytes(keyString);

        //    var aesAlg = Aes.Create();
        //    var decryptor = aesAlg.CreateDecryptor(key, iv);
        //    var msDecrypt = new MemoryStream(cipher);
        //    var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
        //    var srDecrypt = new StreamReader(csDecrypt);
        //    var result = srDecrypt.ReadToEnd();

        //    return result;
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("framelogin")]
        public HttpResponseMessage Framelogin([FromBody] Framelogin framelogin)
        {
            try
            {
                ErrorLog.WriteLogAll("Framelogin", JsonConvert.SerializeObject(framelogin));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Framelogin(framelogin);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Framelogin", JsonConvert.SerializeObject(framelogin), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                //select 1 as Id,'Completed sucessfully' as MSG,m.Userid,UserName,@idval1 as token,(CasinoBalance + SportsBalance + Balance) as General,'INR' as currency
                return Return200("Success");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Framelogin", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(framelogin));
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        //[UserAuth, KeyFilter]
        [Route("framelogintv")]
        public HttpResponseMessage Framelogintv([FromBody] Framelogin framelogin)
        {
            try
            {
                ErrorLog.WriteLogAll("Framelogintv", JsonConvert.SerializeObject(framelogin));
                var Response = _dimfrontservice.Framelogin(framelogin);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Framelogintv", JsonConvert.SerializeObject(framelogin), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                //select 1 as Id,'Completed sucessfully' as MSG,m.Userid,UserName,@idval1 as token,(CasinoBalance + SportsBalance + Balance) as General,'INR' as currency
                var t1 = new
                {
                    uname = Response.Tables[0].Rows[0]["UserName"].ToString(),
                    cur = Response.Tables[0].Rows[0]["currency"],
                    gen = Response.Tables[0].Rows[0]["General"],
                    msg = Response.Tables[0].Rows[0]["MSG"].ToString(),
                    token = Response.Tables[0].Rows[0]["token"]
                };
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Framelogintv", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(framelogin));
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [LoginFilter]
        [Route("login")]
        public async Task<HttpResponseMessage> Login([FromBody] Login login)
        {
            //if (_cache.IsExist("ismain", ConfigItems.Redismain))
            //{
            //    return Request.CreateResponse(HttpStatusCode.OK, new { status = 402, msg = "System under maintenance" });
            //}
            //else
            //{
            try
            {
                ErrorLog.WriteLogAll("Login", JsonConvert.SerializeObject(login));

                if (ConfigItems.SqlIP)
                {
                    if (String.IsNullOrEmpty(login.ip) || !CheckIPValid(login.ip))
                    {
                        return Return300("Invalid IP Format");
                    }
                    var IsIP = _dimfrontservice.ChkIP(login.ip);
                    if (IsIP == null || IsIP.Tables.Count <= 0 || IsIP.Tables[0].Rows.Count <= 0)
                    {
                        return Return300("Invalid IP");
                    }
                    else if (IsIP.Tables[0].Rows[0]["id"].ToString() == "0")
                    {
                        return Return300(IsIP.Tables[0].Rows[0]["MSG"].ToString());
                    }
                }

                if (ConfigItems.IP_API)
                {
                    if (String.IsNullOrEmpty(login.ip) || !CheckIPValid(login.ip))
                    {
                        return Return300("Invalid IP Format");
                    }
                    String IpResp = HttpHelper.Get(ConfigItems.IPUrl.Replace("[IP]", login.ip));
                    if (String.IsNullOrEmpty(IpResp))
                    {
                        return Return300("Invalid IP Check.");
                    }
                    var data = JsonConvert.DeserializeObject<IPResponse>(IpResp);
                    if (data.status == "400")
                    {
                        return Return300(data.msg);
                    }
                    if (ConfigItems.Hosting)
                    {
                        if (data.hosting)
                        {
                            return Return300("Invalid Hosting.");
                        }
                    }
                    if (ConfigItems.Vpn)
                    {
                        if (data.proxy)
                        {
                            return Return300("Invalid Proxy.");
                        }
                    }
                    login.host = data.hosting;
                    login.vpn = data.proxy;
                }

                var Response = _dimfrontservice.Login(login);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Login", JsonConvert.SerializeObject(login), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("Invalid UserName or Password.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (!Response.Tables[0].Columns.Contains("id") || (Response.Tables[0].Rows[0]["id"].ToString() == "0" || Response.Tables[0].Rows[0]["id"].ToString() == "2"))
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var jwt = JwtTokenGenerator.Create(Response.Tables[0].Rows[0]["UserId"].ToString(), Response.Tables[0].Rows[0]["UGuid"].ToString(), Response.Tables[0].Rows[0]["PanelPart"].ToString(), Response.Tables[0].Rows[0]["host"].ToString(), Response.Tables[0].Rows[0]["vpn"].ToString(), Response.Tables[0].Rows[0]["UseRadis"].ToString(), Response.Tables[0].Rows[0]["LevelNo"].ToString());
                //var ec= ED.EncryptString(ConfigItems.FrontSecret,jwt.AccessToken);
                //await _cacheManager.SetInMinasync(String.Format(GlobalCacheKey.UserAccessToken, Response.Tables[0].Rows[0]["UGuid"].ToString()), ConfigItems.DefaultJwtExpireInMin, jwt.AccessToken, ConfigItems.RedisDataBase);

                if (Response.Tables[0].Rows[0]["userauth"].ToString() != "0")
                {
                    await _cacheManager.SetInMinasync(String.Format(GlobalCacheKey.UserTempAccessToken, Response.Tables[0].Rows[0]["UGuid"].ToString()), ConfigItems.expiryMinutes, jwt.AccessToken, ConfigItems.RedisAuthdb);
                }
                else
                {
                    await _cacheManager.SetInMinasync(string.Format(GlobalCacheKey.UserAccessToken, Response.Tables[0].Rows[0]["UGuid"].ToString()), ConfigItems.expiryMinutes, jwt.AccessToken, ConfigItems.RedisLocaldb);
                    //await _cacheManager.SetInMinasync(string.Format(GlobalCacheKey.UserAccessToken, Response.Tables[0].Rows[0]["UGuid"].ToString()), ConfigItems.expiryMinutes, jwt.AccessToken, ConfigItems.RedisCommon);
                }


                var t1 = new
                {
                    uname = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["username"].ToString()) ? "" : Response.Tables[0].Rows[0]["username"],
                    ppart = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["PanelPart"].ToString()) ? "" : Response.Tables[0].Rows[0]["PanelPart"],
                    barcod = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["UserBarcode"].ToString()) ? "" : Response.Tables[0].Rows[0]["UserBarcode"],
                    flogin = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["FirstLogin"].ToString()) ? false : Response.Tables[0].Rows[0]["FirstLogin"],
                    rdisplay = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["RulesDisplay"].ToString()) ? false : Response.Tables[0].Rows[0]["RulesDisplay"],
                    ipop = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["ImagePopup"].ToString()) ? false : Response.Tables[0].Rows[0]["ImagePopup"],
                    token = jwt.AccessToken,
                    auth = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["userauth"].ToString()) ? 0 : Response.Tables[0].Rows[0]["userauth"],
                    curr = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["curralias"].ToString()) ? "" : Response.Tables[0].Rows[0]["curralias"],
                    ptype = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["partnershiptype"].ToString()) ? 0 : Response.Tables[0].Rows[0]["partnershiptype"]
                };
                var t2 = new
                {
                    rtoken = ""//JwtTokenGenerator.GenerateRefreshToken()
                };
                return Return200("success", new { t1 = t1, t2 = t2 });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Login : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(login));
                return Return400("Server Error");
            }
            //}
        }

        [HttpPost]
        [TempAuth, KeyFilter]
        [Route("verifycode")]
        public async Task<HttpResponseMessage> VerifyCode(VerifyCode vc)
        {
            try
            {
                string u_id = string.Empty;
                ErrorLog.WriteLogAll("VerifyCode", JsonConvert.SerializeObject(vc));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                vc.guid = uu_id;
                var Response = _dimfrontservice.VerifyCode(vc);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("VerifyCode", JsonConvert.SerializeObject(vc), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var jwt = JwtTokenGenerator.Create(JwtTokenGenerator.GetSauid(header), JwtTokenGenerator.GetSaGuid(header), JwtTokenGenerator.Getppart(header), JwtTokenGenerator.GetHost(header), JwtTokenGenerator.GetVpn(header), JwtTokenGenerator.Geturedis(header).ToString(), JwtTokenGenerator.getlevno(header).ToString());
                _cacheManager.Remove(string.Format(GlobalCacheKey.UserTempAccessToken, u_id), ConfigItems.RedisAuthdb);
                //var ec = ED.EncryptString(ConfigItems.FrontSecret, jwt.AccessToken);
                await _cacheManager.SetInMinasync(string.Format(GlobalCacheKey.UserAccessToken, u_id), ConfigItems.expiryMinutes, jwt.AccessToken, ConfigItems.RedisLocaldb);
                //await _cacheManager.SetInMinasync(string.Format(GlobalCacheKey.UserAccessToken, u_id), ConfigItems.expiryMinutes, jwt.AccessToken, ConfigItems.RedisCommon);

                //var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                //    .Select(x => new
                //    {
                //        token = jwt.AccessToken
                //    });
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString(), jwt.AccessToken);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("VerifyCode", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(vc));
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getauth")]
        public HttpResponseMessage GetAuth()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                var Response = _dimfrontservice.GetAuth(uu_id, JwtTokenGenerator.getlevno(header));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GetAuth", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //var t1 = Response.Tables[1].Rows["userauth"]<= 0 ? null : Response.Tables[1].AsEnumerable()
                //    .Select(x => new
                //    {
                //        auth = string.IsNullOrEmpty(x["userauth"].ToString()) ? 0 : x["userauth"]
                //    });
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString(), Response.Tables[1].Rows[0]["userauth"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetAuth", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("authon")]
        public HttpResponseMessage AuthOn()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                var Response = _dimfrontservice.AuthOn(uu_id, JwtTokenGenerator.getlevno(header));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("AuthOn", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                //    .Select(x => new
                //    {
                //        tokenval = string.IsNullOrEmpty(x["tokenval"].ToString()) ? 0 : x["tokenval"]
                //    });
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString(), Response.Tables[0].Rows[0]["tokenval"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("AuthOn", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("authoff")]
        public HttpResponseMessage AuthOff(VerifyCode vc)
        {
            try
            {
                string u_id = string.Empty;
                ErrorLog.WriteLogAll("AuthOff", JsonConvert.SerializeObject(vc));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                vc.guid = uu_id;
                vc.lvlno = JwtTokenGenerator.getlevno(header);
                var Response = _dimfrontservice.AuthOff(vc);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("AuthOff", JsonConvert.SerializeObject(vc), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("AuthOff", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(vc));
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [TempAuth, KeyFilter]
        [Route("verifycodetele")]
        public async Task<HttpResponseMessage> VerifyCodeTele(VerifyCode vc)
        {
            try
            {
                string u_id = string.Empty;
                ErrorLog.WriteLogAll("VerifyCodeTele", JsonConvert.SerializeObject(vc));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                vc.guid = uu_id;
                var Response = _dimfrontservice.VerifyCodeTele(vc);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("VerifyCodeTele", JsonConvert.SerializeObject(vc), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var jwt = JwtTokenGenerator.Create(JwtTokenGenerator.GetSauid(header), JwtTokenGenerator.GetSaGuid(header), JwtTokenGenerator.Getppart(header), JwtTokenGenerator.GetHost(header), JwtTokenGenerator.GetVpn(header), JwtTokenGenerator.Geturedis(header).ToString(), JwtTokenGenerator.getlevno(header).ToString());

                _cacheManager.Remove(string.Format(GlobalCacheKey.UserTempAccessToken, u_id), ConfigItems.RedisAuthdb);
                //var ec = ED.EncryptString(ConfigItems.FrontSecret, jwt.AccessToken);
                await _cacheManager.SetInMinasync(string.Format(GlobalCacheKey.UserAccessToken, u_id), ConfigItems.expiryMinutes, jwt.AccessToken, ConfigItems.RedisLocaldb);
                //await _cacheManager.SetInMinasync(string.Format(GlobalCacheKey.UserAccessToken, u_id), ConfigItems.expiryMinutes, jwt.AccessToken, ConfigItems.RedisCommon);

                //var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                //    .Select(x => new
                //    {
                //        token = jwt.AccessToken
                //    });
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString(), jwt.AccessToken);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("VerifyCodeTele", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(vc));
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("userchecktele")]
        public HttpResponseMessage UserCheckTele()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                var Response = _dimfrontservice.UserCheckTele(uu_id, JwtTokenGenerator.getlevno(header));
                //ErrorLog.WriteLog("UserCheckTele:SQLResp", JsonConvert.SerializeObject(Response));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("UserCheckTele", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var param = new { tchatid = Response.Tables[0].Rows[0]["tchatid"].ToString(), token = Response.Tables[0].Rows[0]["token"].ToString() };

                var resp = HttpHelper.Post(ConfigItems.TeleUrl, JsonConvert.SerializeObject(param), "application/json", "POST");
                //ErrorLog.WriteLog("UserCheckTele:SQLResp1", JsonConvert.SerializeObject(Response));
                var teleresp = JsonConvert.DeserializeObject<TeleMes>(resp);
                if (teleresp != null && teleresp.status == 300)
                {
                    return Return300(teleresp.msg);
                }
                if (teleresp != null && teleresp.status == 400)
                {
                    return Return400(teleresp.msg);
                }
                //String param = "chat_id=" + Response.Tables[0].Rows[0]["tchatid"].ToString() + "&parse_mode=HTML" + "&text=" + Response.Tables[0].Rows[0]["token"].ToString();
                ////ErrorLog.WriteLog("UserCheckTele:Param", param);
                ////ErrorLog.WriteLog("UserCheckTele:TeleUrl", ConfigItems.TeleUrl);
                //string resp = "";
                //try
                //{
                //    resp = HttpHelper.Post3(ConfigItems.TeleUrl, param, "application/x-www-form-urlencoded", "POST");
                //}
                //catch (Exception exx)
                //{
                //    ErrorLog.WriteLog("UserCheckTele:UrlRespEx", exx.ToString());
                //}
                //ErrorLog.WriteLog("UserCheckTele:UrlResp", resp);
                //var teleresp = JsonConvert.DeserializeObject<TeleResp>(resp);
                ////ErrorLog.WriteLog("UserCheckTele:ClasOBJ", JsonConvert.SerializeObject(teleresp));
                //if (!teleresp.ok && teleresp.error_code == 403)
                //    return Return300("Please intialize bot to receive Otp");

                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("UserCheckTele", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [TempAuth, KeyFilter]
        [Route("genotptele")]
        public HttpResponseMessage GenOtpTele()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                var Response = _dimfrontservice.GenOtpTele(uu_id);
                //ErrorLog.WriteLog("GenOtpTele", JsonConvert.SerializeObject(Response));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GenOtpTele", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //String par2 = Base64Encode(Response.Tables[0].Rows[0]["token"].ToString());

                //String param = "tchatid=" + Response.Tables[0].Rows[0]["tchatid"].ToString() + "&token=" + par2;
                var param = new { tchatid = Response.Tables[0].Rows[0]["tchatid"].ToString(), token = Response.Tables[0].Rows[0]["token"].ToString() };

                var resp = HttpHelper.Post(ConfigItems.TeleUrl, JsonConvert.SerializeObject(param), "application/json", "POST");
                var teleresp = JsonConvert.DeserializeObject<TeleMes>(resp);
                if (teleresp != null && teleresp.status == 300)
                {
                    return Return300(teleresp.msg);
                }
                if (teleresp != null && teleresp.status == 400)
                {
                    return Return400(teleresp.msg);
                }
                //String param = "chat_id=" + Response.Tables[0].Rows[0]["tchatid"].ToString() + "&parse_mode=HTML" + "&text=" + Response.Tables[0].Rows[0]["token"].ToString();
                //var resp = HttpHelper.Post3(ConfigItems.TeleUrl, param, "application/x-www-form-urlencoded", "POST");
                ////ErrorLog.WriteLog("GenOtpTele1", JsonConvert.SerializeObject(resp));
                //var teleresp = JsonConvert.DeserializeObject<TeleResp>(resp);
                //try
                //{
                //    if (!teleresp.ok && teleresp.error_code == 403)
                //        return Return300("Please intialize bot to receive Otp");
                //}
                //catch (Exception ex)
                //{
                //    ErrorLog.WriteLog("GenOtpTeleEx", ex.Message.ToString());
                //    return Return400(ex.Message);
                //}
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GenOtpTele", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }
        public static string Base64Encode(string plainText)
        {
            var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
            return System.Convert.ToBase64String(plainTextBytes);
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("authontele")]
        public HttpResponseMessage AuthOnTele(AuthOnTele aot)
        {
            try
            {
                string u_id = string.Empty;
                ErrorLog.WriteLogAll("AuthOnTele", JsonConvert.SerializeObject(aot));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                aot.guid = uu_id;
                aot.lvlno = JwtTokenGenerator.getlevno(header);
                var Response = _dimfrontservice.AuthOnTele(aot);
                //ErrorLog.WriteLog("authontele", JsonConvert.SerializeObject(Response));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("AuthOnTele", JsonConvert.SerializeObject(aot), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                //    .Select(x => new
                //    {
                //        cval = string.IsNullOrEmpty(x["cval"].ToString()) ? 0 : x["cval"]
                //    });
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString(), Response.Tables[0].Rows[0]["cval"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("AuthOnTele", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(aot));
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("authofftele")]
        public HttpResponseMessage AuthOffTele(VerifyCode vc)
        {
            try
            {
                string u_id = string.Empty;
                ErrorLog.WriteLogAll("AuthOffTele", JsonConvert.SerializeObject(vc));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                vc.guid = uu_id;
                vc.lvlno = JwtTokenGenerator.getlevno(header);
                var Response = _dimfrontservice.AuthOffTele(vc);
                //ErrorLog.WriteLog("AuthOffTele", JsonConvert.SerializeObject(Response));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("AuthOffTele", JsonConvert.SerializeObject(vc), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var param = new { tchatid = Response.Tables[0].Rows[0]["tchatid"].ToString(), token = Response.Tables[0].Rows[0]["MSG"].ToString() };

                var resp = HttpHelper.Post(ConfigItems.TeleUrl, JsonConvert.SerializeObject(param), "application/json", "POST");
                var teleresp = JsonConvert.DeserializeObject<TeleMes>(resp);
                if (teleresp != null && teleresp.status == 300)
                {
                    return Return300(teleresp.msg);
                }
                if (teleresp != null && teleresp.status == 400)
                {
                    return Return400(teleresp.msg);
                }
                //String param = "chat_id=" + Response.Tables[0].Rows[0]["tchatid"].ToString() + "&parse_mode=HTML" + "&text=" + Response.Tables[0].Rows[0]["MSG"].ToString();
                //var resp = HttpHelper.Post3(ConfigItems.TeleUrl, param, "application/x-www-form-urlencoded", "POST");
                //var teleresp = JsonConvert.DeserializeObject<TeleResp>(resp);

                //if (!teleresp.ok && teleresp.error_code == 403)
                //    return Return300("Please intialize bot to receive Otp");

                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("AuthOffTele", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(vc));
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("bannerdata")]
        public HttpResponseMessage BannerData()
        {
            try
            {
                ErrorLog.WriteLogAll("BannerData", "");

                String u_id = String.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"];
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Boolean isredis = JwtTokenGenerator.Geturedis(header);
                if (isredis)
                {
                    if (!_redisManagerTrader.IsExist("BannerData", ConfigItems.Rediscdb))
                    {
                        //var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.bannerdata, "", "application/x-www-form-urlencoded", "POST");
                    }
                    try
                    {
                        //var datalst = _redisManagerTrader.Get<CasinolistRe>("BannerData", ConfigItems.Rediscdb);
                        var data = _redisManagerTrader.Get<BannerData>("BannerData", ConfigItems.Rediscdb);
                        if (data != null)
                        {
                            var datas = data.t1.Where(_ => _.picon == 2).Select(o => new { bid = o.bid, bimg = o.bimg, oid = o.oid, bdesc = o.bdesc });
                            return Return200("Success", new { t1 = datas });
                            //return Return200("Success", data);
                        }
                        else
                            return Return300("No record found.");
                    }
                    catch (Exception)
                    {
                        return Return300("invalid data.");
                    }

                    //var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.bannerdata, "", "application/x-www-form-urlencoded", "POST");
                    //var obj = JsonConvert.DeserializeObject<BannerDataRes>(resp);
                    //return obj;
                }
                else
                {
                    var Response = _dimfrontservice.BannerData();

                    if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("BannerData", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response == null || Response.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                         .Select(x => new
                         {
                             bid = string.IsNullOrEmpty(x["Bannerid"].ToString()) ? 0 : x["Bannerid"],
                             bimg = string.IsNullOrEmpty(x["BannerImage"].ToString()) ? "" : x["BannerImage"],
                             oid = string.IsNullOrEmpty(x["orderid"].ToString()) ? 0 : x["orderid"],
                             bdesc = string.IsNullOrEmpty(x["BDescription"].ToString()) ? "" : x["BDescription"]
                         });
                    return Return200("success", new { t1 = t1 });
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("BannerData : " + ex.ToString(), " : Req");
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("pbannerdata")]
        public object PBannerData(PBannerDatareq pBannerData)
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    var par = "dom=" + pBannerData.dom;
                    var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.pbannerdata, par, "application/x-www-form-urlencoded", "POST");
                    var obj = JsonConvert.DeserializeObject<BannerDataRes>(resp);
                    return obj;
                }
                else
                {
                    var Response = _dimfrontservice.BannerData();
                    if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("BannerData", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response == null || Response.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                        .Select(x => new
                        {
                            bid = string.IsNullOrEmpty(x["Bannerid"].ToString()) ? 0 : x["Bannerid"],
                            bimg = string.IsNullOrEmpty(x["BannerImage"].ToString()) ? "" : x["BannerImage"],
                            oid = string.IsNullOrEmpty(x["orderid"].ToString()) ? 0 : x["orderid"],
                            bdesc = string.IsNullOrEmpty(x["BDescription"].ToString()) ? "" : x["BDescription"]
                        });
                    return Return200("success", new { t1 = t1 });
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("InsertUserBelow3rd", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("pbannerdatawolf")]
        public object PBannerDatawolf()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.pbannerdatawolf, "", "application/x-www-form-urlencoded", "POST");
                    var obj = JsonConvert.DeserializeObject<BannerDataRes>(resp);
                    return obj;
                }
                else
                {
                    var Response = _dimfrontservice.BannerData();
                    if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("BannerData", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response == null || Response.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                        .Select(x => new
                        {
                            bid = string.IsNullOrEmpty(x["Bannerid"].ToString()) ? 0 : x["Bannerid"],
                            bimg = string.IsNullOrEmpty(x["BannerImage"].ToString()) ? "" : x["BannerImage"],
                            oid = string.IsNullOrEmpty(x["orderid"].ToString()) ? 0 : x["orderid"],
                            bdesc = string.IsNullOrEmpty(x["BDescription"].ToString()) ? "" : x["BDescription"]
                        });
                    return Return200("success", new { t1 = t1 });
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("PBannerDatawolf", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("casinolist")]
        public object Casinolist(Casinolist casinolist)
        {
            try
            {
                string u_id = string.Empty;
                ErrorLog.WriteLogAll("Casinolist", JsonConvert.SerializeObject(casinolist));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    if (!_redisManagerTrader.IsExist("Casinolist", ConfigItems.Rediscdb))
                    {
                        var par = "picon=" + casinolist.picon;
                        var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.casinolist, par, "application/x-www-form-urlencoded", "POST");
                    }
                    try
                    {
                        var datalst = _redisManagerTrader.Get<CasinolistRe>("Casinolist", ConfigItems.Rediscdb);
                        if (datalst != null)
                        {
                            var data = datalst.t1.Where(_ => _.picon == casinolist.picon).Select(o => new { o.clid, o.gmname, o.listono, o.nlunched, o.pid, gtype = o.gtype.ToLower(), o.m, o.picon, o.cname }).OrderBy(i => i.listono);
                            return Return200("Success", new { t1 = data });
                        }
                        else
                            return Return300("No record found.");
                    }
                    catch (Exception)
                    {
                        return Return300("invalid data.");
                    }
                    //var par = "picon=" + casinolist.picon;
                    //var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.casinolist, par, "application/x-www-form-urlencoded", "POST");
                    //var obj = JsonConvert.DeserializeObject<CasinolistRes>(resp);
                    //return obj;
                }
                else
                {
                    var Response = _dimfrontservice.Casinolist(casinolist);
                    if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("Casinolist", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response == null || Response.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                        .Select(x => new
                        {//CListId,GameName,ListOrderNo
                            clid = string.IsNullOrEmpty(x["CListId"].ToString()) ? 0 : x["CListId"],
                            gmname = string.IsNullOrEmpty(x["GameName"].ToString()) ? "" : x["GameName"],
                            listono = string.IsNullOrEmpty(x["ListOrderNo"].ToString()) ? 0 : x["ListOrderNo"],
                            nlunched = string.IsNullOrEmpty(x["IsNewLunched"].ToString()) ? false : x["IsNewLunched"],
                            pid = string.IsNullOrEmpty(x["PageId"].ToString()) ? "" : x["PageId"].ToString().ToLower(),
                            gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower(),
                            m = string.IsNullOrEmpty(x["eventtypeid"].ToString()) ? 0 : x["eventtypeid"],//string.IsNullOrEmpty(x["redisnum"].ToString()) ? 0 : x["redisnum"],
                            picon = string.IsNullOrEmpty(x["pageicon"].ToString()) ? 0 : x["pageicon"],
                            cname = string.IsNullOrEmpty(x["cname"].ToString()) ? "" : x["cname"].ToString()
                        });
                    return Return200("success", new { t1 = t1 });
                }

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Casinolist", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(casinolist));
                return Return400(ex.Message);
            }

        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("treeviewdata")]
        public async Task<HttpResponseMessage> TreeviewData()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    if (!_redisManagerTrader.IsExist("TreeviewData", ConfigItems.Rediscdb))
                    {
                        var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.treeviewdata, "", "application/x-www-form-urlencoded", "POST");
                    }
                    try
                    {
                        string data = "";
                        data = await _redisManagerTrader.Getasyncstr("TreeviewData", ConfigItems.Rediscdb);
                        if (string.IsNullOrEmpty(data))
                            return Return300("No record found.");
                        data = data.RemoveInvalidChars();
                        var decompressedString = data.Decompress();
                        var datalst = new { t1 = JsonConvert.DeserializeObject(decompressedString.Replace("[null]", "null")) };
                        //var datalst = JsonConvert.DeserializeObject<TreeViewRe>(decompressedString);
                        if (datalst != null)
                            return Return200("Success", datalst);
                        else
                            return Return300("No record found.");
                    }
                    catch (Exception ex)
                    {
                        var msg = ex.ToString();
                        return Return300("invalid data.");
                    }
                    //var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.treeviewdata, "", "application/x-www-form-urlencoded", "POST");
                    //var obj = JsonConvert.DeserializeObject<TreeviewDataRes>(resp);
                    //return obj;
                }
                else
                {
                    var Response = _dimfrontservice.TreeviewData();
                    if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("TreeviewData", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response == null || Response.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                    var t1 = (from pd in Response.Tables[0].AsEnumerable()
                              join od in Response.Tables[1].AsEnumerable()
                              on pd["EventId"] equals od["EventTypeId"]
                              into t
                              from rt in t.DefaultIfEmpty()
                              orderby pd["EventId"]
                              select new
                              {
                                  etid = pd["EventId"] == null ? 0 : pd["EventId"],
                                  etname = pd["EventName"] == null ? "" : pd["EventName"],
                                  oid = pd["orderid"] == null ? 0 : pd["orderid"],
                                  cid = rt == null ? "" : rt["CommId"],
                                  cname = rt == null ? "" : rt["CommName"],
                                  stime = rt == null ? "" : rt["gameStartTime"],
                                  gmid = rt == null ? "" : rt["GameId"],
                                  ename = rt == null ? "" : rt["EventName"],
                                  //m = rt == null ? 0 : rt["RedisNum"]
                              }).GroupBy(r1 => new
                              {
                                  r1.etid,
                                  r1.etname,
                                  r1.oid,
                              }, (key1, group1) => new
                              {
                                  etid = key1.etid.ToString(),
                                  name = key1.etname.ToString(),
                                  key1.oid,
                                  children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ (group1.GroupBy(r2 => new
                                  {
                                      r2.cid,
                                      r2.cname
                                  }, (key2, group2) => key2.cid.ToString() == "" ? null : new
                                  {
                                      cid = key2.cid.ToString(),
                                      name = key2.cname.ToString(),
                                      children = group2.Select(y => new
                                      {
                                          gmid = y.gmid.ToString(),
                                          name = y.ename.ToString(),
                                          etid = Convert.ToInt64(y.etid)
                                          //m = Convert.ToInt32(y.m)
                                      }).OrderBy(i => i.name),
                                      //sdata = group2.GroupBy(r2 => new
                                      //{
                                      //    r2.stime,
                                      //}, (key3, group3) => new
                                      //{
                                      //    stime = key3.stime,

                                      //})
                                  })),
                                  //)
                              }).OrderBy(d => d.oid);
                    return Return200("success", new { t1 = t1 });
                }

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("TreeviewData", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("treeviewdatahor")]
        public async Task<HttpResponseMessage> TreeviewDataHor()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    if (!_redisManagerTrader.IsExist("HorTreeviewData", ConfigItems.Rediscdb))
                    {
                        var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.treeviewdata, "", "application/x-www-form-urlencoded", "POST");
                    }
                    try
                    {
                        string data = "";
                        data = await _redisManagerTrader.Getasyncstr("HorTreeviewData", ConfigItems.Rediscdb);
                        if (string.IsNullOrEmpty(data))
                            return Return300("No record found.");
                        data = data.RemoveInvalidChars();
                        var decompressedString = data.Decompress();
                        var datalst = new { t1 = JsonConvert.DeserializeObject(decompressedString.Replace("[null]", "null")) };
                        //var datalst = JsonConvert.DeserializeObject<TreeViewRe>(decompressedString);
                        if (datalst != null)
                            return Return200("Success", datalst);
                        else
                            return Return300("No record found.");
                    }
                    catch (Exception ex)
                    {
                        var msg = ex.ToString();
                        return Return300("invalid data.");
                    }
                    //var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.treeviewdata, "", "application/x-www-form-urlencoded", "POST");
                    //var obj = JsonConvert.DeserializeObject<TreeviewDataRes>(resp);
                    //return obj;
                }
                else
                {
                    var Response = _dimfrontservice.TreeviewData();
                    if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("TreeviewData", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response == null || Response.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                    var t1 = (from pd in Response.Tables[0].AsEnumerable()
                              join od in Response.Tables[1].AsEnumerable()
                              on pd["EventId"] equals od["EventTypeId"]
                              into t
                              from rt in t.DefaultIfEmpty()
                              orderby pd["EventId"]
                              select new
                              {
                                  etid = pd["EventId"] == null ? 0 : pd["EventId"],
                                  etname = pd["EventName"] == null ? "" : pd["EventName"],
                                  oid = pd["orderid"] == null ? 0 : pd["orderid"],
                                  cid = rt == null ? "" : rt["CommId"],
                                  cname = rt == null ? "" : rt["CommName"],
                                  stime = rt == null ? "" : rt["gameStartTime"],
                                  gmid = rt == null ? "" : rt["GameId"],
                                  ename = rt == null ? "" : rt["EventName"],
                                  //m = rt == null ? 0 : rt["RedisNum"]
                              }).GroupBy(r1 => new
                              {
                                  r1.etid,
                                  r1.etname,
                                  r1.oid,
                              }, (key1, group1) => new
                              {
                                  etid = key1.etid.ToString(),
                                  name = key1.etname.ToString(),
                                  key1.oid,
                                  children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ (group1.GroupBy(r2 => new
                                  {
                                      r2.cid,
                                      r2.cname
                                  }, (key2, group2) => key2.cid.ToString() == "" ? null : new
                                  {
                                      cid = key2.cid.ToString(),
                                      name = key2.cname.ToString(),
                                      children = group2.Select(y => new
                                      {
                                          gmid = y.gmid.ToString(),
                                          name = y.ename.ToString(),
                                          etid = Convert.ToInt64(y.etid)
                                          //m = Convert.ToInt32(y.m)
                                      }).OrderBy(i => i.name),
                                      //sdata = group2.GroupBy(r2 => new
                                      //{
                                      //    r2.stime,
                                      //}, (key3, group3) => new
                                      //{
                                      //    stime = key3.stime,

                                      //})
                                  })),
                                  //)
                              }).OrderBy(d => d.oid);
                    return Return200("success", new { t1 = t1 });
                }

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("TreeviewData", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("highlightdata")]
        public async Task<HttpResponseMessage> HighlightData(HighlightData highlightData)
        {
            try
            {
                ErrorLog.WriteLogAll("HighlightData", JsonConvert.SerializeObject(highlightData));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    //var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                    //var resp = _httpHelper.Post(_config.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST");
                    //var obj = JsonConvert.DeserializeObject<Highlightnew>(resp);
                    //if (obj != null && obj.data != null && obj.data.t1 == null && obj.data.t2 == null)
                    //    return Return300("No Record Found.");
                    //else
                    //    return obj;
                    if (highlightData.m == 0)
                    {

                        if (!_cacheManagerCric.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                        {
                            var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                            await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                        }
                        string vid = highlightData.etid.ToString();
                        if (highlightData.etid == 999)
                        {
                            highlightData.etid = 4;
                        }
                        var data = _cacheManagerCric.Get<HighlightData11>("HighlightData_" + highlightData.etid, highlightData.m);
                        try
                        {
                            if (data != null)
                            {
                                if (highlightData.action.ToLower() == "all")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString());
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerCric, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = /*dataetid1 != null && dataetid1.Count() > 0 ?*/ dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList() /*: null*/;

                                        var mdata1 = /*dataetid2 != null && dataetid2.Count() > 0 ?*/ dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList() /*: null*/;

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           oid = pd.oid,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             oid = pd.oid,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (highlightData.etid == 4 && vid == "999")
                                        {
                                            var t3 = t1 != null ? t1.Where(s => s.iscc != 0).ToList() : null;
                                            var t4 = t2 != null ? t2.Where(s => s.iscc != 0).ToList() : null;
                                            if ((t3 == null || t3.Count() == 0) && (t4 == null || t4.Count() == 0))
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = t3, t2 = t4 });
                                        }
                                        if (highlightData.etid == 4 && vid == "4")
                                        {
                                            var t3 = t1 != null ? t1.Where(s => s.iscc == 0).ToList() : null;
                                            var t4 = t2 != null ? t2.Where(s => s.iscc == 0).ToList() : null;
                                            if ((t3 == null || t3.Count() == 0) && (t4 == null || t4.Count() == 0))
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = t3, t2 = t4 });
                                        }
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else if (highlightData.action.ToLower() == "today")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.stime.ToString("MM/dd/yyyy") == DateTime.Now.ToString("MM/dd/yyyy"));
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerCric, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();
                                        //var mdata = dataetid1.Where(k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           oid = pd.oid,
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             pd.detail.m,
                                                                                             oid = pd.oid,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        //return Return200("Success", t2);if (etid == "4")
                                        if (highlightData.etid == 4 && vid == "999")
                                        {
                                            var t3 = t1 != null ? t1.Where(s => s.iscc != 0).ToList() : null;
                                            var t4 = t2 != null ? t2.Where(s => s.iscc != 0).ToList() : null;
                                            if ((t3 == null || t3.Count() == 0) && (t4 == null || t4.Count() == 0))
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = t3, t2 = t4 });
                                        }
                                        if (highlightData.etid == 4 && vid == "4")
                                        {
                                            var t3 = t1 != null ? t1.Where(s => s.iscc == 0).ToList() : null;
                                            var t4 = t2 != null ? t2.Where(s => s.iscc == 0).ToList() : null;
                                            if ((t3 == null || t3.Count() == 0) && (t4 == null || t4.Count() == 0))
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = t3, t2 = t4 });
                                        }
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }

                                }
                                else if (highlightData.action.ToLower() == "inplay")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.iplay == true);
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        //keyid = string.Join(",", (dataetid.AsEnumerable().Select(p => p.gmid.ToString())));
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerCric, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        //var mdata = dataetid1.Where(k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             oid = pd.oid,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (highlightData.etid == 4 && vid == "999")
                                        {
                                            var t3 = t1 != null ? t1.Where(s => s.iscc != 0).ToList() : null;
                                            var t4 = t2 != null ? t2.Where(s => s.iscc != 0).ToList() : null;
                                            if ((t3 == null || t3.Count() == 0) && (t4 == null || t4.Count() == 0))
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = t3, t2 = t4 });
                                        }
                                        if (highlightData.etid == 4 && vid == "4")
                                        {
                                            var t3 = t1 != null ? t1.Where(s => s.iscc == 0).ToList() : null;
                                            var t4 = t2 != null ? t2.Where(s => s.iscc == 0).ToList() : null;
                                            if ((t3 == null || t3.Count() == 0) && (t4 == null || t4.Count() == 0))
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = t3, t2 = t4 });
                                        }
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else
                                {
                                    if (!_cacheManagerCric.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                                    {
                                        var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                                        await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                                        return Return300("No record found.");
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog.WriteLog("HighlightDatacric", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(highlightData));
                            return Return300("invalid data.");
                        }
                    }
                    if (highlightData.m == 1)
                    {
                        if (!_cacheManagerFoot.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                        {
                            var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                            await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                        }
                        var data = _cacheManagerFoot.Get<HighlightData11>("HighlightData_" + highlightData.etid, highlightData.m);
                        try
                        {
                            if (data != null)
                            {
                                if (highlightData.action.ToLower() == "all")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString());
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerFoot, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           oid = pd.oid,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             oid = pd.oid,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if ((t1 == null || t1.Count() == 0) && (t2 == null || t2.Count() == 0))
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else if (highlightData.action.ToLower() == "today")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.stime.ToString("MM/dd/yyyy") == DateTime.Now.ToString("MM/dd/yyyy"));
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerFoot, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();
                                        //var mdata = dataetid1.Where(k => _cacheManagerFoot.IsExist(k.gmid.ToString(), k.m) && _cacheManagerFoot.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerFoot.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerFoot.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerFoot.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerFoot.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           oid = pd.oid,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             oid = pd.oid,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if ((t1 == null || t1.Count() == 0) && (t2 == null || t2.Count() == 0))
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }

                                }
                                else if (highlightData.action.ToLower() == "inplay")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.iplay == true);
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        //keyid = string.Join(",", (dataetid.AsEnumerable().Select(p => p.gmid.ToString())));
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerFoot, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();
                                        //var mdata = dataetid1.Where(k => _cacheManagerFoot.IsExist(k.gmid.ToString(), k.m) && _cacheManagerFoot.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerFoot.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerFoot.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerFoot.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerFoot.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           oid = pd.oid,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             oid = pd.oid,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if ((t1 == null || t1.Count() == 0) && (t2 == null || t2.Count() == 0))
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else
                                {
                                    if (!_cacheManagerFoot.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                                    {
                                        var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                                        await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                                    }
                                    return Return300("No record found.");
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog.WriteLog("HighlightDatafoot", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(highlightData));
                            return Return300("invalid data.");
                        }
                    }
                    if (highlightData.m == 2)
                    {
                        if (!_cacheManagerTenni.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                        {
                            var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                            await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                        }
                        var data = _cacheManagerTenni.Get<HighlightData11>("HighlightData_" + highlightData.etid, highlightData.m);
                        try
                        {
                            if (data != null)
                            {
                                if (highlightData.action.ToLower() == "all")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString());
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerTenni, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           oid = pd.oid,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             oid = pd.oid,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if ((t1 == null || t1.Count() == 0) && (t2 == null || t2.Count() == 0))
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else if (highlightData.action.ToLower() == "today")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.stime.ToString("MM/dd/yyyy") == DateTime.Now.ToString("MM/dd/yyyy"));
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        //var mdata = dataetid1.Where(k => _cacheManagerTenni.IsExist(k.gmid.ToString(), k.m) && _cacheManagerTenni.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerTenni.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerTenni.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerTenni.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerTenni.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerTenni, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             oid = pd.oid,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        //return Return200("Success", t2);if (etid == "4")
                                        if ((t1 == null || t1.Count() == 0) && (t2 == null || t2.Count() == 0))
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }

                                }
                                else if (highlightData.action.ToLower() == "inplay")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.iplay == true);
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        //keyid = string.Join(",", (dataetid.AsEnumerable().Select(p => p.gmid.ToString())));
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        //var mdata = dataetid1.Where(k => _cacheManagerTenni.IsExist(k.gmid.ToString(), k.m) && _cacheManagerTenni.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerTenni.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerTenni.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    oid = p.oid,
                                        //    m = p.m,
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerTenni.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerTenni.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerTenni, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             oid = pd.oid,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if ((t1 == null || t1.Count() == 0) && (t2 == null || t2.Count() == 0))
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else
                                {
                                    if (!_cacheManagerTenni.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                                    {
                                        var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                                        await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                                    }
                                    return Return300("No record found.");
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog.WriteLog("HighlightDatatenni", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(highlightData));
                            return Return300("invalid data.");
                        }
                    }
                    if (highlightData.m == 3)
                    {
                        if (!_cacheManagerOther.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                        {
                            var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                            await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                        }
                        var data = _cacheManagerOther.Get<HighlightData11>("HighlightData_" + highlightData.etid, highlightData.m);
                        try
                        {
                            if (data != null)
                            {
                                if (highlightData.action.ToLower() == "all")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString());
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerOther, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             oid = pd.oid,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (highlightData.etid.ToString() == "10" || highlightData.etid.ToString() == "12")
                                        {
                                            var query = t1.GroupBy(r1 => new
                                            {
                                                r1.cid,
                                                r1.cname,
                                            }, (key1, group1) => new
                                            {
                                                cid = key1.cid,
                                                cname = key1.cname,
                                                children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                                {
                                                    r2.ename,
                                                }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                                {
                                                    ename = key2.ename,
                                                    children = group2.Select(y => new
                                                    {
                                                        etid = y.etid,
                                                        gmid = y.gmid,
                                                        iplay = y.iplay,
                                                        stime = y.stime,
                                                        m = y.m,
                                                        gtype = y.gtype
                                                    }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                                }).ToList(),
                                                //)
                                            }).OrderBy(sd => sd.cname).ToList();
                                            //var query1 = t2.GroupBy(r1 => new
                                            //{
                                            //    r1.cid,
                                            //    r1.cname,
                                            //}, (key1, group1) => new
                                            //{
                                            //    cid = key1.cid,
                                            //    cname = key1.cname,
                                            //    children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                            //    {
                                            //        r2.ename,
                                            //    }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                            //    {
                                            //        ename = key2.ename,
                                            //        children = group2.Select(y => new
                                            //        {
                                            //            gmid = y.gmid,
                                            //            iplay = y.iplay,
                                            //            stime = y.stime,
                                            //        }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                            //    }).ToList(),
                                            //    //)
                                            //}).ToList();
                                            if (query == null || query.Count() == 0)
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = query });
                                        }
                                        if ((t1 == null || t1.Count() == 0) && (t2 == null || t2.Count() == 0))
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else if (highlightData.action.ToLower() == "today")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.stime.ToString("MM/dd/yyyy") == DateTime.Now.ToString("MM/dd/yyyy"));
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerOther, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();
                                        //var mdata = dataetid1.Where(k => _cacheManagerOther.IsExist(k.gmid.ToString(), k.m) && _cacheManagerOther.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerOther.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerOther.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerOther.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerOther.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             pd.detail.m,
                                                                                             oid = pd.oid,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (highlightData.etid.ToString() == "10" || highlightData.etid.ToString() == "12")
                                        {
                                            var query = t1.GroupBy(r1 => new
                                            {
                                                r1.cid,
                                                r1.cname,
                                            }, (key1, group1) => new
                                            {
                                                cid = key1.cid,
                                                cname = key1.cname,
                                                children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                                {
                                                    r2.ename,
                                                }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                                {
                                                    ename = key2.ename,
                                                    children = group2.Select(y => new
                                                    {
                                                        etid = y.etid,
                                                        gmid = y.gmid,
                                                        iplay = y.iplay,
                                                        stime = y.stime,
                                                        m = y.m,
                                                        gtype = y.gtype
                                                    }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                                }).ToList(),
                                                //)
                                            }).ToList();
                                            //var query1 = t2.GroupBy(r1 => new
                                            //{
                                            //    r1.cid,
                                            //    r1.cname,
                                            //}, (key1, group1) => new
                                            //{
                                            //    cid = key1.cid,
                                            //    cname = key1.cname,
                                            //    children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                            //    {
                                            //        r2.ename,
                                            //    }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                            //    {
                                            //        ename = key2.ename,
                                            //        children = group2.Select(y => new
                                            //        {
                                            //            gmid = y.gmid,
                                            //            iplay = y.iplay,
                                            //            stime = y.stime,
                                            //        }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                            //    }).ToList(),
                                            //    //)
                                            //}).ToList();
                                            if (query == null || query.Count() == 0)
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = query });
                                        }
                                        if ((t1 == null || t1.Count() == 0) && (t2 == null || t2.Count() == 0))
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }

                                }
                                else if (highlightData.action.ToLower() == "inplay")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.iplay == true);
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        //keyid = string.Join(",", (dataetid.AsEnumerable().Select(p => p.gmid.ToString())));
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerOther, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();
                                        //var mdata = dataetid1.Where(k => _cacheManagerOther.IsExist(k.gmid.ToString(), k.m) && _cacheManagerOther.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerOther.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerOther.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerOther.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerOther.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             oid = pd.oid,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (highlightData.etid.ToString() == "10" || highlightData.etid.ToString() == "12")
                                        {
                                            var query = t1.GroupBy(r1 => new
                                            {
                                                r1.cid,
                                                r1.cname,
                                            }, (key1, group1) => new
                                            {
                                                cid = key1.cid,
                                                cname = key1.cname,
                                                children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                                {
                                                    r2.ename,
                                                }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                                {
                                                    ename = key2.ename,
                                                    children = group2.Select(y => new
                                                    {
                                                        etid = y.etid,
                                                        gmid = y.gmid,
                                                        iplay = y.iplay,
                                                        stime = y.stime,
                                                        m = y.m,
                                                        gtype = y.gtype
                                                    }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                                }).ToList(),
                                                //)
                                            }).ToList();
                                            //var query1 = t2.GroupBy(r1 => new
                                            //{
                                            //    r1.cid,
                                            //    r1.cname,
                                            //}, (key1, group1) => new
                                            //{
                                            //    cid = key1.cid,
                                            //    cname = key1.cname,
                                            //    children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                            //    {
                                            //        r2.ename,
                                            //    }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                            //    {
                                            //        ename = key2.ename,
                                            //        children = group2.Select(y => new
                                            //        {
                                            //            gmid = y.gmid,
                                            //            iplay = y.iplay,
                                            //            stime = y.stime,
                                            //        }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                            //    }).ToList(),
                                            //    //)
                                            //}).ToList();
                                            if (query == null || query.Count() == 0)
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = query });
                                        }
                                        if ((t1 == null || t1.Count() == 0) && (t2 == null || t2.Count() == 0))
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else
                                {
                                    if (!_cacheManagerOther.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                                    {
                                        var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                                        await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                                    }
                                    return Return300("No record found.");
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog.WriteLog("HighlightDataother", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(highlightData));
                            return Return300("invalid data.");
                        }
                    }
                }
                return Return300("No record found");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("HighlightData", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(highlightData));
                return Return400(ex.Message);
            }

        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("highlightdataccmix")]
        public async Task<HttpResponseMessage> HighlightDataccmix(HighlightData highlightData)
        {
            try
            {
                ErrorLog.WriteLogAll("HighlightDataccmix", JsonConvert.SerializeObject(highlightData));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    //var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                    //var resp = _httpHelper.Post(_config.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST");
                    //var obj = JsonConvert.DeserializeObject<Highlightnew>(resp);
                    //if (obj != null && obj.data != null && obj.data.t1 == null && obj.data.t2 == null)
                    //    return Return300("No Record Found.");
                    //else
                    //    return obj;
                    if (highlightData.m == 0)
                    {

                        if (!_cacheManagerCric.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                        {
                            var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                            await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                        }
                        string vid = highlightData.etid.ToString();
                        //if (highlightData.etid == 999)
                        //{
                        //    highlightData.etid = 4;
                        //}
                        var data = _cacheManagerCric.Get<HighlightData11>("HighlightData_" + highlightData.etid, highlightData.m);
                        try
                        {
                            if (data != null)
                            {
                                if (highlightData.action.ToLower() == "all")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString());
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerCric, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = /*dataetid1 != null && dataetid1.Count() > 0 ?*/ dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList() /*: null*/;

                                        var mdata1 = /*dataetid2 != null && dataetid2.Count() > 0 ?*/ dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList() /*: null*/;

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           oid = pd.oid,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             oid = pd.oid,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        //if (highlightData.etid == 4 && vid == "999")
                                        //{
                                        //    var t3 = t1 != null ? t1.Where(s => s.iscc != 0).ToList() : null;
                                        //    var t4 = t2 != null ? t2.Where(s => s.iscc != 0).ToList() : null;
                                        //    if (t3.Count() == 0 && t4.Count() == 0)
                                        //        return Return300("No record found.");
                                        //    return Return200("Success", new { t1 = t3, t2 = t4 });
                                        //}
                                        //if (highlightData.etid == 4 && vid == "4")
                                        //{
                                        //    var t3 = t1 != null ? t1.Where(s => s.iscc == 0).ToList() : null;
                                        //    var t4 = t2 != null ? t2.Where(s => s.iscc == 0).ToList() : null;
                                        //    if (t3.Count() == 0 && t4.Count() == 0)
                                        //        return Return300("No record found.");
                                        //    return Return200("Success", new { t1 = t3, t2 = t4 });
                                        //}
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else if (highlightData.action.ToLower() == "today")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.stime.ToString("MM/dd/yyyy") == DateTime.Now.ToString("MM/dd/yyyy"));
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerCric, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();
                                        //var mdata = dataetid1.Where(k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           oid = pd.oid,
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             pd.detail.m,
                                                                                             oid = pd.oid,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        //return Return200("Success", t2);if (etid == "4")
                                        //if (highlightData.etid == 4 && vid == "999")
                                        //{
                                        //    var t3 = t1 != null ? t1.Where(s => s.iscc != 0).ToList() : null;
                                        //    var t4 = t2 != null ? t2.Where(s => s.iscc != 0).ToList() : null;
                                        //    if (t3.Count() == 0 && t4.Count() == 0)
                                        //        return Return300("No record found.");
                                        //    return Return200("Success", new { t1 = t3, t2 = t4 });
                                        //}
                                        //if (highlightData.etid == 4 && vid == "4")
                                        //{
                                        //    var t3 = t1 != null ? t1.Where(s => s.iscc == 0).ToList() : null;
                                        //    var t4 = t2 != null ? t2.Where(s => s.iscc == 0).ToList() : null;
                                        //    if (t3.Count() == 0 && t4.Count() == 0)
                                        //        return Return300("No record found.");
                                        //    return Return200("Success", new { t1 = t3, t2 = t4 });
                                        //}
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }

                                }
                                else if (highlightData.action.ToLower() == "inplay")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.iplay == true);
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        //keyid = string.Join(",", (dataetid.AsEnumerable().Select(p => p.gmid.ToString())));
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerCric, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        //var mdata = dataetid1.Where(k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             oid = pd.oid,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        //if (highlightData.etid == 4 && vid == "999")
                                        //{
                                        //    var t3 = t1 != null ? t1.Where(s => s.iscc != 0).ToList() : null;
                                        //    var t4 = t2 != null ? t2.Where(s => s.iscc != 0).ToList() : null;
                                        //    if (t3.Count() == 0 && t4.Count() == 0)
                                        //        return Return300("No record found.");
                                        //    return Return200("Success", new { t1 = t3, t2 = t4 });
                                        //}
                                        //if (highlightData.etid == 4 && vid == "4")
                                        //{
                                        //    var t3 = t1 != null ? t1.Where(s => s.iscc == 0).ToList() : null;
                                        //    var t4 = t2 != null ? t2.Where(s => s.iscc == 0).ToList() : null;
                                        //    if (t3.Count() == 0 && t4.Count() == 0)
                                        //        return Return300("No record found.");
                                        //    return Return200("Success", new { t1 = t3, t2 = t4 });
                                        //}
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else
                                {
                                    if (!_cacheManagerCric.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                                    {
                                        var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                                        await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                                        return Return300("No record found.");
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog.WriteLog("HighlightDatacric", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(highlightData));
                            return Return300("invalid data.");
                        }
                    }
                    if (highlightData.m == 1)
                    {
                        if (!_cacheManagerFoot.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                        {
                            var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                            await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                        }
                        var data = _cacheManagerFoot.Get<HighlightData11>("HighlightData_" + highlightData.etid, highlightData.m);
                        try
                        {
                            if (data != null)
                            {
                                if (highlightData.action.ToLower() == "all")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString());
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerFoot, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           oid = pd.oid,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             oid = pd.oid,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else if (highlightData.action.ToLower() == "today")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.stime.ToString("MM/dd/yyyy") == DateTime.Now.ToString("MM/dd/yyyy"));
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerFoot, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();
                                        //var mdata = dataetid1.Where(k => _cacheManagerFoot.IsExist(k.gmid.ToString(), k.m) && _cacheManagerFoot.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerFoot.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerFoot.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerFoot.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerFoot.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           oid = pd.oid,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             oid = pd.oid,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }

                                }
                                else if (highlightData.action.ToLower() == "inplay")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.iplay == true);
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        //keyid = string.Join(",", (dataetid.AsEnumerable().Select(p => p.gmid.ToString())));
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerFoot, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();
                                        //var mdata = dataetid1.Where(k => _cacheManagerFoot.IsExist(k.gmid.ToString(), k.m) && _cacheManagerFoot.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerFoot.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerFoot.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerFoot.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerFoot.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           oid = pd.oid,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             oid = pd.oid,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else
                                {
                                    if (!_cacheManagerFoot.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                                    {
                                        var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                                        await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                                    }
                                    return Return300("No record found.");
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog.WriteLog("HighlightDatafoot", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(highlightData));
                            return Return300("invalid data.");
                        }
                    }
                    if (highlightData.m == 2)
                    {
                        if (!_cacheManagerTenni.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                        {
                            var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                            await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                        }
                        var data = _cacheManagerTenni.Get<HighlightData11>("HighlightData_" + highlightData.etid, highlightData.m);
                        try
                        {
                            if (data != null)
                            {
                                if (highlightData.action.ToLower() == "all")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString());
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerTenni, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           oid = pd.oid,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             oid = pd.oid,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else if (highlightData.action.ToLower() == "today")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.stime.ToString("MM/dd/yyyy") == DateTime.Now.ToString("MM/dd/yyyy"));
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        //var mdata = dataetid1.Where(k => _cacheManagerTenni.IsExist(k.gmid.ToString(), k.m) && _cacheManagerTenni.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerTenni.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerTenni.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerTenni.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerTenni.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerTenni, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             oid = pd.oid,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        //return Return200("Success", t2);if (etid == "4")
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }

                                }
                                else if (highlightData.action.ToLower() == "inplay")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.iplay == true);
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        //keyid = string.Join(",", (dataetid.AsEnumerable().Select(p => p.gmid.ToString())));
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        //var mdata = dataetid1.Where(k => _cacheManagerTenni.IsExist(k.gmid.ToString(), k.m) && _cacheManagerTenni.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerTenni.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerTenni.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    oid = p.oid,
                                        //    m = p.m,
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerTenni.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerTenni.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerTenni, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             oid = pd.oid,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else
                                {
                                    if (!_cacheManagerTenni.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                                    {
                                        var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                                        await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                                    }
                                    return Return300("No record found.");
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog.WriteLog("HighlightDatatenni", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(highlightData));
                            return Return300("invalid data.");
                        }
                    }
                    if (highlightData.m == 3)
                    {
                        if (!_cacheManagerOther.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                        {
                            var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                            await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                        }
                        var data = _cacheManagerOther.Get<HighlightData11>("HighlightData_" + highlightData.etid, highlightData.m);
                        try
                        {
                            if (data != null)
                            {
                                if (highlightData.action.ToLower() == "all")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString());
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerOther, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             oid = pd.oid,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (highlightData.etid.ToString() == "10" || highlightData.etid.ToString() == "12")
                                        {
                                            var query = t1.GroupBy(r1 => new
                                            {
                                                r1.cid,
                                                r1.cname,
                                            }, (key1, group1) => new
                                            {
                                                cid = key1.cid,
                                                cname = key1.cname,
                                                children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                                {
                                                    r2.ename,
                                                }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                                {
                                                    ename = key2.ename,
                                                    children = group2.Select(y => new
                                                    {
                                                        etid = y.etid,
                                                        gmid = y.gmid,
                                                        iplay = y.iplay,
                                                        stime = y.stime,
                                                        m = y.m,
                                                        gtype = y.gtype
                                                    }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                                }).ToList(),
                                                //)
                                            }).ToList();
                                            //var query1 = t2.GroupBy(r1 => new
                                            //{
                                            //    r1.cid,
                                            //    r1.cname,
                                            //}, (key1, group1) => new
                                            //{
                                            //    cid = key1.cid,
                                            //    cname = key1.cname,
                                            //    children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                            //    {
                                            //        r2.ename,
                                            //    }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                            //    {
                                            //        ename = key2.ename,
                                            //        children = group2.Select(y => new
                                            //        {
                                            //            gmid = y.gmid,
                                            //            iplay = y.iplay,
                                            //            stime = y.stime,
                                            //        }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                            //    }).ToList(),
                                            //    //)
                                            //}).ToList();
                                            if (query.Count() == 0)
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = query });
                                        }
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else if (highlightData.action.ToLower() == "today")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.stime.ToString("MM/dd/yyyy") == DateTime.Now.ToString("MM/dd/yyyy"));
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();

                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerOther, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();
                                        //var mdata = dataetid1.Where(k => _cacheManagerOther.IsExist(k.gmid.ToString(), k.m) && _cacheManagerOther.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerOther.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerOther.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerOther.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerOther.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             pd.detail.m,
                                                                                             oid = pd.oid,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (highlightData.etid.ToString() == "10" || highlightData.etid.ToString() == "12")
                                        {
                                            var query = t1.GroupBy(r1 => new
                                            {
                                                r1.cid,
                                                r1.cname,
                                            }, (key1, group1) => new
                                            {
                                                cid = key1.cid,
                                                cname = key1.cname,
                                                children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                                {
                                                    r2.ename,
                                                }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                                {
                                                    ename = key2.ename,
                                                    children = group2.Select(y => new
                                                    {
                                                        etid = y.etid,
                                                        gmid = y.gmid,
                                                        iplay = y.iplay,
                                                        stime = y.stime,
                                                        m = y.m,
                                                        gtype = y.gtype
                                                    }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                                }).ToList(),
                                                //)
                                            }).ToList();
                                            //var query1 = t2.GroupBy(r1 => new
                                            //{
                                            //    r1.cid,
                                            //    r1.cname,
                                            //}, (key1, group1) => new
                                            //{
                                            //    cid = key1.cid,
                                            //    cname = key1.cname,
                                            //    children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                            //    {
                                            //        r2.ename,
                                            //    }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                            //    {
                                            //        ename = key2.ename,
                                            //        children = group2.Select(y => new
                                            //        {
                                            //            gmid = y.gmid,
                                            //            iplay = y.iplay,
                                            //            stime = y.stime,
                                            //        }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                            //    }).ToList(),
                                            //    //)
                                            //}).ToList();
                                            if (query.Count() == 0)
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = query });
                                        }
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }

                                }
                                else if (highlightData.action.ToLower() == "inplay")
                                {
                                    var dataetid = data.t1.Where(_ => _.etid == highlightData.etid.ToString() && _.iplay == true);
                                    if (dataetid != null && dataetid.Count() > 0)
                                    {
                                        //keyid = string.Join(",", (dataetid.AsEnumerable().Select(p => p.gmid.ToString())));
                                        var dataetid1 = dataetid.Where(o => o.mid != "0").ToList();
                                        var dataetid2 = dataetid.Where(o => o.mid == "0").ToList();
                                        Dictionary<int, Dictionary<string, string>> redis_query_dictionary_by_db = new Dictionary<int, Dictionary<string, string>>();
                                        //       database           key     value

                                        Get_redis_query_dictionary_by_db(_cacheManagerOther, dataetid1, dataetid2, redis_query_dictionary_by_db);

                                        var mdata = dataetid1.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m) && _cacheManagerCric.IsExist(k.mid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) && // k.m is a databse
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()]) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.mid.ToString()])
                                        )
                                        .Select(
                                            p => new
                                            {
                                                // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                                // gdata = _cacheManagerCric.Get<GameDataw>(p.mid.ToString(), p.m),
                                                detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                                gdata = JsonConvert.DeserializeObject<GameDataw>(redis_query_dictionary_by_db[p.m][p.mid.ToString()]),
                                                oid = p.oid
                                            }
                                        )
                                        .ToList();

                                        var mdata1 = dataetid2.Where(
                                            // k => _cacheManagerCric.IsExist(k.gmid.ToString(), k.m)
                                            k => redis_query_dictionary_by_db.ContainsKey(k.m) &&
                                                 !String.IsNullOrEmpty(redis_query_dictionary_by_db[k.m][k.gmid.ToString()])
                                        )
                                        .Select(p => new
                                        {
                                            // detail = _cacheManagerCric.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                            detail = JsonConvert.DeserializeObject<GameMasterw>(redis_query_dictionary_by_db[p.m][p.gmid.ToString()]),
                                            oid = p.oid
                                        }
                                        )
                                        .ToList();
                                        //var mdata = dataetid1.Where(k => _cacheManagerOther.IsExist(k.gmid.ToString(), k.m) && _cacheManagerOther.IsExist(k.mid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerOther.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    gdata = _cacheManagerOther.Get<GameDataw>(p.mid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();
                                        //var mdata1 = dataetid2.Where(k => _cacheManagerOther.IsExist(k.gmid.ToString(), k.m)).Select(p => new
                                        //{
                                        //    detail = _cacheManagerOther.Get<GameMasterw>(p.gmid.ToString(), p.m),
                                        //    m = p.m,
                                        //    oid = p.oid
                                        //}).ToList();

                                        var t1 = mdata != null && mdata.Count() > 0 ? (from pd in mdata.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                       join rt in mdata.Select(o => o.gdata)
                                                                                       on pd.detail.gmid equals rt.gmid
                                                                                       orderby pd.detail.gmid
                                                                                       select new
                                                                                       {
                                                                                           pd.detail.gmid,
                                                                                           pd.detail.ename,
                                                                                           pd.detail.etid,
                                                                                           pd.detail.cid,
                                                                                           pd.detail.cname,
                                                                                           pd.detail.iplay,
                                                                                           stime = pd.detail.stime.ToString(),
                                                                                           pd.detail.tv,
                                                                                           pd.detail.bm,
                                                                                           pd.detail.f,
                                                                                           pd.detail.f1,
                                                                                           pd.detail.iscc,
                                                                                           oid = pd.oid,
                                                                                           mid = rt == null ? 0 : rt.mid,
                                                                                           mname = rt == null ? "" : rt.mname,
                                                                                           status = rt == null ? "" : rt.status,
                                                                                           rc = rt == null ? 0 : rt.rc,
                                                                                           gscode = rt == null ? 0 : rt.gscode,
                                                                                           m = pd == null ? 0 : pd.detail.m,
                                                                                           gtype = rt == null ? "" : rt.gtype.ToString().ToLower(),
                                                                                           section = rt == null ? null : rt.section.Select(y => new { sid = y.sid, sno = (y.sno == 2 ? 3 : (y.sno == 3 ? 2 : y.sno)), gstatus = y.gstatus, gscode = y.gscode, nat = y.nat, odds = y.odds.Where(z => z.tno == 0) }),
                                                                                       }).DistinctBy(w => w.mid).ToList() : null;
                                        var t2 = mdata1 != null && mdata1.Count() > 0 ? (from pd in mdata1.Select(o => new { detail = o.detail.t1.FirstOrDefault(), oid = o.oid })
                                                                                         orderby pd.detail.gmid
                                                                                         select new
                                                                                         {
                                                                                             pd.detail.gmid,
                                                                                             pd.detail.ename,
                                                                                             pd.detail.etid,
                                                                                             pd.detail.cid,
                                                                                             pd.detail.cname,
                                                                                             pd.detail.iplay,
                                                                                             stime = pd.detail.stime.ToString(),
                                                                                             pd.detail.tv,
                                                                                             pd.detail.bm,
                                                                                             pd.detail.f,
                                                                                             pd.detail.f1,
                                                                                             pd.detail.iscc,
                                                                                             oid = pd.oid,
                                                                                             mid = 0,
                                                                                             mname = "MATCH_ODDS",
                                                                                             status = "SUSPENDED",
                                                                                             rc = 2,
                                                                                             gscode = 0,
                                                                                             m = pd == null ? 0 : pd.detail.m,
                                                                                             gtype = "match",
                                                                                             section = new object[]
                                                                                             {
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 1,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               },
                                                                                                       new{
                                                                                                       sid = 0,
                                                                                                       gstatus = "SUSPENDED",
                                                                                                       nat = "",
                                                                                                       sno = 3,
                                                                                                       gscode = 0,
                                                                                                       odds = new object[]
                                                                                                  {
                                                                                                       new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "BACK1",
                                                                                                       otype = "BACK",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   },
                                                                                                     new{
                                                                                                       odds = 0.0,
                                                                                                       oname = "LAY1",
                                                                                                       otype = "LAY",
                                                                                                       sid = 0,
                                                                                                       tno = 0.0,
                                                                                                       size = 0.0
                                                                                                   }
                                                                                                  }
                                                                                               }
                                                                                             }
                                                                                         }).ToList() : null;
                                        if (highlightData.etid.ToString() == "10" || highlightData.etid.ToString() == "12")
                                        {
                                            var query = t1.GroupBy(r1 => new
                                            {
                                                r1.cid,
                                                r1.cname,
                                            }, (key1, group1) => new
                                            {
                                                cid = key1.cid,
                                                cname = key1.cname,
                                                children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                                {
                                                    r2.ename,
                                                }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                                {
                                                    ename = key2.ename,
                                                    children = group2.Select(y => new
                                                    {
                                                        etid = y.etid,
                                                        gmid = y.gmid,
                                                        iplay = y.iplay,
                                                        stime = y.stime,
                                                        m = y.m,
                                                        gtype = y.gtype
                                                    }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                                }).ToList(),
                                                //)
                                            }).ToList();
                                            //var query1 = t2.GroupBy(r1 => new
                                            //{
                                            //    r1.cid,
                                            //    r1.cname,
                                            //}, (key1, group1) => new
                                            //{
                                            //    cid = key1.cid,
                                            //    cname = key1.cname,
                                            //    children = group1.Count() == 0 ? null :/*group1.Select(_ => _.cid == "" ? null :*/ group1.GroupBy(r2 => new
                                            //    {
                                            //        r2.ename,
                                            //    }, (key2, group2) => key2.ename.ToString() == "" ? null : new
                                            //    {
                                            //        ename = key2.ename,
                                            //        children = group2.Select(y => new
                                            //        {
                                            //            gmid = y.gmid,
                                            //            iplay = y.iplay,
                                            //            stime = y.stime,
                                            //        }).OrderBy(i => Convert.ToDateTime(i.stime)).ToList(),
                                            //    }).ToList(),
                                            //    //)
                                            //}).ToList();
                                            if (query.Count() == 0)
                                                return Return300("No record found.");
                                            return Return200("Success", new { t1 = query });
                                        }
                                        if (t1.Count() == 0 && t2.Count() == 0)
                                            return Return300("No record found.");
                                        return Return200("Success", new { t1 = t1, t2 = t2 });
                                    }
                                }
                                else
                                {
                                    if (!_cacheManagerOther.IsExist("HighlightData_" + highlightData.etid, highlightData.m))
                                    {
                                        var par = "etid=" + highlightData.etid.ToString() + "&action=" + highlightData.action.ToString() + "&m=" + highlightData.m;
                                        await Task.Factory.StartNew(() => HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.highlightdata, par, "application/x-www-form-urlencoded", "POST"));
                                    }
                                    return Return300("No record found.");
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLog.WriteLog("HighlightDataother", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(highlightData));
                            return Return300("invalid data.");
                        }
                    }
                }
                return Return300("No record found");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("HighlightData", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(highlightData));
                return Return400(ex.Message);
            }

        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("gamedetail")]
        public async Task<HttpResponseMessage> GameDetail(GameDetail gameDetail)
        {
            try
            {
                ErrorLog.WriteLogAll("GameDetail", JsonConvert.SerializeObject(gameDetail));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    //Boolean ren = _redisManagerTrader.IsExist("M", ConfigItems.Rediscdb);
                    //if (!ren)
                    //{
                    //    var par = "etid=" + gameDetail.etid;
                    //    var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.getm, par, "application/x-www-form-urlencoded", "POST");
                    //}
                    //if (ren)
                    //{
                    //var gdata = _redisManagerTrader.Get<GetMre>("M", ConfigItems.Rediscdb);
                    //if (gdata != null && gdata.t1 != null && gdata.t1.Count() > 0)
                    //{
                    if (gameDetail.etid == 999)
                        gameDetail.etid = 4;

                    //string objss = gdata.t1.Where(_ => _.etid == gameDetail.etid).FirstOrDefault().m.ToString();
                    //Int32 obj = 0;
                    //if (!string.IsNullOrEmpty(objss))
                    //    obj = Convert.ToInt32(objss);
                    int uid = 0;
                    uid = JwtTokenGenerator.GetUid(header);
                    uid = uid % 10;
                    uid = uid + 90;
                    if (gameDetail.etid == 4)
                    {
                        if (!await _cacheManagerCric.IsExistasync(gameDetail.gmid.ToString(), 0))
                        {
                            var par = "gmid=" + gameDetail.gmid.ToString();
                            var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.addgame, par, "application/x-www-form-urlencoded", "POST");
                        }
                        var masterdata = await _cacheManagerCric.Getasync<GameMaster>(gameDetail.gmid.ToString(), 0);
                        if (masterdata != null && masterdata.t1 != null)
                        {
                            masterdata.t1.FirstOrDefault().gtype = masterdata.t1.FirstOrDefault().gtype.ToLower();
                            if (masterdata.t1.FirstOrDefault().scard == 1)
                            {
                                var par1 = new
                                {
                                    newgameid = gameDetail.gmid.ToString()
                                };
                                //var par1 = "{\"newgameid\":\"" + gameDetail.gmid.ToString() + "\"}";
                                try
                                {
                                    var resp1 = HttpHelper.Post(ConfigItems.Urlsc + ApiEndpoint.getoldgameid, JsonConvert.SerializeObject(par1), "application/json", "POST");
                                    var obj1 = JsonConvert.DeserializeObject<Gamenewid>(resp1);
                                    masterdata.t1.FirstOrDefault().oldgmid = obj1 != null && obj1.status == 200 ? obj1.gameid : "0";
                                }
                                catch (Exception ex)
                                {
                                    ErrorLog.WriteLog("GameDetail", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(gameDetail));
                                }
                            }
                            masterdata.t1.FirstOrDefault().port = uid;
                            var data = masterdata.t1.Select(d => d);
                            return Return200("Success", data);
                        }
                    }
                    if (gameDetail.etid == 1)
                    {
                        if (!await _cacheManagerFoot.IsExistasync(gameDetail.gmid.ToString(), gameDetail.etid))
                        {
                            var par = "gmid=" + gameDetail.gmid.ToString();
                            var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.addgame, par, "application/x-www-form-urlencoded", "POST");
                        }
                        var masterdata = await _cacheManagerFoot.Getasync<GameMaster>(gameDetail.gmid.ToString(), gameDetail.etid);
                        if (masterdata != null && masterdata.t1 != null)
                        {
                            masterdata.t1.FirstOrDefault().gtype = masterdata.t1.FirstOrDefault().gtype.ToLower();
                            if (masterdata.t1.FirstOrDefault().scard == 1)
                            {
                                var par1 = new
                                {
                                    newgameid = gameDetail.gmid.ToString()
                                };
                                //var par1 = "{\"newgameid\":\"" + gameDetail.gmid.ToString() + "\"}";
                                try
                                {
                                    var resp1 = HttpHelper.Post(ConfigItems.Urlsc + ApiEndpoint.getoldgameid, JsonConvert.SerializeObject(par1), "application/json", "POST");
                                    var obj1 = JsonConvert.DeserializeObject<Gamenewid>(resp1);
                                    masterdata.t1.FirstOrDefault().oldgmid = obj1 != null && obj1.status == 200 ? obj1.gameid : "0";
                                }
                                catch (Exception ex)
                                {
                                    ErrorLog.WriteLog("GameDetail", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(gameDetail));
                                }
                            }
                            masterdata.t1.FirstOrDefault().port = uid;
                            var data = masterdata.t1.Select(d => d);
                            return Return200("Success", data);
                        }
                    }
                    if (gameDetail.etid == 2)
                    {
                        if (!await _cacheManagerTenni.IsExistasync(gameDetail.gmid.ToString(), gameDetail.etid))
                        {
                            var par = "gmid=" + gameDetail.gmid.ToString();
                            var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.addgame, par, "application/x-www-form-urlencoded", "POST");
                        }
                        var masterdata = await _cacheManagerTenni.Getasync<GameMaster>(gameDetail.gmid.ToString(), gameDetail.etid);
                        if (masterdata != null && masterdata.t1 != null)
                        {
                            masterdata.t1.FirstOrDefault().gtype = masterdata.t1.FirstOrDefault().gtype.ToLower();
                            if (masterdata.t1.FirstOrDefault().scard == 1)
                            {
                                var par1 = new
                                {
                                    newgameid = gameDetail.gmid.ToString()
                                };
                                try
                                {
                                    var resp1 = HttpHelper.Post(ConfigItems.Urlsc + ApiEndpoint.getoldgameid, JsonConvert.SerializeObject(par1), "application/json", "POST");
                                    var obj1 = JsonConvert.DeserializeObject<Gamenewid>(resp1);
                                    masterdata.t1.FirstOrDefault().oldgmid = obj1 != null && obj1.status == 200 ? obj1.gameid : "0";
                                }
                                catch (Exception ex)
                                {
                                    ErrorLog.WriteLog("GameDetail", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(gameDetail));
                                }
                                //var par1 = "{\"newgameid\":\"" + gameDetail.gmid.ToString() + "\"}";

                            }
                            masterdata.t1.FirstOrDefault().port = uid;
                            var data = masterdata.t1.Select(d => d);
                            return Return200("Success", data);
                        }
                    }
                    else
                    {
                        if (!await _cacheManagerOther.IsExistasync(gameDetail.gmid.ToString(), 3))
                        {
                            var par = "gmid=" + gameDetail.gmid.ToString();
                            var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.addgame, par, "application/x-www-form-urlencoded", "POST");
                        }
                        var masterdata = await _cacheManagerOther.Getasync<GameMaster>(gameDetail.gmid.ToString(), 0);
                        if (masterdata != null && masterdata.t1 != null)
                        {
                            masterdata.t1.FirstOrDefault().gtype = masterdata.t1.FirstOrDefault().gtype.ToLower();
                            if (masterdata.t1.FirstOrDefault().scard == 1)
                            {
                                var par1 = new
                                {
                                    newgameid = gameDetail.gmid.ToString()
                                };
                                //var par1 = "{\"newgameid\":\"" + gameDetail.gmid.ToString() + "\"}";
                                try
                                {
                                    var resp1 = HttpHelper.Post(ConfigItems.Urlsc + ApiEndpoint.getoldgameid, JsonConvert.SerializeObject(par1), "application/json", "POST");
                                    var obj1 = JsonConvert.DeserializeObject<Gamenewid>(resp1);
                                    masterdata.t1.FirstOrDefault().oldgmid = obj1 != null && obj1.status == 200 ? obj1.gameid : "0";
                                }
                                catch (Exception ex)
                                {
                                    ErrorLog.WriteLog("GameDetail", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(gameDetail));
                                }
                            }

                            masterdata.t1.FirstOrDefault().port = uid;
                            var data = masterdata.t1.Select(d => d);
                            return Return200("Success", data);
                        }
                    }
                }
                return Return300("No record found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GameDetail", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(gameDetail));
                return Return400(ex.Message);
            }
        }
        //[HttpPost]
        //[UserAuth, KeyFilter]
        //[Route("gamedata")]
        //public async Task<HttpResponseMessage> GameData(GameData gameData)
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("GameData", JsonConvert.SerializeObject(gameData));
        //        string u_id = string.Empty;
        //        var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
        //        if (header != null)
        //        {
        //            u_id = JwtTokenGenerator.GetSaGuid(header);
        //        }

        //        Guid uu_id;
        //        bool res = Guid.TryParse(u_id, out uu_id);

        //        if (!res)
        //            return Return300("token not valid.");
        //        bool uredis = JwtTokenGenerator.Geturedis(header);
        //        if (uredis)
        //        {
        //            StackExchange.Redis.IDatabaseAsync db = null; // TODO implement a method to get IDatabase
        //            IEnumerable<string> keys = null;
        //            string key = null;
        //            if (gameData.m == 0)
        //            {
        //                db = _cacheManagerCric.getDb(gameData.m);
        //                key = "Set_" + gameData.gmid.ToString();
        //                var members = await db.SetMembersAsync(key);
        //                if (members != null)
        //                    keys = members.Select(x => x.ToString());
        //                else
        //                    return Return300("No record found.");
        //                //keys = _cacheManagerCric.GetAllkeys(gameData.gmid.ToString(), gameData.m);
        //            }
        //            else if (gameData.m == 1)
        //            {
        //                db = _cacheManagerFoot.getDb(gameData.m);
        //                key = "Set_" + gameData.gmid.ToString();
        //                var members = await db.SetMembersAsync(key);
        //                if (members != null)
        //                    keys = members.Select(x => x.ToString());
        //                else
        //                    return Return300("No record found.");
        //                //db = _cacheManagerFoot.getDb();
        //                //keys = _cacheManagerFoot.GetAllkeys(gameData.gmid.ToString(), gameData.m);
        //            }
        //            else if (gameData.m == 2)
        //            {
        //                db = _cacheManagerTenni.getDb(gameData.m);
        //                key = "Set_" + gameData.gmid.ToString();
        //                var members = await db.SetMembersAsync(key);
        //                if (members != null)
        //                    keys = members.Select(x => x.ToString());
        //                else
        //                    return Return300("No record found.");
        //                //db = _cacheManagerTenni.getDb();
        //                //keys = _cacheManagerTenni.GetAllkeys(gameData.gmid.ToString(), gameData.m);
        //            }
        //            else if (gameData.m == 3)
        //            {
        //                db = _cacheManagerOther.getDb(gameData.m);
        //                key = "Set_" + gameData.gmid.ToString();
        //                var members = await db.SetMembersAsync(key);
        //                if (members != null)
        //                    keys = members.Select(x => x.ToString());
        //                else
        //                    return Return300("No record found.");
        //                //db = _cacheManagerOther.getDb();
        //                //keys = _cacheManagerOther.GetAllkeys(gameData.gmid.ToString(), gameData.m);
        //            }

        //            string masterdata_str = await db.StringGetAsync(gameData.gmid.ToString());
        //            var masterdata = masterdata_str != null ? JsonConvert.DeserializeObject<GameMaster>(masterdata_str) : null;


        //            IList<GameDataw> gdata = new List<GameDataw>();

        //            RedisKey[] redis_keys = keys.Select(_key => (RedisKey)_key).ToArray();
        //            RedisValue[] redis_values = new RedisValue[redis_keys.Count()];

        //            await GetValuesFunctionAsync(db, redis_keys, redis_values);
        //            if (redis_values != null)
        //            {
        //                for (var i = 0; i < redis_values.Count(); i++)
        //                {
        //                    string _key = redis_keys[i];
        //                    string _data = redis_values[i];
        //                    if (_data == null)
        //                    {
        //                        return Return300("No record found.");
        //                        //Console.WriteLine("ERROR: gamedetail - null value in redis array");
        //                        //continue;
        //                    }
        //                    //if (_key == gameData.gmid.ToString())
        //                    //{
        //                    //    masterdata = JsonConvert.DeserializeObject<GameMaster>(_data);
        //                    //}
        //                    gdata.Add(JsonConvert.DeserializeObject<GameDataw>(_data));
        //                }
        //            }


        //            /*string datasq = await db.StringGetAsync(gameData.gmid.ToString());
        //            if (datasq != null)
        //                masterdata = JsonConvert.DeserializeObject<GameMaster>(datasq);
        //            //if (keys.Any)
        //            //{
        //            foreach (var key1 in keys)
        //            {
        //                string ddd = await db.StringGetAsync(key1.ToString());
        //                if (ddd != null)
        //                    gdata.Add(JsonConvert.DeserializeObject<GameDataw>(ddd)); // THIS IS MAIN BOTTLENCK
        //            }
        //            //}*/

        //            if (gameData.m == 0)
        //            {
        //                // var masterdata = await _cacheManagerCric.Getasync<GameMaster>(gameData.gmid.ToString(), gameData.m);
        //                // var gdata = await _cacheManagerCric.GetAllkeysData<GameDataw>(gameData.gmid.ToString(), gameData.m);
        //                if (gdata != null && gdata.Count() > 0)
        //                {
        //                    if (masterdata.t1.FirstOrDefault().iplay == true)
        //                    {
        //                        var data = gdata.Where(p => p.company.Any(
        //                            i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true
        //                            ).Select(l => new
        //                            {
        //                                mid = l.mid,
        //                                mname = l.mname,
        //                                status = l.status,
        //                                rc = l.rc,
        //                                sno = l.sno,
        //                                ocnt = l.ocnt,
        //                                gscode = l.gscode,
        //                                dtype = l.dtype,
        //                                gtype = l.gtype.ToString().ToLower(),
        //                                maxb = l.maxb,
        //                                max = l.max,
        //                                min = l.min,
        //                                rem = l.rem,
        //                                umaxbof = l.umaxbof,
        //                                l.biplay,
        //                                l.boplay,
        //                                iplay = masterdata.t1.FirstOrDefault().iplay,
        //                                section = l.section.Select(y => new
        //                                {
        //                                    sid = y.sid,
        //                                    sno = y.sno,
        //                                    gstatus = y.gstatus,
        //                                    nat = y.nat,
        //                                    psrno = y.psrno,
        //                                    gscode = y.gscode,
        //                                    y.max,
        //                                    y.min,
        //                                    y.rem,
        //                                    odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
        //                                    {
        //                                        i.odds,
        //                                        i.otype,
        //                                        i.oname,
        //                                        i.tno,
        //                                        size = i.odds == 0 ? 0 : i.size
        //                                    }).OrderByDescending(z => z.tno).Union(
        //                                        y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
        //                                        {
        //                                            i1.odds,
        //                                            i1.otype,
        //                                            i1.oname,
        //                                            i1.tno,
        //                                            size = i1.odds == 0 ? 0 : i1.size
        //                                        }).OrderBy(z => z.tno)))
        //                                }).OrderBy(h => h.sno).ThenBy(a => a.sid)
        //                            }).OrderBy(x => x.sno).ToList();
        //                        //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //                        //ErrorLog.WriteLog("GameData1" + s);
        //                        return Return200("Success", data);
        //                    }
        //                    if (masterdata.t1.FirstOrDefault().iplay == false)
        //                    {
        //                        var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true
        //                        && Convert.ToBoolean(p.boplay) == true).Select(l =>
        //                        new
        //                        {
        //                            mid = l.mid,
        //                            mname = l.mname,
        //                            status = l.status,
        //                            rc = l.rc,
        //                            sno = l.sno,
        //                            ocnt = l.ocnt,
        //                            gscode = l.gscode,
        //                            dtype = l.dtype,
        //                            gtype = l.gtype.ToString().ToLower(),
        //                            maxb = l.maxb,
        //                            max = l.max,
        //                            min = l.min,
        //                            rem = l.rem,
        //                            umaxbof = l.umaxbof,
        //                            l.biplay,
        //                            l.boplay,
        //                            iplay = masterdata.t1.FirstOrDefault().iplay,
        //                            section = l.section.Select(y =>
        //                            new
        //                            {
        //                                sid = y.sid,
        //                                sno = y.sno,
        //                                gstatus = y.gstatus,
        //                                nat = y.nat,
        //                                psrno = y.psrno,
        //                                gscode = y.gscode,
        //                                y.max,
        //                                y.min,
        //                                y.rem,
        //                                odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
        //                                new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
        //                                new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
        //                            }).OrderBy(h => h.sno).ThenBy(a => a.sid)
        //                        }).OrderBy(x => x.sno).ToList();
        //                        //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //                        //ErrorLog.WriteLog("GameData11" + s);
        //                        return Return200("Success", data);
        //                    }

        //                }
        //            }
        //            if (gameData.m == 1)
        //            {
        //                //var masterdata = await _cacheManagerFoot.Getasync<GameMaster>(gameData.gmid.ToString(), gameData.m);
        //                //var gdata = await _cacheManagerFoot.GetAllkeysData<GameDataw>(gameData.gmid.ToString(), gameData.m);
        //                if (gdata != null && gdata.Count() > 0)
        //                {
        //                    if (masterdata.t1.FirstOrDefault().iplay == true)
        //                    {
        //                        var data = gdata.Where(p => p.company.Any(
        //                            i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true
        //                            ).Select(l => new
        //                            {
        //                                mid = l.mid,
        //                                mname = l.mname,
        //                                status = l.status,
        //                                rc = l.rc,
        //                                sno = l.sno,
        //                                ocnt = l.ocnt,
        //                                gscode = l.gscode,
        //                                dtype = l.dtype,
        //                                gtype = l.gtype.ToString().ToLower(),
        //                                maxb = l.maxb,
        //                                max = l.max,
        //                                min = l.min,
        //                                rem = l.rem,
        //                                umaxbof = l.umaxbof,
        //                                l.biplay,
        //                                l.boplay,
        //                                iplay = masterdata.t1.FirstOrDefault().iplay,
        //                                section = l.section.Select(y => new
        //                                {
        //                                    sid = y.sid,
        //                                    sno = y.sno,
        //                                    gstatus = y.gstatus,
        //                                    nat = y.nat,
        //                                    psrno = y.psrno,
        //                                    gscode = y.gscode,
        //                                    y.max,
        //                                    y.min,
        //                                    y.rem,
        //                                    odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
        //                                    {
        //                                        i.odds,
        //                                        i.otype,
        //                                        i.oname,
        //                                        i.tno,
        //                                        size = i.odds == 0 ? 0 : i.size
        //                                    }).OrderByDescending(z => z.tno).Union(
        //                                        y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
        //                                        {
        //                                            i1.odds,
        //                                            i1.otype,
        //                                            i1.oname,
        //                                            i1.tno,
        //                                            size = i1.odds == 0 ? 0 : i1.size
        //                                        }).OrderBy(z => z.tno)))
        //                                }).OrderBy(h => h.sno).ThenBy(a => a.sid)
        //                            }).OrderBy(x => x.sno).ToList();
        //                        //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //                        //ErrorLog.WriteLog("GameData1" + s);
        //                        return Return200("Success", data);
        //                    }
        //                    if (masterdata.t1.FirstOrDefault().iplay == false)
        //                    {
        //                        var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true
        //                        && Convert.ToBoolean(p.boplay) == true).Select(l =>
        //                        new
        //                        {
        //                            mid = l.mid,
        //                            mname = l.mname,
        //                            status = l.status,
        //                            rc = l.rc,
        //                            sno = l.sno,
        //                            ocnt = l.ocnt,
        //                            gscode = l.gscode,
        //                            dtype = l.dtype,
        //                            gtype = l.gtype.ToString().ToLower(),
        //                            maxb = l.maxb,
        //                            max = l.max,
        //                            min = l.min,
        //                            rem = l.rem,
        //                            umaxbof = l.umaxbof,
        //                            l.biplay,
        //                            l.boplay,
        //                            iplay = masterdata.t1.FirstOrDefault().iplay,
        //                            section = l.section.Select(y =>
        //                            new
        //                            {
        //                                sid = y.sid,
        //                                sno = y.sno,
        //                                gstatus = y.gstatus,
        //                                nat = y.nat,
        //                                psrno = y.psrno,
        //                                gscode = y.gscode,
        //                                y.max,
        //                                y.min,
        //                                y.rem,
        //                                odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
        //                                new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
        //                                new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
        //                            }).OrderBy(h => h.sno).ThenBy(a => a.sid)
        //                        }).OrderBy(x => x.sno).ToList();
        //                        //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //                        //ErrorLog.WriteLog("GameData11" + s);
        //                        return Return200("Success", data);
        //                    }

        //                }
        //            }
        //            if (gameData.m == 2)
        //            {
        //                //var masterdata = await _cacheManagerTenni.Getasync<GameMaster>(gameData.gmid.ToString(), gameData.m);
        //                //var gdata = await _cacheManagerTenni.GetAllkeysData<GameDataw>(gameData.gmid.ToString(), gameData.m);
        //                if (gdata != null && gdata.Count() > 0)
        //                {
        //                    if (masterdata.t1.FirstOrDefault().iplay == true)
        //                    {
        //                        var data = gdata.Where(p => p.company.Any(
        //                            i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true
        //                            ).Select(l => new
        //                            {
        //                                mid = l.mid,
        //                                mname = l.mname,
        //                                status = l.status,
        //                                rc = l.rc,
        //                                sno = l.sno,
        //                                ocnt = l.ocnt,
        //                                gscode = l.gscode,
        //                                dtype = l.dtype,
        //                                gtype = l.gtype.ToString().ToLower(),
        //                                maxb = l.maxb,
        //                                max = l.max,
        //                                min = l.min,
        //                                rem = l.rem,
        //                                umaxbof = l.umaxbof,
        //                                l.biplay,
        //                                l.boplay,
        //                                iplay = masterdata.t1.FirstOrDefault().iplay,
        //                                section = l.section.Select(y => new
        //                                {
        //                                    sid = y.sid,
        //                                    sno = y.sno,
        //                                    gstatus = y.gstatus,
        //                                    nat = y.nat,
        //                                    psrno = y.psrno,
        //                                    gscode = y.gscode,
        //                                    y.max,
        //                                    y.min,
        //                                    y.rem,
        //                                    odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
        //                                    {
        //                                        i.odds,
        //                                        i.otype,
        //                                        i.oname,
        //                                        i.tno,
        //                                        size = i.odds == 0 ? 0 : i.size
        //                                    }).OrderByDescending(z => z.tno).Union(
        //                                        y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
        //                                        {
        //                                            i1.odds,
        //                                            i1.otype,
        //                                            i1.oname,
        //                                            i1.tno,
        //                                            size = i1.odds == 0 ? 0 : i1.size
        //                                        }).OrderBy(z => z.tno)))
        //                                }).OrderBy(h => h.sno).ThenBy(a => a.sid)
        //                            }).OrderBy(x => x.sno).ToList();
        //                        //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //                        //ErrorLog.WriteLog("GameData1" + s);
        //                        return Return200("Success", data);
        //                    }
        //                    if (masterdata.t1.FirstOrDefault().iplay == false)
        //                    {
        //                        var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true
        //                        && Convert.ToBoolean(p.boplay) == true).Select(l =>
        //                        new
        //                        {
        //                            mid = l.mid,
        //                            mname = l.mname,
        //                            status = l.status,
        //                            rc = l.rc,
        //                            sno = l.sno,
        //                            ocnt = l.ocnt,
        //                            gscode = l.gscode,
        //                            dtype = l.dtype,
        //                            gtype = l.gtype.ToString().ToLower(),
        //                            maxb = l.maxb,
        //                            max = l.max,
        //                            min = l.min,
        //                            rem = l.rem,
        //                            umaxbof = l.umaxbof,
        //                            l.biplay,
        //                            l.boplay,
        //                            iplay = masterdata.t1.FirstOrDefault().iplay,
        //                            section = l.section.Select(y =>
        //                            new
        //                            {
        //                                sid = y.sid,
        //                                sno = y.sno,
        //                                gstatus = y.gstatus,
        //                                nat = y.nat,
        //                                psrno = y.psrno,
        //                                gscode = y.gscode,
        //                                y.max,
        //                                y.min,
        //                                y.rem,
        //                                odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
        //                                new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
        //                                new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
        //                            }).OrderBy(h => h.sno).ThenBy(a => a.sid)
        //                        }).OrderBy(x => x.sno).ToList();
        //                        //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //                        //ErrorLog.WriteLog("GameData11" + s);
        //                        return Return200("Success", data);
        //                    }

        //                }
        //            }
        //            if (gameData.m == 3)
        //            {
        //                //var masterdata = await _cacheManagerOther.Getasync<GameMaster>(gameData.gmid.ToString(), gameData.m);
        //                //var gdata = await _cacheManagerOther.GetAllkeysData<GameDataw>(gameData.gmid.ToString(), gameData.m);
        //                if (gdata != null && gdata.Count() > 0)
        //                {
        //                    if (masterdata.t1.FirstOrDefault().iplay == true)
        //                    {
        //                        var data = gdata.Where(p => p.company.Any(
        //                            i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true
        //                            ).Select(l => new
        //                            {
        //                                mid = l.mid,
        //                                mname = l.mname,
        //                                status = l.status,
        //                                rc = l.rc,
        //                                sno = l.sno,
        //                                ocnt = l.ocnt,
        //                                gscode = l.gscode,
        //                                dtype = l.dtype,
        //                                gtype = l.gtype.ToString().ToLower(),
        //                                maxb = l.maxb,
        //                                max = l.max,
        //                                min = l.min,
        //                                rem = l.rem,
        //                                umaxbof = l.umaxbof,
        //                                l.biplay,
        //                                l.boplay,
        //                                iplay = masterdata.t1.FirstOrDefault().iplay,
        //                                section = l.section.Select(y => new
        //                                {
        //                                    sid = y.sid,
        //                                    sno = y.sno,
        //                                    gstatus = y.gstatus,
        //                                    nat = y.nat,
        //                                    psrno = y.psrno,
        //                                    gscode = y.gscode,
        //                                    y.max,
        //                                    y.min,
        //                                    y.rem,
        //                                    odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
        //                                    {
        //                                        i.odds,
        //                                        i.otype,
        //                                        i.oname,
        //                                        i.tno,
        //                                        size = i.odds == 0 ? 0 : i.size
        //                                    }).OrderByDescending(z => z.tno).Union(
        //                                        y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
        //                                        {
        //                                            i1.odds,
        //                                            i1.otype,
        //                                            i1.oname,
        //                                            i1.tno,
        //                                            size = i1.odds == 0 ? 0 : i1.size
        //                                        }).OrderBy(z => z.tno)))
        //                                }).OrderBy(h => h.sno).ThenBy(a => a.sid)
        //                            }).OrderBy(x => x.sno).ToList();
        //                        //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //                        //ErrorLog.WriteLog("GameData1" + s);
        //                        return Return200("Success", data);
        //                    }
        //                    if (masterdata.t1.FirstOrDefault().iplay == false)
        //                    {
        //                        var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true
        //                        && Convert.ToBoolean(p.boplay) == true).Select(l =>
        //                        new
        //                        {
        //                            mid = l.mid,
        //                            mname = l.mname,
        //                            status = l.status,
        //                            rc = l.rc,
        //                            sno = l.sno,
        //                            ocnt = l.ocnt,
        //                            gscode = l.gscode,
        //                            dtype = l.dtype,
        //                            gtype = l.gtype.ToString().ToLower(),
        //                            maxb = l.maxb,
        //                            max = l.max,
        //                            min = l.min,
        //                            rem = l.rem,
        //                            umaxbof = l.umaxbof,
        //                            l.biplay,
        //                            l.boplay,
        //                            iplay = masterdata.t1.FirstOrDefault().iplay,
        //                            section = l.section.Select(y =>
        //                            new
        //                            {
        //                                sid = y.sid,
        //                                sno = y.sno,
        //                                gstatus = y.gstatus,
        //                                nat = y.nat,
        //                                psrno = y.psrno,
        //                                gscode = y.gscode,
        //                                y.max,
        //                                y.min,
        //                                y.rem,
        //                                odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
        //                                new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
        //                                new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
        //                            }).OrderBy(h => h.sno).ThenBy(a => a.sid)
        //                        }).OrderBy(x => x.sno).ToList();
        //                        //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //                        //ErrorLog.WriteLog("GameData11" + s);
        //                        return Return200("Success", data);
        //                    }

        //                }
        //            }
        //            return Return300("No record found.");
        //        }
        //        else
        //        {
        //            return Return100("");
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //        ErrorLog.WriteLog("GameData", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(gameData));
        //        return Return400(ex.Message);
        //    }
        //}
        //[HttpPost]
        //[UserAuth, KeyFilter]
        [Route("gamedata")]
        public async Task<HttpResponseMessage> GameData(GameData gameData)
        {
            try
            {
                ErrorLog.WriteLogAll("GameData", JsonConvert.SerializeObject(gameData));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    if (gameData.m == 0)
                    {
                        //               /* await _addEventLock.WaitAsync();*/
                        //                if (!await _cacheManagerCric.IsExistasync(gameData.gmid.ToString(), gameData.m))
                        //                {
                        //                    return Return200("Success", "");
                        //                }
                        //                 _addEventLock.Release();
                        var masterdata = await _cacheManagerCric.Getasync<GameMaster>(gameData.gmid.ToString(), gameData.m);
                        var gdata = await _cacheManagerCric.GetAllkeysData<GameDataw>(gameData.gmid.ToString(), gameData.m);
                        if (gdata != null && gdata.Count() > 0)
                        {
                            if (masterdata.t1.FirstOrDefault().iplay == true)
                            {
                                var data = gdata.Where(p => p.company.Any(
                                    i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true && p.status.ToLower() != "closed"
                                    ).Select(l => new
                                    {
                                        mid = l.mid,
                                        mname = l.mname,
                                        status = l.status,
                                        rc = l.rc,
                                        sno = l.sno,
                                        ocnt = l.ocnt,
                                        gscode = l.gscode,
                                        dtype = l.dtype,
                                        gtype = l.gtype.ToString().ToLower(),
                                        maxb = l.maxb,
                                        max = l.max,
                                        min = l.min,
                                        rem = l.rem,
                                        umaxbof = l.umaxbof,
                                        l.biplay,
                                        l.boplay,
                                        iplay = masterdata.t1.FirstOrDefault().iplay,
                                        section = l.section.Select(y => new
                                        {
                                            sid = y.sid,
                                            sno = y.sno,
                                            gstatus = y.gstatus,
                                            nat = y.nat,
                                            psrno = y.psrno,
                                            gscode = y.gscode,
                                            y.max,
                                            y.min,
                                            y.rem,
                                            odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
                                            {
                                                i.odds,
                                                i.otype,
                                                i.oname,
                                                i.tno,
                                                size = i.odds == 0 ? 0 : i.size
                                            }).OrderByDescending(z => z.tno).Union(
                                                y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
                                                {
                                                    i1.odds,
                                                    i1.otype,
                                                    i1.oname,
                                                    i1.tno,
                                                    size = i1.odds == 0 ? 0 : i1.size
                                                }).OrderBy(z => z.tno)))
                                        }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                                    }).OrderBy(x => x.sno).ToList();
                                //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                                //ErrorLog.WriteLog("GameData1" + s);
                                if (data != null && data.Count() > 0)
                                    return Return200("Success", data);
                                return Return300("No record found.");
                            }
                            if (masterdata.t1.FirstOrDefault().iplay == false)
                            {
                                var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && p.status.ToLower() != "closed"
                                && Convert.ToBoolean(p.boplay) == true).Select(l =>
                                new
                                {
                                    mid = l.mid,
                                    mname = l.mname,
                                    status = l.status,
                                    rc = l.rc,
                                    sno = l.sno,
                                    ocnt = l.ocnt,
                                    gscode = l.gscode,
                                    dtype = l.dtype,
                                    gtype = l.gtype.ToString().ToLower(),
                                    maxb = l.maxb,
                                    max = l.max,
                                    min = l.min,
                                    rem = l.rem,
                                    umaxbof = l.umaxbof,
                                    l.biplay,
                                    l.boplay,
                                    iplay = masterdata.t1.FirstOrDefault().iplay,
                                    section = l.section.Select(y =>
                                    new
                                    {
                                        sid = y.sid,
                                        sno = y.sno,
                                        gstatus = y.gstatus,
                                        nat = y.nat,
                                        psrno = y.psrno,
                                        gscode = y.gscode,
                                        y.max,
                                        y.min,
                                        y.rem,
                                        odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
                                        new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
                                        new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
                                    }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                                }).OrderBy(x => x.sno).ToList();
                                //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                                //ErrorLog.WriteLog("GameData11" + s);
                                if (data != null && data.Count() > 0)
                                    return Return200("Success", data);
                                return Return300("No record found.");
                            }
                        }
                    }
                    if (gameData.m == 1)
                    {
                        var masterdata = await _cacheManagerFoot.Getasync<GameMaster>(gameData.gmid.ToString(), gameData.m);
                        var gdata = await _cacheManagerFoot.GetAllkeysData<GameDataw>(gameData.gmid.ToString(), gameData.m);
                        if (gdata != null && gdata.Count() > 0)
                        {
                            if (masterdata.t1.FirstOrDefault().iplay == true)
                            {
                                var data = gdata.Where(p => p.company.Any(
                                    i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true && p.status.ToLower() != "closed"
                                    ).Select(l => new
                                    {
                                        mid = l.mid,
                                        mname = l.mname,
                                        status = l.status,
                                        rc = l.rc,
                                        sno = l.sno,
                                        ocnt = l.ocnt,
                                        gscode = l.gscode,
                                        dtype = l.dtype,
                                        gtype = l.gtype.ToString().ToLower(),
                                        maxb = l.maxb,
                                        max = l.max,
                                        min = l.min,
                                        rem = l.rem,
                                        umaxbof = l.umaxbof,
                                        l.biplay,
                                        l.boplay,
                                        iplay = masterdata.t1.FirstOrDefault().iplay,
                                        section = l.section.Select(y => new
                                        {
                                            sid = y.sid,
                                            sno = y.sno,
                                            gstatus = y.gstatus,
                                            nat = y.nat,
                                            psrno = y.psrno,
                                            gscode = y.gscode,
                                            y.max,
                                            y.min,
                                            y.rem,
                                            odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
                                            {
                                                i.odds,
                                                i.otype,
                                                i.oname,
                                                i.tno,
                                                size = i.odds == 0 ? 0 : i.size
                                            }).OrderByDescending(z => z.tno).Union(
                                                y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
                                                {
                                                    i1.odds,
                                                    i1.otype,
                                                    i1.oname,
                                                    i1.tno,
                                                    size = i1.odds == 0 ? 0 : i1.size
                                                }).OrderBy(z => z.tno)))
                                        }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                                    }).OrderBy(x => x.sno).ToList();
                                //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                                //ErrorLog.WriteLog("GameData1" + s);
                                if (data != null && data.Count() > 0)
                                    return Return200("Success", data);
                                return Return300("No record found1.");
                            }
                            if (masterdata.t1.FirstOrDefault().iplay == false)
                            {
                                var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true
                                && Convert.ToBoolean(p.boplay) == true && p.status.ToLower()!="closed").Select(l =>
                                new
                                {
                                    mid = l.mid,
                                    mname = l.mname,
                                    status = l.status,
                                    rc = l.rc,
                                    sno = l.sno,
                                    ocnt = l.ocnt,
                                    gscode = l.gscode,
                                    dtype = l.dtype,
                                    gtype = l.gtype.ToString().ToLower(),
                                    maxb = l.maxb,
                                    max = l.max,
                                    min = l.min,
                                    rem = l.rem,
                                    umaxbof = l.umaxbof,
                                    l.biplay,
                                    l.boplay,
                                    iplay = masterdata.t1.FirstOrDefault().iplay,
                                    section = l.section.Select(y =>
                                    new
                                    {
                                        sid = y.sid,
                                        sno = y.sno,
                                        gstatus = y.gstatus,
                                        nat = y.nat,
                                        psrno = y.psrno,
                                        gscode = y.gscode,
                                        y.max,
                                        y.min,
                                        y.rem,
                                        odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
                                        new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
                                        new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
                                    }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                                }).OrderBy(x => x.sno).ToList();
                                //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                                //ErrorLog.WriteLog("GameData11" + s);
                                if (data != null && data.Count() > 0)
                                    return Return200("Success", data);
                                return Return300("No record found1.");
                            }

                        }
                    }
                    if (gameData.m == 2)
                    {
                        var masterdata = await _cacheManagerTenni.Getasync<GameMaster>(gameData.gmid.ToString(), gameData.m);
                        var gdata = await _cacheManagerTenni.GetAllkeysData<GameDataw>(gameData.gmid.ToString(), gameData.m);
                        if (gdata != null && gdata.Count() > 0)
                        {
                            if (masterdata.t1.FirstOrDefault().iplay == true)
                            {
                                var data = gdata.Where(p => p.company.Any(
                                    i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true && p.status.ToLower() != "closed"
                                    ).Select(l => new
                                    {
                                        mid = l.mid,
                                        mname = l.mname,
                                        status = l.status,
                                        rc = l.rc,
                                        sno = l.sno,
                                        ocnt = l.ocnt,
                                        gscode = l.gscode,
                                        dtype = l.dtype,
                                        gtype = l.gtype.ToString().ToLower(),
                                        maxb = l.maxb,
                                        max = l.max,
                                        min = l.min,
                                        rem = l.rem,
                                        umaxbof = l.umaxbof,
                                        l.biplay,
                                        l.boplay,
                                        iplay = masterdata.t1.FirstOrDefault().iplay,
                                        section = l.section.Select(y => new
                                        {
                                            sid = y.sid,
                                            sno = y.sno,
                                            gstatus = y.gstatus,
                                            nat = y.nat,
                                            psrno = y.psrno,
                                            gscode = y.gscode,
                                            y.max,
                                            y.min,
                                            y.rem,
                                            odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
                                            {
                                                i.odds,
                                                i.otype,
                                                i.oname,
                                                i.tno,
                                                size = i.odds == 0 ? 0 : i.size
                                            }).OrderByDescending(z => z.tno).Union(
                                                y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
                                                {
                                                    i1.odds,
                                                    i1.otype,
                                                    i1.oname,
                                                    i1.tno,
                                                    size = i1.odds == 0 ? 0 : i1.size
                                                }).OrderBy(z => z.tno)))
                                        }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                                    }).OrderBy(x => x.sno).ToList();
                                //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                                //ErrorLog.WriteLog("GameData1" + s);
                                if (data != null && data.Count() > 0)
                                    return Return200("Success", data);
                                return Return300("No record found.");
                            }
                            if (masterdata.t1.FirstOrDefault().iplay == false)
                            {
                                var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && p.status.ToLower() != "closed"
                                && Convert.ToBoolean(p.boplay) == true).Select(l =>
                                new
                                {
                                    mid = l.mid,
                                    mname = l.mname,
                                    status = l.status,
                                    rc = l.rc,
                                    sno = l.sno,
                                    ocnt = l.ocnt,
                                    gscode = l.gscode,
                                    dtype = l.dtype,
                                    gtype = l.gtype.ToString().ToLower(),
                                    maxb = l.maxb,
                                    max = l.max,
                                    min = l.min,
                                    rem = l.rem,
                                    umaxbof = l.umaxbof,
                                    l.biplay,
                                    l.boplay,
                                    iplay = masterdata.t1.FirstOrDefault().iplay,
                                    section = l.section.Select(y =>
                                    new
                                    {
                                        sid = y.sid,
                                        sno = y.sno,
                                        gstatus = y.gstatus,
                                        nat = y.nat,
                                        psrno = y.psrno,
                                        gscode = y.gscode,
                                        y.max,
                                        y.min,
                                        y.rem,
                                        odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
                                        new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
                                        new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
                                    }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                                }).OrderBy(x => x.sno).ToList();
                                //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                                //ErrorLog.WriteLog("GameData11" + s);
                                if (data != null && data.Count() > 0)
                                    return Return200("Success", data);
                                return Return300("No record found.");
                            }

                        }
                    }
                    if (gameData.m == 3)
                    {
                        var masterdata = await _cacheManagerOther.Getasync<GameMaster>(gameData.gmid.ToString(), gameData.m);
                        var gdata = await _cacheManagerOther.GetAllkeysData<GameDataw>(gameData.gmid.ToString(), gameData.m);
                        if (gdata != null && gdata.Count() > 0)
                        {
                            if (masterdata.t1.FirstOrDefault().etid == 10)
                            {
                                if (masterdata.t1.FirstOrDefault().iplay == true)
                                {
                                    var data = gdata.Where(p => p.company.Any(
                                        i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true && p.status.ToLower() != "closed"
                                        ).Select(l => new
                                        {
                                            mid = l.mid,
                                            mname = l.mname,
                                            status = l.status,
                                            rc = l.rc,
                                            sno = l.sno,
                                            ocnt = l.ocnt,
                                            gscode = l.gscode,
                                            dtype = l.dtype,
                                            gtype = l.gtype.ToString().ToLower(),
                                            maxb = l.maxb,
                                            max = l.max,
                                            min = l.min,
                                            rem = l.rem,
                                            umaxbof = l.umaxbof,
                                            l.biplay,
                                            l.boplay,
                                            l.btcnt,
                                            iplay = masterdata.t1.FirstOrDefault().iplay,
                                            section = l.section.Select(y => new
                                            {
                                                sid = y.sid,
                                                sno = y.sno,
                                                gstatus = y.gstatus,
                                                nat = y.nat,
                                                psrno = y.psrno,
                                                gscode = y.gscode,
                                                y.max,
                                                y.min,
                                                y.rem,
                                                y.rname,
                                                y.jname,
                                                y.tname,
                                                y.hage,
                                                y.himg,
                                                y.adfa,
                                                y.rdt,
                                                odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
                                                {
                                                    i.odds,
                                                    i.otype,
                                                    i.oname,
                                                    i.tno,
                                                    size = i.odds == 0 ? 0 : i.size
                                                }).OrderByDescending(z => z.tno).Union(
                                                    y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
                                                    {
                                                        i1.odds,
                                                        i1.otype,
                                                        i1.oname,
                                                        i1.tno,
                                                        size = i1.odds == 0 ? 0 : i1.size
                                                    }).OrderBy(o => o.tno)))
                                            }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                                        }).OrderBy(x => x.sno).ToList();
                                    //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                                    //ErrorLog.WriteLog("GameData1" + s);
                                    if (data != null && data.Count() > 0)
                                        return Return200("Success", data);
                                    return Return300("No record found.");
                                }
                                if (masterdata.t1.FirstOrDefault().iplay == false)
                                {
                                    var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true
                                    && Convert.ToBoolean(p.boplay) == true && p.status.ToLower() != "closed").Select(l =>
                                    new
                                    {
                                        mid = l.mid,
                                        mname = l.mname,
                                        status = l.status,
                                        rc = l.rc,
                                        sno = l.sno,
                                        ocnt = l.ocnt,
                                        gscode = l.gscode,
                                        dtype = l.dtype,
                                        gtype = l.gtype.ToString().ToLower(),
                                        maxb = l.maxb,
                                        max = l.max,
                                        min = l.min,
                                        rem = l.rem,
                                        umaxbof = l.umaxbof,
                                        l.biplay,
                                        l.boplay,
                                        l.btcnt,
                                        iplay = masterdata.t1.FirstOrDefault().iplay,
                                        section = l.section.Select(y =>
                                        new
                                        {
                                            sid = y.sid,
                                            sno = y.sno,
                                            gstatus = y.gstatus,
                                            nat = y.nat,
                                            psrno = y.psrno,
                                            gscode = y.gscode,
                                            y.max,
                                            y.min,
                                            y.rem,
                                            y.rname,
                                            y.jname,
                                            y.tname,
                                            y.hage,
                                            y.himg,
                                            y.adfa,
                                            y.rdt,
                                            odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
                                            new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
                                            new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
                                        }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                                    }).OrderBy(x => x.sno).ToList();
                                    //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                                    //ErrorLog.WriteLog("GameData11" + s);
                                    if (data != null && data.Count() > 0)
                                        return Return200("Success", data);
                                    return Return300("No record found.");
                                }
                            }
                            else
                            {
                                if (masterdata.t1.FirstOrDefault().iplay == true)
                                {
                                    var data = gdata.Where(p => p.company.Any(
                                        i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true && p.status.ToLower() != "closed"
                                        ).Select(l => new
                                        {
                                            mid = l.mid,
                                            mname = l.mname,
                                            status = l.status,
                                            rc = l.rc,
                                            sno = l.sno,
                                            ocnt = l.ocnt,
                                            gscode = l.gscode,
                                            dtype = l.dtype,
                                            gtype = l.gtype.ToString().ToLower(),
                                            maxb = l.maxb,
                                            max = l.max,
                                            min = l.min,
                                            rem = l.rem,
                                            umaxbof = l.umaxbof,
                                            l.biplay,
                                            l.boplay,
                                            l.btcnt,
                                            iplay = masterdata.t1.FirstOrDefault().iplay,
                                            section = l.section.Select(y => new
                                            {
                                                sid = y.sid,
                                                sno = y.sno,
                                                gstatus = y.gstatus,
                                                nat = y.nat,
                                                psrno = y.psrno,
                                                gscode = y.gscode,
                                                y.max,
                                                y.min,
                                                y.rem,
                                                y.rname,
                                                y.jname,
                                                y.tname,
                                                y.hage,
                                                y.himg,
                                                y.adfa,
                                                y.rdt,
                                                odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
                                                {
                                                    i.odds,
                                                    i.otype,
                                                    i.oname,
                                                    i.tno,
                                                    size = i.odds == 0 ? 0 : i.size
                                                }).OrderByDescending(z => z.tno).Union(
                                                    y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
                                                    {
                                                        i1.odds,
                                                        i1.otype,
                                                        i1.oname,
                                                        i1.tno,
                                                        size = i1.odds == 0 ? 0 : i1.size
                                                    }).OrderBy(z => z.tno)))
                                            }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                                        }).OrderBy(x => x.sno).ToList();
                                    //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                                    //ErrorLog.WriteLog("GameData1" + s);
                                    if (data != null && data.Count() > 0)
                                        return Return200("Success", data);
                                    return Return300("No record found.");
                                }
                                if (masterdata.t1.FirstOrDefault().iplay == false)
                                {
                                    var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true
                                    && Convert.ToBoolean(p.boplay) == true && p.status.ToLower() != "closed").Select(l =>
                                    new
                                    {
                                        mid = l.mid,
                                        mname = l.mname,
                                        status = l.status,
                                        rc = l.rc,
                                        sno = l.sno,
                                        ocnt = l.ocnt,
                                        gscode = l.gscode,
                                        dtype = l.dtype,
                                        gtype = l.gtype.ToString().ToLower(),
                                        maxb = l.maxb,
                                        max = l.max,
                                        min = l.min,
                                        rem = l.rem,
                                        umaxbof = l.umaxbof,
                                        l.biplay,
                                        l.boplay,
                                        l.btcnt,
                                        iplay = masterdata.t1.FirstOrDefault().iplay,
                                        section = l.section.Select(y =>
                                        new
                                        {
                                            sid = y.sid,
                                            sno = y.sno,
                                            gstatus = y.gstatus,
                                            nat = y.nat,
                                            psrno = y.psrno,
                                            gscode = y.gscode,
                                            y.max,
                                            y.min,
                                            y.rem,
                                            y.rname,
                                            y.jname,
                                            y.tname,
                                            y.hage,
                                            y.himg,
                                            y.adfa,
                                            y.rdt,
                                            odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
                                            new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
                                            new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
                                        }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                                    }).OrderBy(x => x.sno).ToList();
                                    //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                                    //ErrorLog.WriteLog("GameData11" + s);
                                    if (data != null && data.Count() > 0)
                                        return Return200("Success", data);
                                    return Return300("No record found.");
                                }
                            }
                        }
                    }
                    return Return300("No record found2.");
                }
                else
                {
                    return Return100("");
                }

            }
            catch (Exception ex)
            {
                //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                ErrorLog.WriteLog("GameData", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(gameData));
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("gamedata2")]
        public async Task<HttpResponseMessage> GameData2(GameData gameData)
        {
            try
            {
                //if (gameData.m == 0)
                //{
                //    var masterdata = await _cacheManagerCric.Getasync<GameMaster>(gameData.gmid.ToString(), gameData.m);
                //    var gdata = await _cacheManagerCric.GetAllkeysData<GameDataw>(gameData.gmid.ToString(), gameData.m);
                //    if (gdata != null && gdata.Count() > 0)
                //    {
                //        if (masterdata.t1.FirstOrDefault().iplay == true)
                //        {
                //            var data = gdata.Where(p => p.company.Any(
                //                i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true
                //                ).Select(l => new
                //                {
                //                    mid = l.mid,
                //                    mname = l.mname,
                //                    status = l.status,
                //                    rc = l.rc,
                //                    sno = l.sno,
                //                    ocnt = l.ocnt,
                //                    gscode = l.gscode,
                //                    dtype = l.dtype,
                //                    gtype = l.gtype.ToString().ToLower(),
                //                    maxb = l.maxb,
                //                    max = l.max,
                //                    min = l.min,
                //                    rem = l.rem,
                //                    umaxbof = l.umaxbof,
                //                    l.biplay,
                //                    l.boplay,
                //                    iplay = masterdata.t1.FirstOrDefault().iplay,
                //                    section = l.section.Select(y => new
                //                    {
                //                        sid = y.sid,
                //                        sno = y.sno,
                //                        gstatus = y.gstatus,
                //                        nat = y.nat,
                //                        psrno = y.psrno,
                //                        gscode = y.gscode,
                //                        y.max,
                //                        y.min,
                //                        y.rem,
                //                        odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
                //                        {
                //                            i.odds,
                //                            i.otype,
                //                            i.oname,
                //                            i.tno,
                //                            size = i.odds == 0 ? 0 : i.size
                //                        }).OrderByDescending(z => z.tno).Union(
                //                            y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
                //                            {
                //                                i1.odds,
                //                                i1.otype,
                //                                i1.oname,
                //                                i1.tno,
                //                                size = i1.odds == 0 ? 0 : i1.size
                //                            }).OrderBy(z => z.tno)))
                //                    }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                //                }).OrderBy(x => x.sno).ToList();
                //            //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                //            //ErrorLog.WriteLog("GameData1" + s);
                //            return Return200("Success", data);
                //        }
                //        if (masterdata.t1.FirstOrDefault().iplay == false)
                //        {
                //            var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true
                //            && Convert.ToBoolean(p.boplay) == true).Select(l =>
                //            new
                //            {
                //                mid = l.mid,
                //                mname = l.mname,
                //                status = l.status,
                //                rc = l.rc,
                //                sno = l.sno,
                //                ocnt = l.ocnt,
                //                gscode = l.gscode,
                //                dtype = l.dtype,
                //                gtype = l.gtype.ToString().ToLower(),
                //                maxb = l.maxb,
                //                max = l.max,
                //                min = l.min,
                //                rem = l.rem,
                //                umaxbof = l.umaxbof,
                //                l.biplay,
                //                l.boplay,
                //                iplay = masterdata.t1.FirstOrDefault().iplay,
                //                section = l.section.Select(y =>
                //                new
                //                {
                //                    sid = y.sid,
                //                    sno = y.sno,
                //                    gstatus = y.gstatus,
                //                    nat = y.nat,
                //                    psrno = y.psrno,
                //                    gscode = y.gscode,
                //                    y.max,
                //                    y.min,
                //                    y.rem,
                //                    odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
                //                    new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
                //                    new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
                //                }).OrderBy(h => h.sno).ThenBy(a => a.sid)
                //            }).OrderBy(x => x.sno).ToList();
                //            //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
                //            //ErrorLog.WriteLog("GameData11" + s);
                //            return Return200("Success", data);
                //        }

                //    }
                //}
                var Response = _dimfrontservice.Gamedata2(gameData);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GameData2", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var myobjList = JsonConvert.DeserializeObject<List<GameDataw>>(Response.Tables[0].Rows[0]["gdata"].ToString());
                var myObj = myobjList[0];
                if (myobjList != null)
                    return Return200("success", myobjList);
                else
                    return Return300("No record found");
                return Return300("No record found");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Gamedata2", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(gameData));
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("gamedataport")]
        public async Task<HttpResponseMessage> GameDataport()
        {
            try
            {
                ErrorLog.WriteLogAll("GameDataport", "");
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);
                if (!res)
                    return Return300("token not valid.");
                int uid = 0;
                uid = JwtTokenGenerator.GetUid(header);
                uid = uid % 10;

                return Return200("Success", uid);

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GameDataport", ex.Message.ToString(), " : Req" + "");
                return Return400(ex.Message);
            }
        }
        //[HttpPost]
        //[UserAuth, KeyFilter]
        //[Route("gamedata2")]
        //public async Task<HttpResponseMessage> GameData2(GameData gameData)
        //{
        //    try
        //    {
        //        if (gameData.m == 0)
        //        {
        //            StackExchange.Redis.IDatabaseAsync db = null;
        //            IEnumerable<string> keys = null;
        //            string key = null;

        //            db = _cacheManagerCric.getDb(gameData.m);
        //            key = "Set_" + gameData.gmid.ToString();
        //            var members = await db.SetMembersAsync(key);
        //            if (members != null)
        //                keys = members.Select(x => x.ToString());
        //            else
        //                return Return300("No record found.");
        //            //keys = _cacheManagerCric.GetAllkeys(gameData.gmid.ToString(), gameData.m);

        //            // GameMaster masterdata = null;

        //            string masterdata_str = await db.StringGetAsync(gameData.gmid.ToString());
        //            var masterdata = masterdata_str != null ? JsonConvert.DeserializeObject<GameMaster>(masterdata_str) : null;

        //            IList<GameDataw> gdata = new List<GameDataw>();

        //            RedisKey[] redis_keys = keys.Select(_key => (RedisKey)_key).ToArray();
        //            RedisValue[] redis_values = new RedisValue[redis_keys.Count()];

        //            await GetValuesFunctionAsync(db, redis_keys, redis_values);
        //            if (redis_values != null)
        //            {
        //                for (var i = 0; i < redis_values.Count(); i++)
        //                {
        //                    string _key = redis_keys[i];
        //                    string _data = redis_values[i];
        //                    if (_data == null)
        //                    {
        //                        return Return300("No record found.");
        //                        //Console.WriteLine("ERROR: gamedetail - null value in redis array");
        //                        //continue;
        //                    }
        //                    // if (_key == gameData.gmid.ToString())
        //                    // {
        //                    //    masterdata = JsonConvert.DeserializeObject<GameMaster>(_data);
        //                    // }
        //                    gdata.Add(JsonConvert.DeserializeObject<GameDataw>(_data));
        //                }
        //            }


        //            // var masterdata = await _cacheManagerCric.Getasync<GameMaster>(gameData.gmid.ToString(), gameData.m);
        //            // var gdata = await _cacheManagerCric.GetAllkeysData<GameDataw>(gameData.gmid.ToString(), gameData.m);
        //            if (gdata != null && gdata.Count() > 0)
        //            {
        //                if (masterdata.t1.FirstOrDefault().iplay == true)
        //                {
        //                    var data = gdata.Where(p => p.company.Any(
        //                        i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true && Convert.ToBoolean(p.biplay) == true
        //                        ).Select(l => new
        //                        {
        //                            mid = l.mid,
        //                            mname = l.mname,
        //                            status = l.status,
        //                            rc = l.rc,
        //                            sno = l.sno,
        //                            ocnt = l.ocnt,
        //                            gscode = l.gscode,
        //                            dtype = l.dtype,
        //                            gtype = l.gtype.ToString().ToLower(),
        //                            maxb = l.maxb,
        //                            max = l.max,
        //                            min = l.min,
        //                            rem = l.rem,
        //                            umaxbof = l.umaxbof,
        //                            l.biplay,
        //                            l.boplay,
        //                            iplay = masterdata.t1.FirstOrDefault().iplay,
        //                            section = l.section.Select(y => new
        //                            {
        //                                sid = y.sid,
        //                                sno = y.sno,
        //                                gstatus = y.gstatus,
        //                                nat = y.nat,
        //                                psrno = y.psrno,
        //                                gscode = y.gscode,
        //                                y.max,
        //                                y.min,
        //                                y.rem,
        //                                odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i => new
        //                                {
        //                                    i.odds,
        //                                    i.otype,
        //                                    i.oname,
        //                                    i.tno,
        //                                    size = i.odds == 0 ? 0 : i.size
        //                                }).OrderByDescending(z => z.tno).Union(
        //                                    y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 => new
        //                                    {
        //                                        i1.odds,
        //                                        i1.otype,
        //                                        i1.oname,
        //                                        i1.tno,
        //                                        size = i1.odds == 0 ? 0 : i1.size
        //                                    }).OrderBy(z => z.tno)))
        //                            }).OrderBy(h => h.sno).ThenBy(a => a.sid)
        //                        }).OrderBy(x => x.sno).ToList();
        //                    //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //                    //ErrorLog.WriteLog("GameData1" + s);
        //                    return Return200("Success", data);
        //                }
        //                if (masterdata.t1.FirstOrDefault().iplay == false)
        //                {
        //                    var data = gdata.Where(p => p.company.Any(i => i.code == ConfigItems.CCode && Convert.ToBoolean(i.visible) == true) && Convert.ToBoolean(p.visible) == true
        //                    && Convert.ToBoolean(p.boplay) == true).Select(l =>
        //                    new
        //                    {
        //                        mid = l.mid,
        //                        mname = l.mname,
        //                        status = l.status,
        //                        rc = l.rc,
        //                        sno = l.sno,
        //                        ocnt = l.ocnt,
        //                        gscode = l.gscode,
        //                        dtype = l.dtype,
        //                        gtype = l.gtype.ToString().ToLower(),
        //                        maxb = l.maxb,
        //                        max = l.max,
        //                        min = l.min,
        //                        rem = l.rem,
        //                        umaxbof = l.umaxbof,
        //                        l.biplay,
        //                        l.boplay,
        //                        iplay = masterdata.t1.FirstOrDefault().iplay,
        //                        section = l.section.Select(y =>
        //                        new
        //                        {
        //                            sid = y.sid,
        //                            sno = y.sno,
        //                            gstatus = y.gstatus,
        //                            nat = y.nat,
        //                            psrno = y.psrno,
        //                            gscode = y.gscode,
        //                            y.max,
        //                            y.min,
        //                            y.rem,
        //                            odds = (y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "back").Select(i =>
        //                            new { i.odds, i.otype, i.oname, i.tno, size = i.odds == 0 ? 0 : i.size }).OrderByDescending(z => z.tno).Union(y.odds.Where(a => a.sid == y.sid && a.otype.ToLower() == "lay").Select(i1 =>
        //                            new { i1.odds, i1.otype, i1.oname, i1.tno, size = i1.odds == 0 ? 0 : i1.size }).OrderBy(z => z.tno)))
        //                        }).OrderBy(h => h.sno).ThenBy(a => a.sid)
        //                    }).OrderBy(x => x.sno).ToList();
        //                    //s += " | " + DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss.ffffff");
        //                    //ErrorLog.WriteLog("GameData11" + s);
        //                    return Return200("Success", data);
        //                }

        //            }
        //        }
        //        //var Response = _dimfrontservice.Gamedata2(gameData);
        //        //if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //        //{
        //        //    ErrorLog.WriteLog("Casinolist", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //        //    return Return400("Data Error");
        //        //}
        //        //if (Response == null || Response.Tables.Count <= 0)
        //        //    return Return300("No Data Found.");
        //        //if (Response.Tables[0].Rows.Count <= 0)
        //        //    return Return300("No Record Found.");
        //        //if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
        //        //    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

        //        //var myobjList = JsonConvert.DeserializeObject<List<GameDataw>>(Response.Tables[0].Rows[0]["gdata"].ToString());
        //        //var myObj = myobjList[0];
        //        //if (myobjList != null)
        //        //    return Return200("success", myobjList);
        //        //else
        //        //    return Return300("No record found");
        //        //return Return300("No record found");
        //        return Return300("No record found");
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.WriteLog("Gamedata2", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(gameData));
        //        return Return400(ex.Message);
        //    }
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getmid")]
        public HttpResponseMessage Getmid()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                var Response = _dimfrontservice.Getmid(uu_id);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Getmid", "Getmid", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                return Return200(Response.Tables[0].Rows[0]["message"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Getmid", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("gametab")]
        public HttpResponseMessage GameTab()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                var Response = _dimfrontservice.GameTab();
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GameTab", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//EventId,EventName,IsDefault
                        eid = string.IsNullOrEmpty(x["EventId"].ToString()) ? 0 : x["EventId"],
                        ename = string.IsNullOrEmpty(x["EventName"].ToString()) ? "" : x["EventName"],
                        isdefault = string.IsNullOrEmpty(x["IsDefault"].ToString()) ? false : x["IsDefault"],
                        m = string.IsNullOrEmpty(x["RedisNum"].ToString()) ? 0 : x["RedisNum"]
                    });
                return Return200("success", new { t1 = t1 });

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GameTab", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("userdata")]
        public object UserData()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.UserData(uid);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("UserData", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = new
                {
                    bal = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["Balance"].ToString()) ? 0 : Response.Tables[0].Rows[0]["Balance"],
                    bcode = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["Barcode"].ToString()) ? 0 : Response.Tables[0].Rows[0]["Barcode"],
                    exp = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["Exposer"].ToString()) ? 0 : Response.Tables[0].Rows[0]["Exposer"]
                };
                return Return200("success", t1);

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("UserData", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("userbook")]
        public object UserBook([FromBody] UserBook userBook)
        {
            try
            {
                ErrorLog.WriteLogAll("UserBook", JsonConvert.SerializeObject(userBook));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                userBook.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.UserBook(userBook);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("UserBook", JsonConvert.SerializeObject(userBook), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                //if (Response.Tables[0].Rows.Count <= 0)
                //    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var bet = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
            .Select(x => new
            {//select Nation,UserRate,BetType,Amount,GameType,Bhav
                mid = string.IsNullOrEmpty(x["Marketid"].ToString()) ? 0 : x["Marketid"],
                mname = string.IsNullOrEmpty(x["MarketName"].ToString()) ? "" : x["MarketName"],
                nat = string.IsNullOrEmpty(x["Nation"].ToString()) ? "" : x["Nation"],
                urate = string.IsNullOrEmpty(x["UserRate"].ToString()) ? 0 : x["UserRate"],
                btype = string.IsNullOrEmpty(x["BetType"].ToString()) ? "" : x["BetType"].ToString().ToLower(),
                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower(),
                bhav = string.IsNullOrEmpty(x["Bhav"].ToString()) ? 0 : x["Bhav"]
            }).GroupBy(r1 => new
            {
                r1.mid,
            }, (key1, group1) => new
            {
                mid = key1.mid,
                sdata = group1.Select(y => new
                {
                    mname = y.mname,
                    nat = y.nat,
                    urate = y.urate,
                    btype = y.btype,
                    amt = y.amt,
                    gtype = y.gtype,
                    bhav = y.bhav
                })
            });
                var sportbet = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
         .Select(x => new
         {//MarketId,SectionId,Amount 
             mid = string.IsNullOrEmpty(x["Marketid"].ToString()) ? 0 : x["Marketid"],
             sid = string.IsNullOrEmpty(x["SectionId"].ToString()) ? 0 : x["SectionId"],
             amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"]
         }).GroupBy(r1 => new
         {
             r1.mid,
         }, (key1, group1) => new
         {
             mid = key1.mid,
             sdata = group1.Select(y => new
             {
                 sid = y.sid,
                 amt = y.amt,
             })
         });

                var fancy = Response.Tables[2].Rows.Count <= 0 ? null : Response.Tables[2].AsEnumerable()
         .Select(x => new
         {//MarketId,SectionId,Amount 
             mid = string.IsNullOrEmpty(x["Marketid"].ToString()) ? 0 : x["Marketid"],
             sid = string.IsNullOrEmpty(x["SectionId"].ToString()) ? 0 : x["SectionId"],
             amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"]
         }).GroupBy(r1 => new
         {
             r1.mid,
         }, (key1, group1) => new
         {
             mid = key1.mid,
             sdata = group1.Select(y => new
             {
                 sid = y.sid,
                 amt = y.amt,
             })
         });
                if (bet == null && sportbet == null && fancy == null)
                    return Return300("No Record Found.");
                return Return200("success", new { bet = bet, sportbet = sportbet, fancy = fancy });

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("UserBook", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(userBook));
                return Return400(ex.Message);
            }
        }

        //[HttpPost]
        //[UserAuth, KeyFilter]
        //[Route("getcasinolist")]
        //public HttpResponseMessage GetCasinoList([FromBody] Casino cs)
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("GetCasinoList", JsonConvert.SerializeObject(cs));

        //        string u_id = string.Empty;
        //        var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
        //        if (header != null)
        //        {
        //            u_id = JwtTokenGenerator.GetSaGuid(header);
        //        }

        //        Guid uu_id;
        //        bool res = Guid.TryParse(u_id, out uu_id);

        //        if (!res)
        //            return Return300("token not valid.");

        //        var Response = _dimfrontservice.GetCasinoList(cs);

        //        if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //        {
        //            ErrorLog.WriteLog("GetCasinoList", JsonConvert.SerializeObject(cs), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //            return Return400("Data Error");
        //        }
        //        if (Response == null || Response.Tables.Count <= 0)
        //            return Return300("No Data Found.");
        //        if (Response.Tables[0].Rows.Count <= 0)
        //            return Return300("No Record Found.");
        //        if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
        //            return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

        //        var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
        //            .Select(x => new
        //            {
        //                ctype = string.IsNullOrEmpty(x["cmid"].ToString()) ? 0 : x["cmid"],
        //                cname = string.IsNullOrEmpty(x["casinoname"].ToString()) ? "" : x["casinoname"],
        //                isown = string.IsNullOrEmpty(x["isowncasino"].ToString()) ? false : x["isowncasino"],
        //                istab = string.IsNullOrEmpty(x["istabing"].ToString()) ? false : x["istabing"]
        //            });

        //        return Return200("Success", new { t1 = t1 });
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.WriteLog("GetCasinoList : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(cs));
        //        return Return400("Server Error");
        //    }
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getcasinotablist")]
        public HttpResponseMessage GetCasinoTabList([FromBody] CasinoTabs ct)
        {
            try
            {
                ErrorLog.WriteLogAll("GetCasinoTabList", JsonConvert.SerializeObject(ct));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                var Response = _dimfrontservice.GetCasinoTabList(ct);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GetCasinoTabList", JsonConvert.SerializeObject(ct), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                if (ct.webdom.ToLower() == "tajexch777.com" || ct.webdom.ToLower() == "test78605.taj777.com")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable().Where(a => a.Field<String>("casinoname").ToLower() != "tembo")
                    .Select(x => new
                    {
                        gmid = string.IsNullOrEmpty(x["gmid"].ToString()) ? 0 : x["gmid"],
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        tabno = string.IsNullOrEmpty(x["tabnumber"].ToString()) ? 0 : x["tabnumber"],
                        cname = string.IsNullOrEmpty(x["casinoname"].ToString()) ? "" : x["casinoname"],
                        gameid = string.IsNullOrEmpty(x["gameid"].ToString()) ? 0 : x["gameid"]
                    });

                    return Return200("Success", new { t1 = t1 });
                }
                else
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {
                        gmid = string.IsNullOrEmpty(x["gmid"].ToString()) ? 0 : x["gmid"],
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        tabno = string.IsNullOrEmpty(x["tabnumber"].ToString()) ? 0 : x["tabnumber"],
                        cname = string.IsNullOrEmpty(x["casinoname"].ToString()) ? "" : x["casinoname"],
                        gameid = string.IsNullOrEmpty(x["gameid"].ToString()) ? 0 : x["gameid"]
                    });

                    return Return200("Success", new { t1 = t1 });
                }

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetCasinoTabList : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(ct));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getcasinotablelist")]
        public HttpResponseMessage GetCasinoTableList([FromBody] CasinoTables ct)
        {
            try
            {
                ErrorLog.WriteLogAll("GetCasinoTableList", JsonConvert.SerializeObject(ct));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                var Response = _dimfrontservice.GetCasinoTableList(ct);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GetCasinoTableList", JsonConvert.SerializeObject(ct), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {
                        cid = string.IsNullOrEmpty(x["cmid"].ToString()) ? 0 : x["cmid"],
                        gid = string.IsNullOrEmpty(x["gmid"].ToString()) ? 0 : x["gmid"],
                        gmid = string.IsNullOrEmpty(x["gameid"].ToString()) ? 0 : x["gameid"],
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        gtid = string.IsNullOrEmpty(x["gametypeid"].ToString()) ? 0 : x["gametypeid"],
                        imgpath = string.IsNullOrEmpty(x["imagepath"].ToString()) ? "" : x["imagepath"],
                        srno = string.IsNullOrEmpty(x["srno"].ToString()) ? 0 : x["srno"],
                        tabno = string.IsNullOrEmpty(x["tabnumber"].ToString()) ? 0 : x["tabnumber"],
                        isframe = string.IsNullOrEmpty(x["isframe"].ToString()) ? 0 : x["isframe"],
                        tid = string.IsNullOrEmpty(x["catmaster"].ToString()) ? 0 : x["catmaster"]
                    });

                return Return200("Success", new { t1 = t1 });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetCasinoTableList : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(ct));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("buttonlist")]
        public HttpResponseMessage ButtonList()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.ButtonList(uid);
                //ErrorLog.WriteLogAll("ButtonList : " + Environment.NewLine + uid, JsonConvert.SerializeObject(Response));

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("ButtonList", u_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                   .Select(x => new
                   {//UButtonId,Buttonval,ButtonText 
                       bid = string.IsNullOrEmpty(x["UButtonId"].ToString()) ? 0 : x["UButtonId"],
                       bval = string.IsNullOrEmpty(x["Buttonval"].ToString()) ? 0 : x["Buttonval"],
                       btxt = string.IsNullOrEmpty(x["ButtonText"].ToString()) ? "" : x["ButtonText"],
                   });
                var Response1 = _dimfrontservice.AutoCon(uid);
                var autocon = Convert.ToBoolean(Response1.Tables[0].Rows[0]["AutoConfirm"]);
                var t2 = (dynamic)null;
                return Return200("Success", new { t1 = t1, autocon = autocon, t2 = t2 });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("ButtonList : " + ex.ToString());
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("buttonupdate")]
        public HttpResponseMessage ButtonUpdate([FromBody] ButtonUpdate buttonUpdate)
        {
            try
            {
                ErrorLog.WriteLogAll("ButtonUpdate", JsonConvert.SerializeObject(buttonUpdate));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                buttonUpdate.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.ButtonUpdate(buttonUpdate);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("ButtonUpdate", JsonConvert.SerializeObject(buttonUpdate), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("ButtonUpdate : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(buttonUpdate));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("buttonlistcs")]
        public HttpResponseMessage ButtonListcs()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.ButtonListcs(uid);
                //ErrorLog.WriteLogAll("ButtonList : " + Environment.NewLine + uid, JsonConvert.SerializeObject(Response));

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("ButtonListcs", u_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                   .Select(x => new
                   {//UButtonId,Buttonval,ButtonText 
                       bid = string.IsNullOrEmpty(x["UButtonId"].ToString()) ? 0 : x["UButtonId"],
                       bval = string.IsNullOrEmpty(x["Buttonval"].ToString()) ? 0 : x["Buttonval"],
                       btxt = string.IsNullOrEmpty(x["ButtonText"].ToString()) ? "" : x["ButtonText"],
                   });
                var Response1 = _dimfrontservice.AutoCon(uid);
                var t2 = (dynamic)null;
                var autocon = Convert.ToBoolean(Response1.Tables[0].Rows[0]["AutoConfirm"]);
                return Return200("Success", new { t1 = t1, autocon = autocon, t2 = t2 });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("ButtonListcs : " + ex.ToString());
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("buttonupdatecs")]
        public HttpResponseMessage ButtonUpdatecs([FromBody] ButtonUpdate buttonUpdate)
        {
            try
            {
                ErrorLog.WriteLogAll("ButtonUpdatecs", JsonConvert.SerializeObject(buttonUpdate));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                buttonUpdate.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.ButtonUpdatecs(buttonUpdate);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("ButtonUpdatecs", JsonConvert.SerializeObject(buttonUpdate), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("ButtonUpdatecs : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(buttonUpdate));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("matchdtlbet")]
        public HttpResponseMessage Matchdtlbet([FromBody] Matchdtlbet matchdtlbet)
        {
            try
            {
                ErrorLog.WriteLogAll("Matchdtlbet", JsonConvert.SerializeObject(matchdtlbet));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                matchdtlbet.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.Matchdtlbet(matchdtlbet);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Matchdtlbet", u_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                if (matchdtlbet.gtype == 1)
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//EventType,EventName,.Nation,UserRate,BetType,Amount,PlaceDate,GameType,Bhav,Marketname
                        etype = string.IsNullOrEmpty(x["EventType"].ToString()) ? "" : x["EventType"],
                        ename = string.IsNullOrEmpty(x["EventName"].ToString()) ? "" : x["EventName"],
                        nat = string.IsNullOrEmpty(x["Nation"].ToString()) ? "" : x["Nation"],
                        urate = string.IsNullOrEmpty(x["UserRate"].ToString()) ? 0 : x["UserRate"],
                        btype = string.IsNullOrEmpty(x["BetType"].ToString()) ? "" : x["BetType"].ToString().ToLower(),
                        amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                        pdt = string.IsNullOrEmpty(x["PlaceDate"].ToString()) ? "" : x["PlaceDate"].ToString(),
                        gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower(),
                        bv = string.IsNullOrEmpty(x["Bhav"].ToString()) ? 0 : x["Bhav"],
                        mname = string.IsNullOrEmpty(x["Marketname"].ToString()) ? "" : x["Marketname"]
                    });
                    return Return200("Success", t1);
                }
                else
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//gamename,nation,userrate,bettype,amount,placedate,p.gametype,marketname
                        ename = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        nat = string.IsNullOrEmpty(x["nation"].ToString()) ? "" : x["nation"],
                        urate = string.IsNullOrEmpty(x["userrate"].ToString()) ? 0 : x["userrate"],
                        btype = string.IsNullOrEmpty(x["bettype"].ToString()) ? "" : x["bettype"].ToString().ToLower(),
                        amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                        pdt = string.IsNullOrEmpty(x["placedate"].ToString()) ? "" : x["placedate"].ToString(),
                        gtype = string.IsNullOrEmpty(x["gametype"].ToString()) ? "" : x["gametype"].ToString().ToLower(),
                        mname = string.IsNullOrEmpty(x["marketname"].ToString()) ? "" : x["marketname"]
                    });
                    return Return200("Success", t1);
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Matchdtlbet : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(matchdtlbet));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("changepass")]
        public HttpResponseMessage ChangePass([FromBody] ChangePass changePass)
        {
            try
            {
                ErrorLog.WriteLogAll("ChangePass", JsonConvert.SerializeObject(changePass));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                changePass.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.ChangePass(changePass);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("ChangePass", u_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("ChangePass : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(changePass));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [TempAuth, KeyFilter]
        [Route("changepassauth")]
        public HttpResponseMessage ChangePassauth([FromBody] ChangePass changePass)
        {
            try
            {
                ErrorLog.WriteLogAll("ChangePassauth", JsonConvert.SerializeObject(changePass));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                changePass.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.ChangePass(changePass);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("ChangePassauth", u_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("ChangePassauth : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(changePass));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getteenodds")]
        public object GetTeenOdds([FromBody] GetTeenOdds getTeenOdds)
        {
            try
            {
                ErrorLog.WriteLogAll("GetTeenOdds", JsonConvert.SerializeObject(getTeenOdds));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    getTeenOdds.gtype = getTeenOdds.gtype.ToLower();
                    var par = "gtype=" + getTeenOdds.gtype.ToLower();
                    var resp = HttpHelper.Post(ConfigItems.RedisUrlC + getTeenOdds.gtype.ToLower() + ApiEndpoint.getteenodds, par, "application/x-www-form-urlencoded", "POST");
                    if (getTeenOdds.gtype.ToLower() == "teen")
                    {
                        var obj = JsonConvert.DeserializeObject<Teen>(resp);
                        if (obj != null && obj.data != null && obj.data.vv == 1)
                            obj.data.card = u_id.ToString() + "," + obj.data.card;
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "teen20" || getTeenOdds.gtype.ToLower() == "teen20b" || getTeenOdds.gtype.ToLower() == "teenmuf" || getTeenOdds.gtype.ToLower() == "teen8" || getTeenOdds.gtype.ToLower() == "baccarat" || getTeenOdds.gtype.ToLower() == "baccarat2" || getTeenOdds.gtype == "teen9")
                    {
                        var obj = JsonConvert.DeserializeObject<Teen20>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "patti2" || getTeenOdds.gtype.ToLower() == "trio" || getTeenOdds.gtype.ToLower() == "teensin")
                    {
                        var obj = JsonConvert.DeserializeObject<Patti2>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "notenum")
                    {
                        var obj = JsonConvert.DeserializeObject<NoteNum>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "poker20")
                    {
                        var obj = JsonConvert.DeserializeObject<Poker20>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "poker" || getTeenOdds.gtype.ToLower() == "poker6" || getTeenOdds.gtype.ToLower() == "cmeter" || getTeenOdds.gtype.ToLower() == "queen" || getTeenOdds.gtype.ToLower() == "race20" || getTeenOdds.gtype.ToLower() == "race2")
                    {
                        var obj = JsonConvert.DeserializeObject<Poker>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "dt6" || getTeenOdds.gtype.ToLower() == "dt20" || getTeenOdds.gtype.ToLower() == "dt202" || getTeenOdds.gtype.ToLower() == "dtl20" || getTeenOdds.gtype.ToLower() == "aaa" || getTeenOdds.gtype.ToLower() == "btable" || getTeenOdds.gtype.ToLower() == "war" || getTeenOdds.gtype.ToLower() == "paasa" || getTeenOdds.gtype.ToLower() == "3cardj" || getTeenOdds.gtype.ToLower() == "card32" || getTeenOdds.gtype.ToLower() == "card32eu" || getTeenOdds.gtype.ToLower() == "lucky7" || getTeenOdds.gtype.ToLower() == "lucky7eu" || getTeenOdds.gtype.ToLower() == "lucky7eu2" || getTeenOdds.gtype.ToLower() == "aaa2")
                    {
                        var obj = JsonConvert.DeserializeObject<DT6>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "cmatch20")
                    {
                        var obj = JsonConvert.DeserializeObject<CMatch20>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "worli" || getTeenOdds.gtype == "worli2")
                    {
                        var obj = JsonConvert.DeserializeObject<Worli>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "ab20")
                    {
                        var obj = JsonConvert.DeserializeObject<AB20>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "ab3")
                    {
                        var obj = JsonConvert.DeserializeObject<AB3>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "abj")
                    {
                        var obj = JsonConvert.DeserializeObject<ABJ>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "teen6" || getTeenOdds.gtype == "trap")
                    {
                        var obj = JsonConvert.DeserializeObject<Teen6>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "lottcard")
                    {
                        var obj = JsonConvert.DeserializeObject<Lottcard>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "race17")
                    {
                        var obj = JsonConvert.DeserializeObject<Race17>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "teen2024" || getTeenOdds.gtype == "teen1" || getTeenOdds.gtype == "teen120")
                    {
                        var obj = JsonConvert.DeserializeObject<Teen2024>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "kbc")
                    {
                        var obj = JsonConvert.DeserializeObject<Kbc>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "teen3")
                    {
                        var obj = JsonConvert.DeserializeObject<Teen3>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "dum10")
                    {
                        var obj = JsonConvert.DeserializeObject<Dum10>(resp);
                        return obj;
                    }
                    return null;
                }
                else
                {
                    return Return300("no record found.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetTeenOdds : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(getTeenOdds));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getvodds")]
        public object GetVOdds([FromBody] GetTeenOdds getTeenOdds)
        {
            try
            {
                ErrorLog.WriteLogAll("GetVOdds", JsonConvert.SerializeObject(getTeenOdds));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    var par = "gtype=" + getTeenOdds.gtype.ToLower();
                    var resp = HttpHelper.Post(ConfigItems.RedisUrlV + getTeenOdds.gtype.ToLower() + ApiEndpoint.getteenodds, par, "application/x-www-form-urlencoded", "POST");
                    if (getTeenOdds.gtype.ToLower() == "vteen")
                    {
                        var obj = JsonConvert.DeserializeObject<VTeen>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "vteen20" || getTeenOdds.gtype.ToLower() == "teen20b" || getTeenOdds.gtype.ToLower() == "vteenmuf" || getTeenOdds.gtype.ToLower() == "teen8" || getTeenOdds.gtype.ToLower() == "vbaccarat" || getTeenOdds.gtype.ToLower() == "baccarat2" || getTeenOdds.gtype == "teen9")
                    {
                        var obj = JsonConvert.DeserializeObject<VTeen20>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "patti2" || getTeenOdds.gtype.ToLower() == "vtrio" || getTeenOdds.gtype.ToLower() == "teensin")
                    {
                        var obj = JsonConvert.DeserializeObject<VPatti2>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "vnotenum")
                    {
                        var obj = JsonConvert.DeserializeObject<VNoteNum>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "poker20")
                    {
                        var obj = JsonConvert.DeserializeObject<Poker20>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "poker" || getTeenOdds.gtype.ToLower() == "poker6" || getTeenOdds.gtype.ToLower() == "cmeter" || getTeenOdds.gtype.ToLower() == "vqueen" || getTeenOdds.gtype.ToLower() == "vrace20")
                    {
                        var obj = JsonConvert.DeserializeObject<VPoker>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "vdt6" || getTeenOdds.gtype.ToLower() == "vdt20" || getTeenOdds.gtype.ToLower() == "dt202" || getTeenOdds.gtype.ToLower() == "vdtl20" || getTeenOdds.gtype.ToLower() == "vaaa" || getTeenOdds.gtype.ToLower() == "vbtable" || getTeenOdds.gtype.ToLower() == "war" || getTeenOdds.gtype.ToLower() == "paasa" || getTeenOdds.gtype.ToLower() == "3cardj" || getTeenOdds.gtype.ToLower() == "vcard32" || getTeenOdds.gtype.ToLower() == "card32eu" || getTeenOdds.gtype.ToLower() == "vlucky7" || getTeenOdds.gtype.ToLower() == "lucky7eu" || getTeenOdds.gtype.ToLower() == "lucky7eu2")
                    {
                        var obj = JsonConvert.DeserializeObject<VLucky7>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "cmatch20")
                    {
                        var obj = JsonConvert.DeserializeObject<CMatch20>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "worli" || getTeenOdds.gtype == "worli2")
                    {
                        var obj = JsonConvert.DeserializeObject<Worli>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "ab20")
                    {
                        var obj = JsonConvert.DeserializeObject<AB20>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "abj")
                    {
                        var obj = JsonConvert.DeserializeObject<ABJ>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "teen6" || getTeenOdds.gtype == "vtrap")
                    {
                        var obj = JsonConvert.DeserializeObject<VTeen6>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "lottcard")
                    {
                        var obj = JsonConvert.DeserializeObject<Lottcard>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "vrace17")
                    {
                        var obj = JsonConvert.DeserializeObject<VRace17>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype == "teen2024" || getTeenOdds.gtype == "vteen1" || getTeenOdds.gtype == "vteen120")
                    {
                        var obj = JsonConvert.DeserializeObject<VTeen2024>(resp);
                        return obj;
                    }
                    if (getTeenOdds.gtype.ToLower() == "kbc")
                    {
                        var obj = JsonConvert.DeserializeObject<Kbc>(resp);
                        return obj;
                    }
                    return null;
                }
                else
                {
                    return Return300("no record found.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetVOdds : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(getTeenOdds));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getcricketvdata")]
        public object GetCricketvdata([FromBody] GetCricketvdata getCricketvdata)
        {
            try
            {
                ErrorLog.WriteLogAll("GetCricketvdata", JsonConvert.SerializeObject(getCricketvdata));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    var par = "gtype=" + getCricketvdata.gtype.ToLower() + "&gmid=" + getCricketvdata.gmid;
                    var resp = HttpHelper.Post(ConfigItems.RedisUrlC + ApiEndpoint.cricketv + ApiEndpoint.getdata, par, "application/x-www-form-urlencoded", "POST");

                    var obj = JsonConvert.DeserializeObject<GetCricketvdataRes>(resp);
                    return obj;

                }
                else
                {
                    return Return300("no record found.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetCricketvdata : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(getCricketvdata));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("casinouserbook")]
        public HttpResponseMessage CasinoUserBook([FromBody] CasinoUserBook casinoUserBook)
        {
            try
            {
                ErrorLog.WriteLogAll("CasinoUserBook", JsonConvert.SerializeObject(casinoUserBook));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                casinoUserBook.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                casinoUserBook.gtype.ToLower();

                var Response = _dimfrontservice.CasinoUserBook(casinoUserBook);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("CasinoUserBook", JsonConvert.SerializeObject(casinoUserBook), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var bet = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//Nation,UserRate,BetType,Amount,GameType
                        nat = string.IsNullOrEmpty(x["Nation"].ToString()) ? "" : x["Nation"],
                        urate = string.IsNullOrEmpty(x["UserRate"].ToString()) ? 0 : x["UserRate"],
                        amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                        btype = string.IsNullOrEmpty(x["BetType"].ToString()) ? "" : x["BetType"].ToString().ToLower(),
                        gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                    });
                var sportbet = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                   .Select(x => new
                   {//sectionid,subsectionid,amount
                       sid = string.IsNullOrEmpty(x["sectionid"].ToString()) ? 0 : x["sectionid"],
                       subid = string.IsNullOrEmpty(x["subsectionid"].ToString()) ? 0 : x["subsectionid"],
                       amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"]
                   });
                var fancy = Response.Tables[2].Rows.Count <= 0 ? null : Response.Tables[2].AsEnumerable()
                   .Select(x => new
                   {//sectionid,subsectionid,amount
                       sid = string.IsNullOrEmpty(x["sectionid"].ToString()) ? 0 : x["sectionid"],
                       subid = string.IsNullOrEmpty(x["subsectionid"].ToString()) ? 0 : x["subsectionid"],
                       amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"]
                   });

                return Return200("success", new { bet = bet, sportbet = sportbet, fancy = fancy });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("CasinoUserBook : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(casinoUserBook));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("vcasinouserbook")]
        public HttpResponseMessage VCasinoUserBook([FromBody] CasinoUserBook casinoUserBook)
        {
            try
            {
                ErrorLog.WriteLogAll("VCasinoUserBook", JsonConvert.SerializeObject(casinoUserBook));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                casinoUserBook.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                casinoUserBook.gtype.ToLower();

                var Response = _dimfrontservice.VCasinoUserBook(casinoUserBook);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("VCasinoUserBook", JsonConvert.SerializeObject(casinoUserBook), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var bet = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//Nation,UserRate,BetType,Amount,GameType
                        nat = string.IsNullOrEmpty(x["Nation"].ToString()) ? "" : x["Nation"],
                        urate = string.IsNullOrEmpty(x["UserRate"].ToString()) ? 0 : x["UserRate"],
                        amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                        btype = string.IsNullOrEmpty(x["BetType"].ToString()) ? "" : x["BetType"].ToString().ToLower(),
                        gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                    });
                var sportbet = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                   .Select(x => new
                   {//sectionid,subsectionid,amount
                       sid = string.IsNullOrEmpty(x["sectionid"].ToString()) ? 0 : x["sectionid"],
                       subid = string.IsNullOrEmpty(x["subsectionid"].ToString()) ? 0 : x["subsectionid"],
                       amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"]
                   });
                var fancy = Response.Tables[2].Rows.Count <= 0 ? null : Response.Tables[2].AsEnumerable()
                   .Select(x => new
                   {//sectionid,subsectionid,amount
                       sid = string.IsNullOrEmpty(x["sectionid"].ToString()) ? 0 : x["sectionid"],
                       subid = string.IsNullOrEmpty(x["subsectionid"].ToString()) ? 0 : x["subsectionid"],
                       amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"]
                   });
                return Return200("success", new { bet = bet, sportbet = sportbet, fancy = fancy });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("VCasinoUserBook : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(casinoUserBook));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("last10result")]
        public object Last10Result([FromBody] GetTeenOdds getTeenOdds)
        {
            try
            {
                ErrorLog.WriteLogAll("Last10Result", JsonConvert.SerializeObject(getTeenOdds));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    if (getTeenOdds.gtype.ToLower() == "baccarat" || getTeenOdds.gtype.ToLower() == "baccarat2")
                    {
                        var par = "gtype=" + getTeenOdds.gtype.ToLower();
                        var resp = HttpHelper.Post(ConfigItems.RedisUrlC + getTeenOdds.gtype.ToLower() + ApiEndpoint.last10result, par, "application/x-www-form-urlencoded", "POST");
                        var obj = JsonConvert.DeserializeObject<Last10Res>(resp);
                        return obj;
                    }
                    else
                    {
                        var par = "gtype=" + getTeenOdds.gtype.ToLower();
                        var resp = HttpHelper.Post(ConfigItems.RedisUrlC + getTeenOdds.gtype.ToLower() + ApiEndpoint.last10result, par, "application/x-www-form-urlencoded", "POST");
                        var obj = JsonConvert.DeserializeObject<Last10Result>(resp);
                        return obj;
                    }

                    return Return300("No record found.");
                }
                else
                {
                    return Return300("No record found.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Last10Result : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(getTeenOdds));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("vlast10result")]
        public object VLast10Result([FromBody] GetTeenOdds getTeenOdds)
        {
            try
            {
                ErrorLog.WriteLogAll("VLast10Result", JsonConvert.SerializeObject(getTeenOdds));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    if (getTeenOdds.gtype.ToLower() == "vbaccarat" || getTeenOdds.gtype.ToLower() == "vbaccarat2")
                    {
                        var par = "gtype=" + getTeenOdds.gtype.ToLower();
                        var resp = HttpHelper.Post(ConfigItems.RedisUrlV + getTeenOdds.gtype.ToLower() + ApiEndpoint.last10result, par, "application/x-www-form-urlencoded", "POST");
                        var obj = JsonConvert.DeserializeObject<Last10Res>(resp);
                        return obj;
                    }
                    else
                    {
                        var par = "gtype=" + getTeenOdds.gtype.ToLower();
                        var resp = HttpHelper.Post(ConfigItems.RedisUrlV + getTeenOdds.gtype.ToLower() + ApiEndpoint.last10result, par, "application/x-www-form-urlencoded", "POST");
                        var obj = JsonConvert.DeserializeObject<Last10Result>(resp);
                        return obj;
                    }

                    return Return300("No record found.");
                }
                else
                {
                    return Return300("No record found.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("VLast10Result : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(getTeenOdds));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("accountstatement")]
        public HttpResponseMessage AccountStatement([FromBody] AccountStatement accountStatement)
        {
            try
            {
                ErrorLog.WriteLogAll("AccountStatement", JsonConvert.SerializeObject(accountStatement));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                accountStatement.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                if (accountStatement.type == 1)
                {
                    var Responseac = _dimfrontservice.AccountStatementAcc(accountStatement);
                    var Responsecs = _dimfrontservice.AccountStatementCS(accountStatement);
                    var Responsebet = _dimfrontservice.AccountStatementBet(accountStatement);
                    if (Responseac != null && Responseac.Tables != null && Responseac.Tables.Count > 0 && Responseac.Tables[0].Rows.Count > 0 && Responseac.Tables[0].Columns.Contains("id") && Responseac.Tables[0].Rows[0]["id"].ToString() == "1")
                    {
                        if (Responsecs != null && Responsecs.Tables != null && Responsecs.Tables.Count > 0 && Responsecs.Tables[0].Rows.Count > 0 && Responsecs.Tables[0].Columns.Contains("id") && Responsecs.Tables[0].Rows[0]["id"].ToString() == "1")
                        {
                            if (Responsebet != null && Responsebet.Tables != null && Responsebet.Tables.Count > 0 && Responsebet.Tables[0].Rows.Count > 0 && Responsebet.Tables[0].Columns.Contains("id") && Responsebet.Tables[0].Rows[0]["id"].ToString() == "1")
                            {

                                var t2 = Responseac.Tables[2].AsEnumerable()
                                 .Select(x => new
                                 {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                     gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                     mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                     amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                     rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                     edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                     rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                     dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                     gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                                 }).Concat(Responsecs.Tables[2].AsEnumerable()
                                 .Select(x => new
                                 {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                     gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                     mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                     amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                     rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                     edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                     rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                     dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                     gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                                 })).Concat(Responsebet.Tables[2].AsEnumerable()
                                 .Select(x => new
                                 {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                     gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                     mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                     amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                     rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                     edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                     rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                     dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                     gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                                 })).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();

                                var tcasino = Responseac.Tables.Count < 4 || Responseac.Tables[3].Rows.Count <= 0 ? null : Responseac.Tables[3].AsEnumerable()
                                   .Select(x => new
                                   {
                                       gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                       mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                       amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                       rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                       edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                       rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                       dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                       gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                                   });
                                var final = tcasino != null ? t2.Concat(tcasino) : t2;
                                var t1 = new
                                {
                                    ope = Convert.ToDouble(Responseac.Tables[1].Rows[0]["opening"]) + Convert.ToDouble(Responsecs.Tables[1].Rows[0]["opening"]) + Convert.ToDouble(Responsebet.Tables[1].Rows[0]["opening"])
                                    //ope = t2 != null ? Math.Round(t2.Sum(o => Convert.ToDouble(o.amt)), 2) : 0
                                };
                                return Return200("success", new { t1 = t1, t2 = final });
                            }
                        }
                    }
                    if (Responseac != null && Responseac.Tables != null && Responseac.Tables.Count > 0 && Responseac.Tables[0].Rows.Count > 0 && Responseac.Tables[0].Columns.Contains("id") && Responseac.Tables[0].Rows[0]["id"].ToString() == "1")
                    {
                        if (Responsecs != null && Responsecs.Tables != null && Responsecs.Tables.Count > 0 && Responsecs.Tables[0].Rows.Count > 0 && Responsecs.Tables[0].Columns.Contains("id") && Responsecs.Tables[0].Rows[0]["id"].ToString() == "1")
                        {
                            var t2 = Responseac.Tables[2].AsEnumerable()
                             .Select(x => new
                             {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                 gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                 mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                 amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                 rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                 edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                 rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                 dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                 gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                             }).Concat(Responsecs.Tables[2].AsEnumerable()
                             .Select(x => new
                             {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                 gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                 mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                 amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                 rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                 edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                 rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                 dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                 gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                             })).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();
                            var tcasino = Responseac.Tables.Count < 4 || Responseac.Tables[3].Rows.Count <= 0 ? null : Responseac.Tables[3].AsEnumerable()
                                  .Select(x => new
                                  {
                                      gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                      mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                      amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                      rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                      edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                      rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                      dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                      gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                                  });
                            var final = tcasino != null ? t2.Concat(tcasino) : t2;

                            var t1 = new
                            {
                                ope = Convert.ToDouble(Responseac.Tables[1].Rows[0]["opening"]) + Convert.ToDouble(Responsecs.Tables[1].Rows[0]["opening"])
                                //ope = t2 != null ? Math.Round(t2.Sum(o => Convert.ToDouble(o.amt)), 2) : 0
                            };
                            return Return200("success", new { t1 = t1, t2 = final });
                        }
                    }
                    if (Responseac != null && Responseac.Tables != null && Responseac.Tables.Count > 0 && Responseac.Tables[0].Rows.Count > 0 && Responseac.Tables[0].Columns.Contains("id") && Responseac.Tables[0].Rows[0]["id"].ToString() == "1")
                    {
                        if (Responsebet != null && Responsebet.Tables != null && Responsebet.Tables.Count > 0 && Responsebet.Tables[0].Rows.Count > 0 && Responsebet.Tables[0].Columns.Contains("id") && Responsebet.Tables[0].Rows[0]["id"].ToString() == "1")
                        {
                            var t2 = Responseac.Tables[2].AsEnumerable()
                             .Select(x => new
                             {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                 gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                 mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                 amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                 rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                 edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                 rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                 dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                 gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                             }).Concat(Responsebet.Tables[2].AsEnumerable()
                             .Select(x => new
                             {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                 gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                 mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                 amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                 rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                 edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                 rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                 dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                 gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                             })).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();
                            var tcasino = Responseac.Tables.Count < 4 || Responseac.Tables[3].Rows.Count <= 0 ? null : Responseac.Tables[3].AsEnumerable()
                                 .Select(x => new
                                 {
                                     gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                     mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                     amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                     rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                     edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                     rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                     dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                     gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                                 });
                            var final = tcasino != null ? t2.Concat(tcasino) : t2;

                            var t1 = new
                            {
                                ope = Convert.ToDouble(Responseac.Tables[1].Rows[0]["opening"]) + Convert.ToDouble(Responsebet.Tables[1].Rows[0]["opening"])
                                //ope = t2 != null ? Math.Round(t2.Sum(o => Convert.ToDouble(o.amt)), 2) : 0
                            };
                            return Return200("success", new { t1 = t1, t2 = final });
                        }
                    }
                    if (Responsecs != null && Responsecs.Tables != null && Responsecs.Tables.Count > 0 && Responsecs.Tables[0].Rows.Count > 0 && Responsecs.Tables[0].Columns.Contains("id") && Responsecs.Tables[0].Rows[0]["id"].ToString() == "1")
                    {
                        if (Responsebet != null && Responsebet.Tables != null && Responsebet.Tables.Count > 0 && Responsebet.Tables[0].Rows.Count > 0 && Responsebet.Tables[0].Columns.Contains("id") && Responsebet.Tables[0].Rows[0]["id"].ToString() == "1")
                        {
                            var t2 = Responsecs.Tables[2].AsEnumerable()
                             .Select(x => new
                             {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                 gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                 mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                 amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                 rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                 edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                 rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                 dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                 gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                             }).Concat(Responsebet.Tables[2].AsEnumerable()
                             .Select(x => new
                             {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                 gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                 mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                 amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                 rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                 edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                 rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                 dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                 gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                             })).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();


                            var t1 = new
                            {
                                ope = Convert.ToDouble(Responsecs.Tables[1].Rows[0]["opening"]) + Convert.ToDouble(Responsebet.Tables[1].Rows[0]["opening"])
                            };
                            return Return200("success", new { t1 = t1, t2 = t2 });
                        }
                    }
                    if (Responseac != null && Responseac.Tables != null && Responseac.Tables.Count > 0 && Responseac.Tables[0].Rows.Count > 0 && Responseac.Tables[0].Columns.Contains("id") && Responseac.Tables[0].Rows[0]["id"].ToString() == "1")
                    {

                        var t2 = Responseac.Tables[2].AsEnumerable()
                         .Select(x => new
                         {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                             gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                             mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                             amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                             rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                             edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                             rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                             dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                             gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                         }).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();

                        var tcasino = Responseac.Tables.Count < 4 || Responseac.Tables[3].Rows.Count <= 0 ? null : Responseac.Tables[3].AsEnumerable()
                                .Select(x => new
                                {
                                    gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                    mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                    amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                    rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                    edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                    rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                    dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                    gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                                });
                        var final = tcasino != null ? t2.Concat(tcasino) : t2;
                        var t1 = new
                        {
                            ope = Convert.ToDouble(Responseac.Tables[1].Rows[0]["opening"])
                            //ope = t2 != null ? Math.Round(t2.Sum(o => Convert.ToDouble(o.amt)), 2) : 0
                        };
                        return Return200("success", new { t1 = t1, t2 = final });
                    }
                    if (Responsecs != null && Responsecs.Tables != null && Responsecs.Tables.Count > 0 && Responsecs.Tables[0].Rows.Count > 0 && Responsecs.Tables[0].Columns.Contains("id") && Responsecs.Tables[0].Rows[0]["id"].ToString() == "1")
                    {
                        var t2 = Responsecs.Tables[2].AsEnumerable()
                         .Select(x => new
                         {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                             gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                             mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                             amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                             rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                             edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                             rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                             dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                             gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                         }).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();

                        var t1 = new
                        {
                            ope = Convert.ToDouble(Responsecs.Tables[1].Rows[0]["opening"])
                        };
                        return Return200("success", new { t1 = t1, t2 = t2 });
                    }
                    if (Responsebet != null && Responsebet.Tables != null && Responsebet.Tables.Count > 0 && Responsebet.Tables[0].Rows.Count > 0 && Responsebet.Tables[0].Columns.Contains("id") && Responsebet.Tables[0].Rows[0]["id"].ToString() == "1")
                    {
                        var t2 = Responsebet.Tables[2].AsEnumerable()
                         .Select(x => new
                         {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                             gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                             mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                             amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                             rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                             edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                             rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                             dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                             gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                         }).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();


                        var t1 = new
                        {
                            ope = Convert.ToDouble(Responsebet.Tables[1].Rows[0]["opening"])
                        };
                        return Return200("success", new { t1 = t1, t2 = t2 });
                    }
                }
                if (accountStatement.type == 2)
                {
                    var Responseac = _dimfrontservice.AccountStatementAcc(accountStatement);
                    if (Responseac != null && Responseac.Tables != null && Responseac.Tables.Count > 0 && Responseac.Tables[0].Rows.Count > 0 && Responseac.Tables[0].Columns.Contains("id") && Responseac.Tables[0].Rows[0]["id"].ToString() == "1")
                    {
                        var t2 = Responseac.Tables[2].AsEnumerable()
                                 .Select(x => new
                                 {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                     gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                     mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                     amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                     rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                     edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                     rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                     dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                     gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                                 }).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();
                        var t1 = new
                        {
                            ope = Convert.ToDouble(Responseac.Tables[1].Rows[0]["opening"])
                        };
                        return Return200("success", new { t1 = t1, t2 = t2 });
                    }
                }
                if (accountStatement.type == 3)
                {
                    var Responsecs = _dimfrontservice.AccountStatementCS(accountStatement);
                    var Responsebet = _dimfrontservice.AccountStatementBet(accountStatement);
                    var Responseparty3 = _dimfrontservice.AccountStatementParty3(accountStatement);
                    if (Responsebet != null && Responsebet.Tables != null && Responsebet.Tables.Count > 0 && Responsebet.Tables[0].Rows.Count > 0 && Responsebet.Tables[0].Columns.Contains("id") && Responsebet.Tables[0].Rows[0]["id"].ToString() == "1")
                    {
                        if (Responsecs != null && Responsecs.Tables != null && Responsecs.Tables.Count > 0 && Responsecs.Tables[0].Rows.Count > 0 && Responsecs.Tables[0].Columns.Contains("id") && Responsecs.Tables[0].Rows[0]["id"].ToString() == "1")
                        {
                            if (Responseparty3 != null && Responseparty3.Tables != null && Responseparty3.Tables.Count > 0 && Responseparty3.Tables[0].Rows.Count > 0)
                            {
                                var t2 = Responsecs.Tables[2].AsEnumerable()
                            .Select(x => new
                            {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                            }).Concat(Responsebet.Tables[2].AsEnumerable()
                            .Select(x => new
                            {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                            })).Concat(Responseparty3.Tables[0].AsEnumerable()
                            .Select(x => new
                            {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                            })).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();

                                var t1 = new
                                {
                                    ope = Convert.ToDouble(Responsecs.Tables[1].Rows[0]["opening"]) + Convert.ToDouble(Responsebet.Tables[1].Rows[0]["opening"])
                                };
                                return Return200("success", new { t1 = t1, t2 = t2 });
                            }
                            else
                            {
                                var t2 = Responsecs.Tables[2].AsEnumerable()
                            .Select(x => new
                            {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                            }).Concat(Responsebet.Tables[2].AsEnumerable()
                            .Select(x => new
                            {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                            })).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();
                                var t1 = new
                                {
                                    ope = Convert.ToDouble(Responsecs.Tables[1].Rows[0]["opening"]) + Convert.ToDouble(Responsebet.Tables[1].Rows[0]["opening"])
                                };
                                return Return200("success", new { t1 = t1, t2 = t2 });
                            }

                        }
                    }
                    if (Responsebet != null && Responsebet.Tables != null && Responsebet.Tables.Count > 0 && Responsebet.Tables[0].Rows.Count > 0 && Responsebet.Tables[0].Columns.Contains("id") && Responsebet.Tables[0].Rows[0]["id"].ToString() == "1")
                    {
                        if (Responseparty3 != null && Responseparty3.Tables != null && Responseparty3.Tables.Count > 0 && Responseparty3.Tables[0].Rows.Count > 0)
                        {
                            var t2 = Responsebet.Tables[2].AsEnumerable()
                        .Select(x => new
                        {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                            gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                            mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                            amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                            rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                            edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                            rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                            dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                            gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                        }).Concat(Responseparty3.Tables[0].AsEnumerable()
                            .Select(x => new
                            {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                            })).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();
                            var t1 = new
                            {
                                ope = Convert.ToDouble(Responsebet.Tables[1].Rows[0]["opening"])
                            };
                            return Return200("success", new { t1 = t1, t2 = t2 });
                        }
                        else
                        {
                            var t2 = Responsebet.Tables[2].AsEnumerable()
                        .Select(x => new
                        {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                            gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                            mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                            amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                            rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                            edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                            rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                            dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                            gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                        }).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();
                            var t1 = new
                            {
                                ope = Convert.ToDouble(Responsebet.Tables[1].Rows[0]["opening"])
                            };
                            return Return200("success", new { t1 = t1, t2 = t2 });
                        }

                    }
                    if (Responsecs != null && Responsecs.Tables != null && Responsecs.Tables.Count > 0 && Responsecs.Tables[0].Rows.Count > 0 && Responsecs.Tables[0].Columns.Contains("id") && Responsecs.Tables[0].Rows[0]["id"].ToString() == "1")
                    {
                        if (Responseparty3 != null && Responseparty3.Tables != null && Responseparty3.Tables.Count > 0 && Responseparty3.Tables[0].Rows.Count > 0)
                        {
                            var t2 = Responsecs.Tables[2].AsEnumerable()
                         .Select(x => new
                         {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                             gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                             mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                             amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                             rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                             edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                             rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                             dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                             gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                         }).Concat(Responseparty3.Tables[0].AsEnumerable()
                            .Select(x => new
                            {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                                gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                                mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                                rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                                edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                                rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                                dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                                gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                            })).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();
                            var t1 = new
                            {
                                ope = Convert.ToDouble(Responsecs.Tables[1].Rows[0]["opening"])
                            };
                            return Return200("success", new { t1 = t1, t2 = t2 });
                        }
                        else
                        {
                            var t2 = Responsecs.Tables[2].AsEnumerable()
                         .Select(x => new
                         {//select 0 as GameId,0 as MarketId, 0 AS Amount ,'' AS Remark,'' as EntryDate,0 as ReportPopup,'s' as dataserver
                             gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                             mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                             amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                             rem = string.IsNullOrEmpty(x["Remark"].ToString()) ? "" : x["Remark"],
                             edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                             rpopup = string.IsNullOrEmpty(x["ReportPopup"].ToString()) ? false : Convert.ToBoolean(x["ReportPopup"]),
                             dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"],
                             gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                         }).OrderBy(l => Convert.ToDateTime(l.edt)).ToList();
                            var t1 = new
                            {
                                ope = Convert.ToDouble(Responsecs.Tables[1].Rows[0]["opening"])
                            };
                            return Return200("success", new { t1 = t1, t2 = t2 });
                        }
                    }
                }
                return Return300("No record found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("AccountStatement : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(accountStatement));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("accstatepopup")]
        public Object AccStatePopup([FromBody] AccStatePopup accStatePopup)
        {
            try
            {
                ErrorLog.WriteLogAll("AccStatePopup", JsonConvert.SerializeObject(accStatePopup));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);
                if (!res)
                    return Return300("token not valid.");
                accStatePopup.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.AccStatePopup(accStatePopup);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("AccStatePopup", JsonConvert.SerializeObject(accStatePopup), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                if (accStatePopup.dtype.ToLower() == "ss")
                {
                    var t1 = new
                    {//EventType,CommName,EventName,MarketName,GameStartTime,WinNation,Fancyname
                        etype = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["EventType"].ToString()) ? "" : Response.Tables[0].Rows[0]["EventType"].ToString(),
                        cname = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["CommName"].ToString()) ? "" : Response.Tables[0].Rows[0]["CommName"].ToString(),
                        ename = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["EventName"].ToString()) ? "" : Response.Tables[0].Rows[0]["EventName"].ToString(),
                        mname = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["MarketName"].ToString()) ? "" : Response.Tables[0].Rows[0]["MarketName"].ToString(),
                        stime = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["GameStartTime"].ToString()) ? "" : Response.Tables[0].Rows[0]["GameStartTime"].ToString(),
                        winnat = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["WinNation"].ToString()) ? "" : Response.Tables[0].Rows[0]["WinNation"].ToString(),
                        fname = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["Fancyname"].ToString()) ? "" : Response.Tables[0].Rows[0]["Fancyname"].ToString(),
                    };
                    var t2 = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                     .Select(x => new
                     {//nation,userrate,bettype,amount,winloss,PlaceDate
                         nat = string.IsNullOrEmpty(x["nation"].ToString()) ? "" : x["nation"],
                         urate = string.IsNullOrEmpty(x["userrate"].ToString()) ? 0 : x["userrate"],
                         btype = string.IsNullOrEmpty(x["bettype"].ToString()) ? "" : x["bettype"].ToString().ToLower(),
                         amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                         wl = string.IsNullOrEmpty(x["winloss"].ToString()) ? 0 : x["winloss"],
                         bhav = string.IsNullOrEmpty(x["bhav"].ToString()) ? 0 : x["bhav"],
                         pdt = string.IsNullOrEmpty(x["PlaceDate"].ToString()) ? "" : x["PlaceDate"].ToString(),
                         ip = string.IsNullOrEmpty(x["IpAddress"].ToString()) ? "" : x["IpAddress"].ToString(),
                         bdetail = string.IsNullOrEmpty(x["BrowserDetail"].ToString()) ? "" : x["BrowserDetail"].ToString(),
                         match = string.IsNullOrEmpty(x["IsMatched"].ToString()) ? false : x["IsMatched"]
                     }).ToList();
                    return Return200("success", new { t1 = t1, t2 = t2 });
                }
                if (accStatePopup.dtype.ToLower() == "cs")
                {
                    var t1 = new
                    {//gm.eventname,gm.markettime,gm.WinNation,tr.ResultDesc,tr.Cards
                        rid = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["marketid"].ToString()) ? "" : Response.Tables[0].Rows[0]["marketid"].ToString(),
                        mtime = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["markettime"].ToString()) ? "" : Response.Tables[0].Rows[0]["markettime"].ToString(),
                        ename = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["eventname"].ToString()) ? "" : Response.Tables[0].Rows[0]["eventname"].ToString(),
                        rdesc = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["ResultDesc"].ToString()) ? "" : Response.Tables[0].Rows[0]["ResultDesc"],
                        card = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["Cards"].ToString()) ? "" : Response.Tables[0].Rows[0]["Cards"].ToString(),
                        winnat = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["WinNation"].ToString()) ? "" : Response.Tables[0].Rows[0]["WinNation"].ToString(),
                        win = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["WinSection"].ToString()) ? "" : Response.Tables[0].Rows[0]["WinSection"].ToString(),
                    };
                    var t2 = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                     .Select(x => new
                     {//nation,userrate,bettype,amount,winloss,placedate
                         nat = string.IsNullOrEmpty(x["nation"].ToString()) ? "" : x["nation"],
                         urate = string.IsNullOrEmpty(x["userrate"].ToString()) ? 0 : x["userrate"],
                         btype = string.IsNullOrEmpty(x["bettype"].ToString()) ? "" : x["bettype"].ToString().ToLower(),
                         amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                         wl = string.IsNullOrEmpty(x["winloss"].ToString()) ? 0 : x["winloss"],
                         ip = string.IsNullOrEmpty(x["IpAddress"].ToString()) ? "" : x["IpAddress"].ToString(),
                         bdetail = string.IsNullOrEmpty(x["BrowserDetail"].ToString()) ? "" : x["BrowserDetail"].ToString(),
                         bhav = string.IsNullOrEmpty(x["bhav"].ToString()) ? 0 : x["bhav"],
                         pdt = string.IsNullOrEmpty(x["PlaceDate"].ToString()) ? "" : x["PlaceDate"].ToString(),
                         natjson = string.IsNullOrEmpty(x["Nationjson"].ToString()) ? null : JToken.Parse(x["Nationjson"].ToString()),
                         match = string.IsNullOrEmpty(x["IsMatched"].ToString()) ? false : x["IsMatched"]
                     }).ToList();
                    return Return200("success", new { t1 = t1, t2 = t2 });
                }
                if (accStatePopup.dtype.ToLower() == "ds")
                {
                    var t1 = new
                    {//Select  GameName,f.ECategory,f.EventName,f.Team1,f.Team2
                        gname = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["GameName"].ToString()) ? "" : Response.Tables[0].Rows[0]["GameName"].ToString(),
                        ecat = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["ECategory"].ToString()) ? "" : Response.Tables[0].Rows[0]["ECategory"].ToString(),
                        tm1 = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["Team1"].ToString()) ? "" : Response.Tables[0].Rows[0]["Team1"].ToString(),
                        tm2 = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["Team2"].ToString()) ? "" : Response.Tables[0].Rows[0]["Team2"].ToString(),
                        ename = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["EventName"].ToString()) ? "" : Response.Tables[0].Rows[0]["EventName"].ToString(),
                        stime = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["StartDate"].ToString()) ? "" : Response.Tables[0].Rows[0]["StartDate"].ToString(),
                    };
                    var t2 = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                     .Select(x => new
                     {//nation,userrate,bettype,amount,winloss,PlaceDate
                         btid = string.IsNullOrEmpty(x["BetId"].ToString()) ? 0 : x["BetId"],
                         gsubid = string.IsNullOrEmpty(x["GSubId"].ToString()) ? 0 : x["GSubId"],
                         gsubname = string.IsNullOrEmpty(x["GameSubName"].ToString()) ? "" : x["GameSubName"].ToString().ToUpper(),
                         bamt = string.IsNullOrEmpty(x["BetAmount"].ToString()) ? 0 : x["BetAmount"],
                         ufrist = string.IsNullOrEmpty(x["UserFirst"].ToString()) ? false : x["UserFirst"],
                         upoint = string.IsNullOrEmpty(x["UserPoint"].ToString()) ? 0 : x["UserPoint"],
                         apoint = string.IsNullOrEmpty(x["AdminPoinnt"].ToString()) ? 0 : x["AdminPoinnt"],
                         ip = string.IsNullOrEmpty(x["IpAddress"].ToString()) ? "" : x["IpAddress"].ToString(),
                         bdetail = string.IsNullOrEmpty(x["BrowserDetail"].ToString()) ? "" : x["BrowserDetail"].ToString(),
                         winamt = string.IsNullOrEmpty(x["WinAmount"].ToString()) ? 0 : x["WinAmount"],
                         maxwinloss = string.IsNullOrEmpty(x["maxwinloss"].ToString()) ? 0 : x["maxwinloss"]
                     }).ToList();

                    return Return200("success", new { t1 = t1, t2 = t2 });
                }
                if (accStatePopup.dtype.ToLower() == "d1s")
                {
                    var t1 = new
                    {//GameName,Starttime,EcName, EventName
                        gname = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["GameName"].ToString()) ? "" : Response.Tables[0].Rows[0]["GameName"].ToString(),
                        stime = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["Starttime"].ToString()) ? "" : Response.Tables[0].Rows[0]["Starttime"].ToString(),
                        ecname = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["EcName"].ToString()) ? "" : Response.Tables[0].Rows[0]["EcName"].ToString(),
                        ename = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["EventName"].ToString()) ? "" : Response.Tables[0].Rows[0]["EventName"].ToString(),
                    };
                    var t2 = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                     .Select(x => new
                     {// GameName,Starttime,EcName, EventName
                         uconid = string.IsNullOrEmpty(x["UContestId"].ToString()) ? 0 : x["UContestId"],
                         conid = string.IsNullOrEmpty(x["ContestId"].ToString()) ? 0 : x["ContestId"],
                         conname = string.IsNullOrEmpty(x["ContestName"].ToString()) ? "" : x["ContestName"].ToString().ToUpper(),
                         utid = string.IsNullOrEmpty(x["UTeamId"].ToString()) ? 0 : x["UTeamId"],
                         tname = string.IsNullOrEmpty(x["Teamname"].ToString()) ? 0 : x["Teamname"],
                         amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                         point = string.IsNullOrEmpty(x["Points"].ToString()) ? 0 : x["Points"],
                         winamt = string.IsNullOrEmpty(x["WinAmount"].ToString()) ? 0 : x["WinAmount"],
                         conwin = string.IsNullOrEmpty(x["ContestWin"].ToString()) ? false : x["ContestWin"],
                         ip = string.IsNullOrEmpty(x["IpAddress"].ToString()) ? "" : x["IpAddress"].ToString(),
                         bdetail = string.IsNullOrEmpty(x["BrowserDetail"].ToString()) ? "" : x["BrowserDetail"].ToString(),
                         rank = string.IsNullOrEmpty(x["Rank"].ToString()) ? 0 : x["Rank"]
                     }).ToList();

                    return Return200("success", new { t1 = t1, t2 = t2 });
                }
                return Return300("No record found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("AccStatePopup : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(accStatePopup));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("accdababet")]
        public HttpResponseMessage AccDabaBet([FromBody] AccDabaBet accDabaBet)
        {
            try
            {
                ErrorLog.WriteLogAll("AccDabaBet", JsonConvert.SerializeObject(accDabaBet));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                accDabaBet.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.AccDabaBet(accDabaBet);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("AccDabaBet", JsonConvert.SerializeObject(accDabaBet), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                 .Select(x => new
                 {// p.BetId,b.GPlayerId,pl.PlayerName ,iif(b.Userid = 0,'Computer','Player') as Selectedby,b.PointRun
                  //btid = x["BetId"],
                  //gpid = x["GPlayerId"],
                  //pname = x["PlayerName"].ToString(),
                  //selectby = x["Selectedby"],
                  //prun = x["PointRun"],
                     prun = string.IsNullOrEmpty(x["PointRun"].ToString()) ? "" : x["PointRun"].ToString(),
                     pname = string.IsNullOrEmpty(x["PlayerName"].ToString()) ? "" : x["PlayerName"].ToString(),
                     ufrist = string.IsNullOrEmpty(x["UFirst"].ToString()) ? "" : x["UFirst"].ToString(),
                 }).ToList();
                var t2 = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                .Select(x => new
                {// p.BetId,b.GPlayerId,pl.PlayerName ,iif(b.Userid = 0,'Computer','Player') as Selectedby,b.PointRun
                 //btid = x["BetId"],
                 //gpid = x["GPlayerId"],
                 //pname = x["PlayerName"].ToString(),
                 //selectby = x["Selectedby"],
                 //prun = x["PointRun"],
                    prun = string.IsNullOrEmpty(x["PointRun"].ToString()) ? "" : x["PointRun"].ToString(),
                    pname = string.IsNullOrEmpty(x["PlayerName"].ToString()) ? "" : x["PlayerName"].ToString(),
                    ufrist = string.IsNullOrEmpty(x["UFirst"].ToString()) ? "" : x["UFirst"].ToString(),
                }).ToList();
                return Return200("success", new { t1 = t1, t2 = t2 });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("AccDabaBet : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(accDabaBet));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("accdreambet")]
        public HttpResponseMessage AccDreamBet([FromBody] AccDabaBet accDabaBet)
        {
            try
            {
                ErrorLog.WriteLogAll("AccDreamBet", JsonConvert.SerializeObject(accDabaBet));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                accDabaBet.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.AccDreamBet(accDabaBet);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("AccDreamBet", JsonConvert.SerializeObject(accDabaBet), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                 .Select(x => new
                 {// p.PId,PlayerName,p.Points,IsCaption,IsVC,Statring11
                     pid = string.IsNullOrEmpty(x["PId"].ToString()) ? 0 : x["PId"],
                     pname = string.IsNullOrEmpty(x["PlayerName"].ToString()) ? "" : x["PlayerName"].ToString(),
                     point = string.IsNullOrEmpty(x["Points"].ToString()) ? 0 : x["Points"],
                     iscap = string.IsNullOrEmpty(x["IsCaption"].ToString()) ? false : x["IsCaption"],
                     isvc = string.IsNullOrEmpty(x["IsVC"].ToString()) ? false : x["IsVC"],
                     s11 = string.IsNullOrEmpty(x["Statring11"].ToString()) ? false : x["Statring11"],
                 }).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("AccDreamBet : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(accDabaBet));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("autoconupdate")]
        public HttpResponseMessage AutoconUpdate([FromBody] AutoconUpdate autoconUpdate)
        {
            try
            {
                ErrorLog.WriteLogAll("AutoconUpdate", JsonConvert.SerializeObject(autoconUpdate));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                autoconUpdate.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.AutoconUpdate(autoconUpdate);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("AutoconUpdate", JsonConvert.SerializeObject(autoconUpdate), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("AutoconUpdate : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(autoconUpdate));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("othercasino")]
        public HttpResponseMessage OtherCasino([FromBody] OtherCasino otherCasino)
        {
            try
            {
                ErrorLog.WriteLogAll("OtherCasino", JsonConvert.SerializeObject(otherCasino));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.OtherCasino(otherCasino);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("OtherCasino", JsonConvert.SerializeObject(otherCasino), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//[gameid],tm.[gamename],tm.[imagepath],tm.[srno],gm.[tabnumber]
                        cid = string.IsNullOrEmpty(x["cmid"].ToString()) ? 0 : x["cmid"],
                        gid = string.IsNullOrEmpty(x["gmid"].ToString()) ? 0 : x["gmid"],
                        gmid = string.IsNullOrEmpty(x["gameid"].ToString()) ? 0 : x["gameid"],
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"].ToString(),
                        imgpath = string.IsNullOrEmpty(x["imagepath"].ToString()) ? "" : x["imagepath"],
                        sno = string.IsNullOrEmpty(x["srno"].ToString()) ? 0 : x["srno"],
                        tabno = string.IsNullOrEmpty(x["tabnumber"].ToString()) ? 0 : x["tabnumber"]
                    }).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("OtherCasino : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(otherCasino));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("fancybook")]
        public HttpResponseMessage FancyBook([FromBody] FancyBook fancyBook)
        {
            try
            {
                ErrorLog.WriteLogAll("FancyBook", JsonConvert.SerializeObject(fancyBook));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                fancyBook.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));


                if (!string.IsNullOrEmpty(fancyBook.type))
                {
                    if (fancyBook.type.ToLower() == "fancy")
                    {
                        var Response = _dimfrontservice.FancyBook(fancyBook);

                        if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                        {
                            ErrorLog.WriteLog("FancyBook", JsonConvert.SerializeObject(fancyBook), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                            return Return400("Data Error");
                        }
                        if (Response == null || Response.Tables.Count <= 0)
                            return Return300("No Data Found.");
                        if (Response.Tables[0].Rows.Count <= 0)
                            return Return300("No Record Found.");
                        if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                            return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                        var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                                            .Select(x => new
                                            {//Run, Amount
                                                run = string.IsNullOrEmpty(x["Run"].ToString()) ? 0 : x["Run"],
                                                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"]
                                            }).OrderBy(o => o.run).ToList();
                        return Return200("success", t1);
                    }
                    if (fancyBook.type.ToLower() == "khado")
                    {
                        var Response = _dimfrontservice.KhadoBook(fancyBook);

                        if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                        {
                            ErrorLog.WriteLog("KhadoBook", JsonConvert.SerializeObject(fancyBook), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                            return Return400("Data Error");
                        }
                        if (Response == null || Response.Tables.Count <= 0)
                            return Return300("No Data Found.");
                        if (Response.Tables[0].Rows.Count <= 0)
                            return Return300("No Record Found.");
                        if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                            return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                        var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                                            .Select(x => new
                                            {//Run, Amount
                                                run = string.IsNullOrEmpty(x["Run"].ToString()) ? 0 : x["Run"],
                                                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"]
                                            }).OrderBy(o => o.run).ToList();
                        return Return200("success", t1);
                    }
                    if (fancyBook.type.ToLower() == "meter")
                    {
                        var Response = _dimfrontservice.MeterBook(fancyBook);

                        if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                        {
                            ErrorLog.WriteLog("MeterBook", JsonConvert.SerializeObject(fancyBook), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                            return Return400("Data Error");
                        }
                        if (Response == null || Response.Tables.Count <= 0)
                            return Return300("No Data Found.");
                        if (Response.Tables[0].Rows.Count <= 0)
                            return Return300("No Record Found.");
                        if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                            return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                        var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                                            .Select(x => new
                                            {//Run, Amount
                                                run = string.IsNullOrEmpty(x["Run"].ToString()) ? 0 : x["Run"],
                                                amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"]
                                            }).OrderBy(o => o.run).ToList();
                        return Return200("success", t1);
                    }
                }
                return Return300("No record found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("FancyBook : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(fancyBook));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("marketanalysis")]
        public HttpResponseMessage MarketAnalysis()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));

                var Response = _dimfrontservice.MarketAnalysis(uid);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("MarketAnalysis", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                //if (Response.Tables[0].Rows.Count <= 0)
                //    return Return300("No Record Found.");
                //if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                //    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                                    .Select(x => new
                                    {//r.Gameid,p.GameType,g.GameStartTime, r.MarketId,r.MarketName,CountSoda
                                        gmid = string.IsNullOrEmpty(x["Gameid"].ToString()) ? 0 : x["Gameid"],
                                        stime = string.IsNullOrEmpty(x["GameStartTime"].ToString()) ? "" : x["GameStartTime"],
                                        mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? 0 : x["MarketId"],
                                        mname = string.IsNullOrEmpty(x["MarketName"].ToString()) ? "" : x["MarketName"],
                                        cntsoda = string.IsNullOrEmpty(x["CountSoda"].ToString()) ? 0 : x["CountSoda"],
                                        etname = string.IsNullOrEmpty(x["EventType"].ToString()) ? "" : x["EventType"].ToString(),
                                        etid = string.IsNullOrEmpty(x["EventTypeId"].ToString()) ? 0 : x["EventTypeId"],
                                        gname = string.IsNullOrEmpty(x["EventName"].ToString()) ? "" : x["EventName"].ToString(),
                                        gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower(),
                                        iscc = string.IsNullOrEmpty(x["isCricketcard"].ToString()) ? 0 : x["isCricketcard"],
                                        shlight = string.IsNullOrEmpty(x["ShowHightlight"].ToString()) ? 0 : x["ShowHightlight"]
                                    }).GroupBy(r1 => new
                                    {
                                        r1.etid,
                                        r1.etname,
                                        r1.gname,
                                        r1.gmid,
                                        r1.stime,
                                        r1.iscc,
                                        r1.shlight,
                                    }, (key1, group1) => new
                                    {
                                        key1.etid,
                                        key1.etname,
                                        key1.gname,
                                        key1.gmid,
                                        stime = key1.stime.ToString(),
                                        key1.iscc,
                                        key1.shlight,
                                        mdata = group1.Select(y => new
                                        {
                                            y.mid,
                                            y.mname,
                                            y.cntsoda,
                                            y.gtype,
                                        })
                                    }).OrderByDescending(p => Convert.ToDateTime(p.stime));

                var t2 = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                                    .Select(x => new
                                    {//r.Gameid,p.GameType,g.GameStartTime, r.MarketId,r.MarketName,CountSoda
                                        gmid = string.IsNullOrEmpty(x["Gameid"].ToString()) ? 0 : x["Gameid"],
                                        stime = string.IsNullOrEmpty(x["GameStartTime"].ToString()) ? "" : x["GameStartTime"],
                                        mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? 0 : x["MarketId"],
                                        mname = string.IsNullOrEmpty(x["MarketName"].ToString()) ? "" : x["MarketName"],
                                        cntsoda = string.IsNullOrEmpty(x["CountSoda"].ToString()) ? 0 : x["CountSoda"],
                                        etname = string.IsNullOrEmpty(x["EventType"].ToString()) ? "" : x["EventType"].ToString(),
                                        etid = string.IsNullOrEmpty(x["EventTypeId"].ToString()) ? 0 : x["EventTypeId"],
                                        gname = string.IsNullOrEmpty(x["EventName"].ToString()) ? "" : x["EventName"].ToString(),
                                        gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower(),
                                        iscc = string.IsNullOrEmpty(x["isCricketcard"].ToString()) ? 0 : x["isCricketcard"],
                                        shlight = string.IsNullOrEmpty(x["ShowHightlight"].ToString()) ? 0 : x["ShowHightlight"]
                                    }).GroupBy(r1 => new
                                    {
                                        r1.etid,
                                        r1.etname,
                                        r1.gname,
                                        r1.gmid,
                                        r1.stime,
                                        r1.iscc,
                                        r1.shlight,
                                    }, (key1, group1) => new
                                    {
                                        key1.etid,
                                        key1.etname,
                                        key1.gname,
                                        key1.gmid,
                                        stime = key1.stime.ToString(),
                                        key1.iscc,
                                        key1.shlight,
                                        mdata = group1.Select(y => new
                                        {
                                            y.mid,
                                            y.mname,
                                            y.cntsoda,
                                            y.gtype,
                                        })
                                    }).OrderByDescending(p => Convert.ToDateTime(p.stime));

                var t3 = Response.Tables[2].Rows.Count <= 0 ? null : Response.Tables[2].AsEnumerable()
                                    .Select(x => new
                                    {//r.Gameid,p.GameType,g.GameStartTime, r.MarketId,r.MarketName,CountSoda
                                        gmid = string.IsNullOrEmpty(x["Gameid"].ToString()) ? 0 : x["Gameid"],
                                        stime = string.IsNullOrEmpty(x["GameStartTime"].ToString()) ? "" : x["GameStartTime"],
                                        mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? 0 : x["MarketId"],
                                        mname = string.IsNullOrEmpty(x["MarketName"].ToString()) ? "" : x["MarketName"],
                                        cntsoda = string.IsNullOrEmpty(x["CountSoda"].ToString()) ? 0 : x["CountSoda"],
                                        etname = string.IsNullOrEmpty(x["EventType"].ToString()) ? "" : x["EventType"].ToString(),
                                        etid = string.IsNullOrEmpty(x["EventTypeId"].ToString()) ? 0 : x["EventTypeId"],
                                        gname = string.IsNullOrEmpty(x["EventName"].ToString()) ? "" : x["EventName"].ToString(),
                                        gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower(),
                                        iscc = string.IsNullOrEmpty(x["isCricketcard"].ToString()) ? 0 : x["isCricketcard"],
                                        shlight = string.IsNullOrEmpty(x["ShowHightlight"].ToString()) ? 0 : x["ShowHightlight"]
                                    }).GroupBy(r1 => new
                                    {
                                        r1.etid,
                                        r1.etname,
                                        r1.gname,
                                        r1.gmid,
                                        r1.stime,
                                        r1.iscc,
                                        r1.shlight,
                                    }, (key1, group1) => new
                                    {
                                        key1.etid,
                                        key1.etname,
                                        key1.gname,
                                        key1.gmid,
                                        stime = key1.stime.ToString(),
                                        key1.iscc,
                                        key1.shlight,
                                        mdata = group1.Select(y => new
                                        {
                                            y.mid,
                                            y.mname,
                                            y.cntsoda,
                                            y.gtype,
                                        })
                                    }).OrderByDescending(p => Convert.ToDateTime(p.stime));
                return Return200("success", new { t1 = t1, t2 = t2, t3 = t3 });

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("MarketAnalysis : " + ex.ToString());
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getm")]
        public Object GetM([FromBody] GetM getM)
        {
            try
            {
                ErrorLog.WriteLogAll("GetM", JsonConvert.SerializeObject(getM));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    var par = "etid=" + getM.etid;
                    var resp = HttpHelper.Post(ConfigItems.RedisUrl + ApiEndpoint.getm, par, "application/x-www-form-urlencoded", "POST");
                    var obj = JsonConvert.DeserializeObject<GetMRes>(resp);
                    return obj;
                }
                return Return300("No record found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetM : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(getM));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("gameser")]
        public HttpResponseMessage GameSer([FromBody] GameSer gameSer)
        {
            try
            {
                ErrorLog.WriteLogAll("GameSer", JsonConvert.SerializeObject(gameSer));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.GameSer(gameSer);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GameSer", JsonConvert.SerializeObject(gameSer), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//g.GameId,g.EventTypeId,g.EventType,g.EventName,g.gameStartTime
                        gmid = string.IsNullOrEmpty(x["GameId"].ToString()) ? 0 : x["GameId"],
                        etid = string.IsNullOrEmpty(x["EventTypeId"].ToString()) ? 0 : x["EventTypeId"],
                        etype = string.IsNullOrEmpty(x["EventType"].ToString()) ? "" : x["EventType"].ToString(),
                        ename = string.IsNullOrEmpty(x["EventName"].ToString()) ? "" : x["EventName"].ToString(),
                        stime = string.IsNullOrEmpty(x["gameStartTime"].ToString()) ? "" : x["gameStartTime"].ToString()
                    }).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GameSer : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(gameSer));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("history")]
        public HttpResponseMessage History([FromBody] History history)
        {
            try
            {
                ErrorLog.WriteLogAll("History", JsonConvert.SerializeObject(history));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                history.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.History(history);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("History", JsonConvert.SerializeObject(history), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                if (history.type.ToString().ToLower() == "endlogin")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                                        .Select(x => new
                                        {//[username],[entrydate],[ip]
                                            uname = string.IsNullOrEmpty(x["username"].ToString()) ? "" : x["username"].ToString(),
                                            edt = string.IsNullOrEmpty(x["entrydate"].ToString()) ? "" : x["entrydate"].ToString(),
                                            ip = string.IsNullOrEmpty(x["ip"].ToString()) ? "" : x["ip"].ToString()
                                        }).ToList();
                    return Return200("success", t1);
                }
                else if (history.type.ToString().ToLower() == "password")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                                                            .Select(x => new
                                                            {// UserName,[entrydate],[ip],[browserdetail]
                                                                uname = string.IsNullOrEmpty(x["username"].ToString()) ? "" : x["username"].ToString(),
                                                                edt = string.IsNullOrEmpty(x["entrydate"].ToString()) ? "" : x["entrydate"].ToString(),
                                                                ip = string.IsNullOrEmpty(x["ip"].ToString()) ? "" : x["ip"].ToString(),
                                                                bdetail = string.IsNullOrEmpty(x["browserdetail"].ToString()) ? "" : x["browserdetail"].ToString()
                                                            }).ToList();
                    return Return200("success", t1);
                }
                return Return300("No record found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("History : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(history));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("tvdata")]
        public HttpResponseMessage Tvata([FromBody] Tvata tvata)
        {
            try
            {
                ErrorLog.WriteLogAll("Tvata", JsonConvert.SerializeObject(tvata));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Tvata(tvata);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Tvata", JsonConvert.SerializeObject(tvata), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//top 1 1 as ID,@myip as Ipaddress,[portno],[Camstring],[sslflag],[porttype],[tvtype]
                        id = string.IsNullOrEmpty(x["ID"].ToString()) ? 0 : x["ID"],
                        ip = string.IsNullOrEmpty(x["Ipaddress"].ToString()) ? 0 : x["Ipaddress"],
                        pno = string.IsNullOrEmpty(x["portno"].ToString()) ? 0 : x["portno"],
                        cam = string.IsNullOrEmpty(x["Camstring"].ToString()) ? "" : x["Camstring"],
                        ssl = string.IsNullOrEmpty(x["sslflag"].ToString()) ? "" : x["sslflag"],
                        ptype = string.IsNullOrEmpty(x["porttype"].ToString()) ? "" : x["porttype"],
                        ttype = string.IsNullOrEmpty(x["tvtype"].ToString()) ? "" : x["tvtype"],
                    }).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Tvata : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(tvata));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("tvcsdata")]
        public HttpResponseMessage TvCsData([FromBody] TvCsData tvCsData)
        {
            try
            {
                ErrorLog.WriteLogAll("TvCsData", JsonConvert.SerializeObject(tvCsData));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.TvCsData(tvCsData);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("TvCsData", JsonConvert.SerializeObject(tvCsData), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {// ID,[ipaddress],[portno],[camstring],[sslflag],[porttype],[tvtype]
                        id = string.IsNullOrEmpty(x["ID"].ToString()) ? 0 : x["ID"],
                        ip = string.IsNullOrEmpty(x["Ipaddress"].ToString()) ? 0 : x["Ipaddress"],
                        pno = string.IsNullOrEmpty(x["portno"].ToString()) ? 0 : x["portno"],
                        cam = string.IsNullOrEmpty(x["Camstring"].ToString()) ? "" : x["Camstring"],
                        ssl = string.IsNullOrEmpty(x["sslflag"].ToString()) ? "" : x["sslflag"],
                        ptype = string.IsNullOrEmpty(x["porttype"].ToString()) ? "" : x["porttype"],
                        ttype = string.IsNullOrEmpty(x["tvtype"].ToString()) ? "" : x["tvtype"],
                    }).ToList();
                //if (t1 == null)
                //    return Return300("No Record Found.");
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("TvCsData : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(tvCsData));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("chkip")]
        public HttpResponseMessage Chkip([FromBody] Chkip chkip)
        {
            try
            {
                ErrorLog.WriteLogAll("Chkip", JsonConvert.SerializeObject(chkip));

                var IpResp = HttpHelper.Get(ConfigItems.IPUrl.Replace("[IP]", chkip.ipdemo));
                var res = JsonConvert.DeserializeObject<IPObj>(IpResp);
                ErrorLog.WriteLogAll("Chkip", IpResp);

                return Return200("Success", res);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Chkip : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(chkip));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginez")]
        public HttpResponseMessage LoginEZ([FromBody] EZLogin ez)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginEZ", JsonConvert.SerializeObject(ez));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                ez.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginEZ(ez);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginEZ", JsonConvert.SerializeObject(ez), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, "ezugi", "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginEZ1", JsonConvert.SerializeObject(ez), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = "EZ";

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginEZ2", JsonConvert.SerializeObject(ez), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    var t2 = new
                    {
                        url = Response1.Tables[1].Rows[0]["url"].ToString() + Response2.Tables[0].Rows[0]["token"].ToString() + "&openTable=" + ez.tid
                    };
                    return Return200("Success", t2);
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, "ezugi", "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginEZ3", JsonConvert.SerializeObject(ez), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = new
                {
                    url = Response3.Tables[1].Rows[0]["url"].ToString() + Response.Tables[0].Rows[0]["eztoken"].ToString() + "&openTable=" + ez.tid
                };
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginEZ : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(ez));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginss")]
        public HttpResponseMessage LoginSS([FromBody] SSLogin ss)
        {
            try
            {
                ErrorLog.WriteLogAll("SSLogin", JsonConvert.SerializeObject(ss));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                ss.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginSS(ss);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("SSLogin", JsonConvert.SerializeObject(ss), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, "ss", "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginSS1", JsonConvert.SerializeObject(ss), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = "SS";

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginSS2", JsonConvert.SerializeObject(ss), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }

                    string param2 = "uid=" + Response2.Tables[0].Rows[0]["userid"].ToString().ToLower() + "&curr=" + Response2.Tables[0].Rows[0]["currency"].ToString() + "&uname=" + Response2.Tables[0].Rows[0]["username"].ToString() + "&tkn=" + Response2.Tables[0].Rows[0]["token"].ToString() + "&gname=" + ss.gamename + "&tid=" + ss.tid + "&rurl=" + ss.rurl;
                    var Resp2 = HttpHelper.Post(ConfigItems.SSUrlApi, param2, "application/x-www-form-urlencoded", "Post", "");

                    var ClientRes1 = JsonConvert.DeserializeObject<CFUrlResp>(Resp2);

                    if (ClientRes1.status == 200)
                    {
                        var t2 = new
                        {
                            url = ClientRes1.data.url.ToString()
                        };
                        return Return200("Success", t2);
                    }
                    else
                        return Return300(ClientRes1.msg);

                    //var param1 = new
                    //{
                    //    request = new { type = "registration", username = Response2.Tables[0].Rows[0]["userid"].ToString(), currencyid = Response2.Tables[0].Rows[0]["currency"].ToString(), firstname = Response2.Tables[0].Rows[0]["username"].ToString(), lastname = "", mode = ConfigItems.SSMode }
                    //};

                    //var result1 = HttpHelper.Post(Response1.Tables[1].Rows[0]["url"].ToString() + "partner/SharedWalletIntegration", JsonConvert.SerializeObject(param1), "application/json", "POST");
                    //var ClientRes1 = JsonConvert.DeserializeObject<SSResp>(result1);

                    //if (ClientRes1.response.token != null && ClientRes1.response.token != "")
                    //{
                    //    var TblData1 = _dimfrontservice.updatetoken(ClientRes1.response.username, ClientRes1.response.token, Response2.Tables[0].Rows[0]["token"].ToString());

                    //    if (TblData1 != null && TblData1.Tables.Count > 0 && TblData1.Tables[TblData1.Tables.Count - 1].Rows.Count > 0 && TblData1.Tables[TblData1.Tables.Count - 1].Columns.Contains("id") && TblData1.Tables[TblData1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    //    {
                    //        ErrorLog.WriteLog("loginsstoken", JsonConvert.SerializeObject(ss), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    //        return Return400("Data Error");
                    //    }
                    //    if (TblData1 == null || TblData1.Tables.Count <= 0)
                    //        return Return300("No Data Found.");
                    //    if (TblData1.Tables[0].Rows.Count <= 0)
                    //        return Return300("No Record Found.");
                    //    if (TblData1.Tables[0].Columns.Contains("id") && TblData1.Tables[0].Rows[0]["id"].ToString() == "0")
                    //        return Return300(TblData1.Tables[0].Rows[0]["MSG"].ToString());

                    //    var t2 = new
                    //    {
                    //        url = Response1.Tables[1].Rows[0]["url"].ToString() + "signin/viewer/walletGameLogin.jsp?token=" + ClientRes1.response.token + "&lobby=false&lang=" + ConfigItems.SSLang + "&gameType=" + ss.gamename + "&tableid=" + ss.tid + "&betType=" + ConfigItems.SSBetType + "&reloadURL=" + ss.rurl
                    //    };
                    //    return Return200("Success", t2);
                    //}
                    //else
                    //{
                    //    return Return300(ClientRes1.response.errdesc);
                    //}
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, "ss", "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginSS3", JsonConvert.SerializeObject(ss), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                string param = "uid=" + Response.Tables[0].Rows[0]["userid"].ToString().ToLower() + "&curr=" + Response.Tables[0].Rows[0]["currency"].ToString() + "&uname=" + Response.Tables[0].Rows[0]["username"].ToString() + "&tkn=" + Response.Tables[0].Rows[0]["token"].ToString() + "&gname=" + ss.gamename + "&tid=" + ss.tid + "&rurl=" + ss.rurl;
                var Resp = HttpHelper.Post(ConfigItems.SSUrlApi, param, "application/x-www-form-urlencoded", "Post", "");
                var ClientRes = JsonConvert.DeserializeObject<CFUrlResp>(Resp);

                if (ClientRes.status == 200)
                {
                    var t1 = new
                    {
                        url = ClientRes.data.url.ToString()
                    };
                    return Return200("Success", t1);
                }
                else
                    return Return300(ClientRes.msg);
                //var param = new
                //{
                //    request = new { type = "registration", username = Response.Tables[0].Rows[0]["userid"].ToString(), currencyid = Response.Tables[0].Rows[0]["currency"].ToString(), firstname = Response.Tables[0].Rows[0]["username"].ToString(), lastname = "", mode = ConfigItems.SSMode }
                //};

                //var result = HttpHelper.Post(Response3.Tables[1].Rows[0]["url"].ToString() + "partner/SharedWalletIntegration", JsonConvert.SerializeObject(param), "application/json", "POST");
                //var ClientRes = JsonConvert.DeserializeObject<SSResp>(result);

                //if (ClientRes.response.token != null && ClientRes.response.token != "")
                //{
                //    var TblData1 = _dimfrontservice.updatetoken(ClientRes.response.username, ClientRes.response.token, Response.Tables[0].Rows[0]["token"].ToString());

                //    if (TblData1 != null && TblData1.Tables.Count > 0 && TblData1.Tables[TblData1.Tables.Count - 1].Rows.Count > 0 && TblData1.Tables[TblData1.Tables.Count - 1].Columns.Contains("id") && TblData1.Tables[TblData1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                //    {
                //        ErrorLog.WriteLog("logineztoken", JsonConvert.SerializeObject(ss), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                //        return Return400("Data Error");
                //    }
                //    if (TblData1 == null || TblData1.Tables.Count <= 0)
                //        return Return300("No Data Found.");
                //    if (TblData1.Tables[0].Rows.Count <= 0)
                //        return Return300("No Record Found.");
                //    if (TblData1.Tables[0].Columns.Contains("id") && TblData1.Tables[0].Rows[0]["id"].ToString() == "0")
                //        return Return300(TblData1.Tables[0].Rows[0]["MSG"].ToString());

                //    var t1 = new
                //    {
                //        url = Response3.Tables[1].Rows[0]["url"].ToString() + "signin/viewer/walletGameLogin.jsp?token=" + ClientRes.response.token + "&lobby=false&lang=" + ConfigItems.SSLang + "&gameType=" + ss.gamename + "&tableid=" + ss.tid + "&betType=" + ConfigItems.SSBetType + "&reloadURL=" + ss.rurl
                //    };
                //    return Return200("Success", t1);
                //}
                //return Return300("Something went wrong");

                //return Return200(Response.Tables[0].Rows[0]["MSG"].ToString(), new { t1 = t2 });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("SSLogin : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(ss));
                return Return400("Server Error");
            }
        }

        //[HttpPost]
        //[UserAuth, KeyFilter]
        //[Route("loginqt")]
        //public HttpResponseMessage LoginQT([FromBody] QTLogin qt)
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("LoginQT", JsonConvert.SerializeObject(qt));

        //        string u_id = string.Empty;
        //        var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
        //        if (header != null)
        //        {
        //            u_id = JwtTokenGenerator.GetSaGuid(header);
        //        }

        //        Guid uu_id;
        //        bool res = Guid.TryParse(u_id, out uu_id);

        //        if (!res)
        //            return Return300("token not valid.");

        //        qt.guid = uu_id;
        //        Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
        //        var Response = _dimfrontservice.LoginQT(qt);

        //        if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //        {
        //            ErrorLog.WriteLog("LoginQT", JsonConvert.SerializeObject(qt), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //            return Return400("Data Error");
        //        }
        //        if (Response == null || Response.Tables.Count <= 0)
        //            return Return300("No Data Found.");
        //        if (Response.Tables[0].Rows.Count <= 0)
        //            return Return300("No Record Found.");
        //        if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
        //        {
        //            var Response1 = _dimfrontservice.GetTPCSUserData(uid, "qt", "GetUserData");

        //            if (Response1 == null || Response1.Tables.Count <= 0)
        //                return Return300("No Data Found.");
        //            if (Response1.Tables[0].Rows.Count <= 0)
        //                return Return300("No Record Found.");
        //            if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
        //                return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

        //            TPCSUserMaster objtpcsum = new TPCSUserMaster();
        //            objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
        //            objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
        //            objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
        //            objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
        //            objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
        //            objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
        //            objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
        //            objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
        //            objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
        //            objtpcsum.cscode = "QT";

        //            var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);

        //            string param1 = "uid=" + Response2.Tables[0].Rows[0]["userid"].ToString().ToLower() + "&curr=" + Response2.Tables[0].Rows[0]["currency"].ToString() + "&dvc=" + qt.device + "&wsi=" + Response2.Tables[0].Rows[0]["token"].ToString();
        //            var Resp1 = HttpHelper.Post(ConfigItems.QTUrlApi, param1, "application/x-www-form-urlencoded", "Post", "");

        //            var ClientRes3 = JsonConvert.DeserializeObject<CFUrlResp>(Resp1);

        //            if (ClientRes3.status == 200)
        //            {
        //                var t1 = new
        //                {
        //                    url = ClientRes3.data.url.ToString()
        //                    //token = ClientRes.access_token.ToString()
        //                };
        //                return Return200("Success", t1);
        //            }
        //            else
        //                Return300(ClientRes3.msg);


        //            //var param2 = new { grant_type = "password", response_type = "token", username = "api_diamond", password = "df08fa72" };

        //            //var result2 = HttpHelper.Post1(Response1.Tables[1].Rows[0]["url"].ToString() + "v1/auth/token" + "?grant_type=password&response_type=token&username=" + ConfigItems.QTUser + "&password=" + ConfigItems.QTPass, "", "application/json", "POST");

        //            //if ((int)result2.StatusCode == 200)
        //            //{
        //            //    var Resp = new StreamReader(result2.GetResponseStream()).ReadToEnd();

        //            //    var ClientRes = JsonConvert.DeserializeObject<QTLoginResp>(Resp);



        //            //    //var param1 = new { playerId = Response2.Tables[0].Rows[0]["userid"].ToString().ToLower(), currency = Response2.Tables[0].Rows[0]["currency"].ToString(), country = ConfigItems.QTCountry, lang = ConfigItems.QTLang, mode = ConfigItems.QTMode, device = qt.device, walletSessionId = Response2.Tables[0].Rows[0]["token"].ToString() };

        //            //    ////var result1 = HttpHelper.Post1(Response1.Tables[1].Rows[0]["url"].ToString() + "v1/games/" + qt.gamename + "/launch-url", JsonConvert.SerializeObject(param1), "application/json", "POST", ClientRes.access_token.ToString());
        //            //    //var result1 = HttpHelper.Post1(Response1.Tables[1].Rows[0]["url"].ToString() + "v1/games/lobby-url", JsonConvert.SerializeObject(param1), "application/json", "POST", ClientRes.access_token.ToString());
        //            //    //if ((int)result1.StatusCode == 200)
        //            //    //{
        //            //    //    var Resp1 = new StreamReader(result1.GetResponseStream()).ReadToEnd();
        //            //    //    var ClientRes3 = JsonConvert.DeserializeObject<QTLoginResp1>(Resp1);

        //            //    //    var t1 = new
        //            //    //    {
        //            //    //        url = ClientRes3.url.ToString()
        //            //    //        //token = ClientRes.access_token.ToString()
        //            //    //    };
        //            //    //    return Return200("Success", t1);
        //            //    //}
        //            //    //else
        //            //    //{
        //            //    //    var EC = GetHttpError((int)result1.StatusCode);
        //            //    //    return new ObjectResult(new { status = result2.StatusCode, code = EC.Item1, message = EC.Item2 });
        //            //    //}
        //            //}
        //            //else
        //            //{
        //            //    var EC = GetHttpError((int)result2.StatusCode);
        //            //    return new ObjectResult(new { status = result2.StatusCode, code = EC.Item1, message = EC.Item2 });
        //            //}
        //        }
        //        else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
        //        {
        //            return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
        //        }

        //        var Response3 = _dimfrontservice.GetTPCSUserData(uid, "qt", "ExistUserData");

        //        if (Response3 == null || Response3.Tables.Count <= 0)
        //            return Return300("No Data Found.");
        //        if (Response3.Tables[0].Rows.Count <= 0)
        //            return Return300("No Record Found.");
        //        if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
        //            return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

        //        //var param = new { grant_type = "password", response_type = "token", username = "api_diamond", password = "df08fa72" };

        //        string param2 = "uid=" + Response.Tables[0].Rows[0]["userid"].ToString().ToLower() + "&curr=" + Response.Tables[0].Rows[0]["currency"].ToString() + "&dvc=" + qt.device + "&wsi=" + Response.Tables[0].Rows[0]["token"].ToString();
        //        var Resp2 = HttpHelper.Post(ConfigItems.QTUrlApi, param2, "application/x-www-form-urlencoded", "Post", "");

        //        var ClientRes1 = JsonConvert.DeserializeObject<CFUrlResp>(Resp2);

        //        if (ClientRes1.status == 200)
        //        {
        //            var t1 = new
        //            {
        //                url = ClientRes1.data.url.ToString()
        //                //token = ClientRes.access_token.ToString()
        //            };
        //            return Return200("Success", t1);
        //        }
        //        else
        //            return Return300(ClientRes1.msg);
        //        //var result = HttpHelper.Post1(Response3.Tables[1].Rows[0]["url"].ToString() + "v1/auth/token" + "?grant_type=password&response_type=token&username=" + ConfigItems.QTUser + "&password=" + ConfigItems.QTPass, "", "application/json", "POST");

        //        //if ((int)result.StatusCode == 200)
        //        //{
        //        //    var Resp = new StreamReader(result.GetResponseStream()).ReadToEnd();

        //        //    var ClientRes = JsonConvert.DeserializeObject<QTLoginResp>(Resp);

        //        //    var param = new { playerId = Response.Tables[0].Rows[0]["userid"].ToString().ToLower(), currency = Response.Tables[0].Rows[0]["currency"].ToString(), country = ConfigItems.QTCountry, lang = ConfigItems.QTLang, mode = ConfigItems.QTMode, device = qt.device, walletSessionId = Response.Tables[0].Rows[0]["token"].ToString() };

        //        //    //var result1 = HttpHelper.Post1(Response3.Tables[1].Rows[0]["url"].ToString() + "v1/games/" + qt.gamename + "/launch-url", JsonConvert.SerializeObject(param), "application/json", "POST", ClientRes.access_token.ToString());
        //        //    var result1 = HttpHelper.Post1(Response3.Tables[1].Rows[0]["url"].ToString() + "v1/games/lobby-url", JsonConvert.SerializeObject(param), "application/json", "POST", ClientRes.access_token.ToString());
        //        //    if ((int)result1.StatusCode == 200)
        //        //    {
        //        //        var Resp1 = new StreamReader(result1.GetResponseStream()).ReadToEnd();
        //        //        var ClientRes3 = JsonConvert.DeserializeObject<QTLoginResp1>(Resp1);

        //        //        var t1 = new
        //        //        {
        //        //            url = ClientRes3.url.ToString()
        //        //            //token = ClientRes.access_token.ToString()
        //        //        };
        //        //        return Return200("Success", t1);
        //        //    }
        //        //    else
        //        //    {
        //        //        var EC = GetHttpError((int)result1.StatusCode);
        //        //        return new ObjectResult(new { status = result.StatusCode, code = EC.Item1, message = EC.Item2 });
        //        //    }
        //        //}
        //        //else
        //        //{
        //        //    var EC = GetHttpError((int)result.StatusCode);
        //        //    return new ObjectResult(new { status = result.StatusCode, code = EC.Item1, message = EC.Item2 });
        //        //}
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.WriteLog("LoginQT : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(qt));
        //        return Return400("Server Error");
        //    }
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginev")]
        public HttpResponseMessage LoginEV([FromBody] EZLogin ez)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginEV", JsonConvert.SerializeObject(ez));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                ez.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginEV(ez);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginEV", JsonConvert.SerializeObject(ez), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, "evo", "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginEV1", JsonConvert.SerializeObject(ez), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = "evo";

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginEV2", JsonConvert.SerializeObject(ez), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    var t2 = new
                    {
                        url = Response1.Tables[1].Rows[0]["url"].ToString() + Response2.Tables[0].Rows[0]["token"].ToString() + "&openTable=" + ez.tid
                    };
                    return Return200("Success", t2);
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, "evo", "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginEV3", JsonConvert.SerializeObject(ez), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = new
                {
                    url = Response3.Tables[1].Rows[0]["url"].ToString() + Response.Tables[0].Rows[0]["evotoken"].ToString() + "&openTable=" + ez.tid
                };
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginEV : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(ez));
                return Return400("Server Error");
            }
        }

        //public Tuple<String, String> GetHttpError(int HttpCode)
        //{
        //    if (HttpCode == 400)//"bad request"
        //        return Tuple.Create("INVALID_FORMAT", "Request could not be processed due to invalid JSON format.");
        //    else if (HttpCode == 401)//"unauthorized"
        //        return Tuple.Create("LOGIN_FAILED", "The given pass-key is incorrect.");
        //    else if (HttpCode == 403)//"forbidden"
        //        return Tuple.Create("USER_BLOCKED", "The caller/user is blocked.");
        //    else if (HttpCode == 404)//"not found"
        //        return Tuple.Create("GAME_NOT_FOUND", "Game with the given id was not found.");
        //    else if (HttpCode == 422)//"unprocessable entity"
        //        return Tuple.Create("VALIDATION_ERROR", "The request could not be processed due to validation error.");
        //    else if (HttpCode == 503)//"service unavailable"
        //        return Tuple.Create("QT_NOT_AVAILABLE", "Service is not available. Temporary down, under maintenance.");
        //    else
        //        return Tuple.Create("UNKNOWN_ERROR", "Unexpected error.");//500
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginr")]
        public HttpResponseMessage LoginR([FromBody] QTLogin qt)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginR", JsonConvert.SerializeObject(qt));

                if (String.IsNullOrEmpty(qt.rurl))
                    return Return100("returnurl is empty.");

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                qt.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginR(qt);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginR", JsonConvert.SerializeObject(qt), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, "runner", "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginRN1", JsonConvert.SerializeObject(qt), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = "RUNNER";

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginRN2", JsonConvert.SerializeObject(qt), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response2 == null || Response2.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response2.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response2.Tables[0].Columns.Contains("id") && Response2.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response2.Tables[0].Rows[0]["MSG"].ToString());

                    string param2 = "uid=" + Response1.Tables[0].Rows[0]["userid"].ToString().ToLower() + "&uname=" + Response2.Tables[0].Rows[0]["username"].ToString() + "&gpid=" + Response2.Tables[0].Rows[0]["groupid"].ToString() + "&tkn=" + Response2.Tables[0].Rows[0]["token"].ToString() + "&gname=" + qt.gamename + "&dvc=" + qt.device + "&rurl=" + qt.rurl;
                    var Resp2 = HttpHelper.Post(ConfigItems.RNUrlApi, param2, "application/x-www-form-urlencoded", "Post", "");

                    var ClientRes2 = JsonConvert.DeserializeObject<RNUrlResp>(Resp2);

                    if (ClientRes2.status == 200)
                    {
                        return Return200("Success", ClientRes2.data);
                    }
                    else
                        return Return300(ClientRes2.msg);
                    //var ClientRes1 = JsonConvert.DeserializeObject<RLoginResp>(Resp2);

                    //if (ClientRes1.status == 200)
                    //{
                    //    var t2 = new
                    //    {
                    //        url = ClientRes1.data.url.ToString()
                    //    };
                    //    return Return200("Success", t2);
                    //}
                    //else
                    //    return Return300(ClientRes1.msg);

                    //var t2 = new
                    //{
                    //    url = Response1.Tables[1].Rows[0]["url"].ToString() + Response2.Tables[0].Rows[0]["token"].ToString() + "&openTable=" + qt.tid
                    //};
                    //return Return200("Success", t2);

                    //String hashKey1 = GenerateMD5String(ConfigItems.RNapiid + "-" + ConfigItems.RNapikey + "-" + Response2.Tables[0].Rows[0]["token"].ToString());

                    //var Param1 = new
                    //{
                    //    apiId = ConfigItems.RNapiid,
                    //    apiKey = ConfigItems.RNapikey,
                    //    sessionKey = Convert.ToInt64(Response2.Tables[0].Rows[0]["token"]),
                    //    hashKey = hashKey1,
                    //    playerId = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]),
                    //    playerName = Response2.Tables[0].Rows[0]["username"].ToString(),
                    //    countryCode = ConfigItems.RNcountryCode,
                    //    currencyCode = ConfigItems.RNcurrencyCode,
                    //    languageCode = ConfigItems.RNlanguageCode,
                    //    timeStamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"),
                    //    gameId = qt.gamename,
                    //    mode = ConfigItems.RNmode,
                    //    device = qt.device.ToUpper(),
                    //    returnUrl = qt.rurl,
                    //    groupId = Response2.Tables[0].Rows[0]["groupid"].ToString()
                    //};

                    //var Resp1 = HttpHelper.Post(Response1.Tables[1].Rows[0]["url"].ToString() + ConfigItems.RNversion + "/gameLaunch", JsonConvert.SerializeObject(Param1), "application/json", "POST", hashKey1);

                    //var ClientRes1 = JsonConvert.DeserializeObject<RLoginResp>(Resp1);

                    //if (ClientRes1.errorDetails == null)
                    //    return Return200("Success", ClientRes1);
                    //else
                    //    return Return300(ClientRes1.errorDetails.errorMsg);

                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, "runner", "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginRN3", JsonConvert.SerializeObject(qt), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                string param = "uid=" + Response.Tables[0].Rows[0]["userid"].ToString().ToLower() + "&uname=" + Response.Tables[0].Rows[0]["username"].ToString() + "&gpid=" + Response.Tables[0].Rows[0]["groupid"].ToString() + "&tkn=" + Response.Tables[0].Rows[0]["token"].ToString() + "&gname=" + qt.gamename + "&dvc=" + qt.device + "&rurl=" + qt.rurl;
                var Resp = HttpHelper.Post(ConfigItems.RNUrlApi, param, "application/x-www-form-urlencoded", "Post", "");

                var ClientRes = JsonConvert.DeserializeObject<RNUrlResp>(Resp);

                if (ClientRes.status == 200)
                {
                    return Return200("Success", ClientRes.data);
                }
                else
                    return Return300(ClientRes.msg);
                //String hashKey = GenerateMD5String(ConfigItems.RNapiid + "-" + ConfigItems.RNapikey + "-" + Response.Tables[0].Rows[0]["token"].ToString());

                //var Param = new
                //{
                //    apiId = ConfigItems.RNapiid,
                //    apiKey = ConfigItems.RNapikey,
                //    sessionKey = Convert.ToInt64(Response.Tables[0].Rows[0]["token"]),
                //    hashKey = hashKey,
                //    playerId = Convert.ToInt64(Response.Tables[0].Rows[0]["userid"]),
                //    playerName = Response.Tables[0].Rows[0]["username"].ToString(),
                //    countryCode = ConfigItems.RNcountryCode,
                //    currencyCode = ConfigItems.RNcurrencyCode,
                //    languageCode = ConfigItems.RNlanguageCode,
                //    timeStamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"),
                //    gameId = qt.gamename,
                //    mode = ConfigItems.RNmode,
                //    device = qt.device.ToUpper(),
                //    returnUrl = qt.rurl,
                //    groupId = Response.Tables[0].Rows[0]["groupid"].ToString()
                //};

                //var Resp = HttpHelper.Post(Response3.Tables[1].Rows[0]["url"].ToString() + ConfigItems.RNversion + "/gameLaunch", JsonConvert.SerializeObject(Param), "application/json", "POST", hashKey);

                //var ClientRes = JsonConvert.DeserializeObject<RLoginResp>(Resp);

                //if (ClientRes.errorDetails == null)
                //    return Return200("Success", ClientRes);
                //else
                //    return Return300(ClientRes.errorDetails.errorMsg);
                //return Return300("errorMsg");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginR : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(qt));
                return Return400("Server Error");
            }
        }

        //private static string GenerateMD5String(string inputString)
        //{
        //    MD5 md5 = MD5.Create();
        //    byte[] bytes = Encoding.UTF8.GetBytes(inputString);
        //    byte[] hash = md5.ComputeHash(bytes);

        //    StringBuilder sb = new StringBuilder();
        //    for (int i = 0; i < hash.Length; i++)
        //    {
        //        sb.Append(hash[i].ToString("x2"));
        //    }
        //    return sb.ToString();
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("logincf")]
        public HttpResponseMessage LoginCF([FromBody] CFLogin cf)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginCF", JsonConvert.SerializeObject(cf));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                cf.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginCF(cf);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginCF", JsonConvert.SerializeObject(cf), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, "cockfight", "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginCF1", JsonConvert.SerializeObject(cf), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = "CF";

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginCF2", JsonConvert.SerializeObject(cf), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    string param3 = "uId=" + Response1.Tables[0].Rows[0]["userid"].ToString() + "&gcode=" + cf.gamename + "&curr=" + Response1.Tables[0].Rows[0]["currency"].ToString();
                    var Resp3 = HttpHelper.Post(ConfigItems.CFUrlApi, param3, "application/x-www-form-urlencoded", "Post", "");

                    //string param3 = "cert=" + ConfigItems.CFcert + "&agentId=" + ConfigItems.CFagentId + "&userId=" + Response1.Tables[0].Rows[0]["userid"].ToString() + "&gameCode=" + cf.gamename + "&gameType=" + ConfigItems.CFgametype + "&platform=" + ConfigItems.CFplatform;
                    //var Resp3 = HttpHelper.Post(Response1.Tables[1].Rows[0]["url"].ToString() + "wallet/doLoginAndLaunchGame", param3, "application/x-www-form-urlencoded", "Post", "");
                    var ClientRes3 = JsonConvert.DeserializeObject<CFUrlResp>(Resp3);

                    if (ClientRes3.status == 200)
                        return Return200("Success", new { url = ClientRes3.data.url.ToString() });
                    else
                        return Return300(ClientRes3.msg);

                    //if (ClientRes3.status == "0000")
                    //{
                    //    ErrorLog.WriteLog("LoginCFResp47_1 : " + ClientRes3.url.ToString(), " : Req" + JsonConvert.SerializeObject(ClientRes3));
                    //    return Return200("Success", ClientRes3.url.ToString());
                    //}
                    //else if (ClientRes3.status == "1002")
                    //{
                    //    var betLimit = new
                    //    {
                    //        SV388 = new
                    //        {
                    //            LIVE = new
                    //            {
                    //                maxbet = ConfigItems.CFMaxBet,
                    //                minbet = ConfigItems.CFMinBet,
                    //                mindraw = ConfigItems.CFMinDraw,
                    //                matchlimit = ConfigItems.CFMatchLimit,
                    //                maxdraw = ConfigItems.CFMaxDraw
                    //            }
                    //        }
                    //    };
                    //    string param4 = "cert=" + ConfigItems.CFcert + "&agentId=" + ConfigItems.CFagentId + "&userId=" + Response1.Tables[0].Rows[0]["userid"].ToString() + "&currency=" + Response1.Tables[0].Rows[0]["currency"].ToString() + "&betLimit=" + JsonConvert.SerializeObject(betLimit);
                    //    var Resp4 = HttpHelper.Post(Response1.Tables[1].Rows[0]["url"].ToString() + "wallet/createMember", param4, "application/x-www-form-urlencoded", "Post", "");
                    //    var ClientRes4 = JsonConvert.DeserializeObject<CFLoginResp>(Resp4);

                    //    if (ClientRes4.status == "0000")
                    //    {
                    //        string param5 = "cert=" + ConfigItems.CFcert + "&agentId=" + ConfigItems.CFagentId + "&userId=" + Response1.Tables[0].Rows[0]["userid"].ToString() + "&gameCode=" + cf.gamename + "&gameType=" + ConfigItems.CFgametype + "&platform=" + ConfigItems.CFplatform;
                    //        var Resp5 = HttpHelper.Post(Response1.Tables[1].Rows[0]["url"].ToString() + "wallet/doLoginAndLaunchGame", param5, "application/x-www-form-urlencoded", "Post", "");
                    //        var ClientRes5 = JsonConvert.DeserializeObject<CFLoginResp>(Resp5);
                    //        ErrorLog.WriteLog("LoginCFResp47_2 : " + ClientRes5.url.ToString(), " : Req" + JsonConvert.SerializeObject(ClientRes5));
                    //        return Return200("Success", ClientRes5.url.ToString());
                    //    }
                    //    else
                    //        return Return300(ClientRes4.desc);
                    //}
                    //else
                    //    return Return300(ClientRes3.desc);
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, "cockfight", "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginCF3", JsonConvert.SerializeObject(cf), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                string param = "uId=" + Response.Tables[0].Rows[0]["userid"].ToString() + "&gcode=" + cf.gamename + "&curr=" + Response.Tables[0].Rows[0]["currency"].ToString();
                var Resp = HttpHelper.Post(ConfigItems.CFUrlApi, param, "application/x-www-form-urlencoded", "Post", "");

                //string param = "cert=" + ConfigItems.CFcert + "&agentId=" + ConfigItems.CFagentId + "&userId=" + Response.Tables[0].Rows[0]["userid"].ToString() + "&gameCode=" + cf.gamename + "&gameType=" + ConfigItems.CFgametype + "&platform=" + ConfigItems.CFplatform;
                //var Resp = HttpHelper.Post(Response3.Tables[1].Rows[0]["url"].ToString() + "wallet/doLoginAndLaunchGame", param, "application/x-www-form-urlencoded", "Post", "");
                var ClientRes = JsonConvert.DeserializeObject<CFUrlResp>(Resp);
                if (ClientRes.status == 200)
                    return Return200("Success", new { url = ClientRes.data.url.ToString() });
                else
                    return Return300(ClientRes.msg);

                //if (ClientRes.status == "0000")
                //{
                //    ErrorLog.WriteLog("LoginCFResp47_3 : " + ClientRes.url.ToString(), " : Req" + JsonConvert.SerializeObject(ClientRes));
                //    return Return200("Success", new { url = ClientRes.url.ToString() });
                //}
                //else if (ClientRes.status == "1002")
                //{
                //    var betLimit = new
                //    {
                //        SV388 = new
                //        {
                //            LIVE = new
                //            {
                //                maxbet = ConfigItems.CFMaxBet,
                //                minbet = ConfigItems.CFMinBet,
                //                mindraw = ConfigItems.CFMinDraw,
                //                matchlimit = ConfigItems.CFMatchLimit,
                //                maxdraw = ConfigItems.CFMaxDraw
                //            }
                //        }
                //    };
                //    string param1 = "cert=" + ConfigItems.CFcert + "&agentId=" + ConfigItems.CFagentId + "&userId=" + Response.Tables[0].Rows[0]["userid"].ToString() + "&currency=" + Response.Tables[0].Rows[0]["currency"].ToString() + "&betLimit=" + JsonConvert.SerializeObject(betLimit);
                //    var Resp1 = HttpHelper.Post(Response3.Tables[1].Rows[0]["url"].ToString() + "wallet/createMember", param1, "application/x-www-form-urlencoded", "Post", "");
                //    var ClientRes1 = JsonConvert.DeserializeObject<CFLoginResp>(Resp1);

                //    if (ClientRes1.status == "0000")
                //    {
                //        string param2 = "cert=" + ConfigItems.CFcert + "&agentId=" + ConfigItems.CFagentId + "&userId=" + Response.Tables[0].Rows[0]["userid"].ToString() + "&gameCode=" + cf.gamename + "&gameType=" + ConfigItems.CFgametype + "&platform=" + ConfigItems.CFplatform;
                //        var Resp2 = HttpHelper.Post(Response3.Tables[1].Rows[0]["url"].ToString() + "wallet/doLoginAndLaunchGame", param2, "application/x-www-form-urlencoded", "Post", "");
                //        var ClientRes2 = JsonConvert.DeserializeObject<CFLoginResp>(Resp2);
                //        ErrorLog.WriteLog("LoginCFResp47_4 : " + ClientRes2.url.ToString(), " : Req" + JsonConvert.SerializeObject(ClientRes2));
                //        return Return200("Success", ClientRes2.url.ToString());
                //    }
                //    else
                //        return Return300(ClientRes1.desc);
                //}
                //else
                //    return Return300(ClientRes.desc);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginCF : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(cf));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("rules")]
        public HttpResponseMessage Rules()
        {
            try
            {
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Rules();

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Rules", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//em.EventId,em.EventName,rm.[rules],rm.[rulescolor],rm.[rulesorder],rtm.[gametypename]
                        etid = string.IsNullOrEmpty(x["EventId"].ToString()) ? 0 : x["EventId"],
                        etname = string.IsNullOrEmpty(x["EventName"].ToString()) ? "" : x["EventName"],
                        rule = string.IsNullOrEmpty(x["rules"].ToString()) ? "" : x["rules"],
                        rcolor = string.IsNullOrEmpty(x["rulescolor"].ToString()) ? "" : x["rulescolor"],
                        rorder = string.IsNullOrEmpty(x["rulesorder"].ToString()) ? 0 : x["rulesorder"],
                        gtype = string.IsNullOrEmpty(x["gametypename"].ToString()) ? "" : x["gametypename"].ToString().ToLower(),
                        lname = string.IsNullOrEmpty(x["languagename"].ToString()) ? "" : x["languagename"].ToString(),
                        lid = string.IsNullOrEmpty(x["langid"].ToString()) ? 0 : x["langid"],
                    }).GroupBy(r1 => new
                    {
                        r1.lname,
                        r1.lid,
                    }, (key1, group1) => new
                    {
                        lid = key1.lid,
                        lname = key1.lname.ToString().ToLower(),
                        slist = group1.Count() == 0 ? null : (group1.GroupBy(r2 => new
                        {
                            r2.etid,
                            r2.etname,
                        }, (key2, group2) => new
                        {
                            etid = key2.etid.ToString(),
                            etname = key2.etname.ToString(),
                            gametypelist = group2.Count() == 0 ? null : (group2.GroupBy(r3 => new
                            {
                                r3.gtype,
                            }, (key3, group3) => key3.gtype.ToString() == "" ? null : new
                            {
                                gtype = key3.gtype.ToString().ToLower(),
                                rulelist = group3.Select(y => new
                                {
                                    rule = y.rule.ToString(),
                                    rcolor = y.rcolor.ToString(),
                                    rorder = y.rorder
                                })
                            }))

                            //rulelist = group2.Select(y => new
                            //{
                            //    rule = y.rule.ToString(),
                            //    rcolor = y.rcolor.ToString(),
                            //    rorder = y.rorder
                            //})
                        }).OrderBy(p => p.etid).ToList()),
                        //)
                    }).OrderBy(p1 => p1.lid).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Rules : " + ex.ToString());
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("casinores")]
        public HttpResponseMessage Casinores([FromBody] Casinores casinores)
        {
            try
            {
                ErrorLog.WriteLogAll("Casinores", JsonConvert.SerializeObject(casinores));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Casinores(casinores);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Casinores", JsonConvert.SerializeObject(casinores), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                if (casinores.gtype.ToLower() == "ab3")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable().Where(a => a.Field<string>("WinSection") == "0")
                                       .Select(x => new
                                       {//marketid,winningnation
                                           mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                           nat = string.IsNullOrEmpty(x["nation"].ToString()) ? "" : x["nation"],
                                           //winnat = string.IsNullOrEmpty(x["WinSection"].ToString()) ? "" : x["WinSection"],
                                       }).ToList();
                    return Return200("success", t1);
                }
                else
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                                       .Select(x => new
                                       {//marketid,winningnation
                                           mid = string.IsNullOrEmpty(x["MarketId"].ToString()) ? "" : x["MarketId"].ToString(),
                                           nat = string.IsNullOrEmpty(x["nation"].ToString()) ? "" : x["nation"],
                                           //winnat = string.IsNullOrEmpty(x["WinSection"].ToString()) ? "" : x["WinSection"],
                                       }).ToList();
                    return Return200("success", t1);
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Casinores : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(casinores));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("casino")]
        public HttpResponseMessage Casino()
        {
            try
            {
                ErrorLog.WriteLogAll("Casino", "");

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Casino();

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Casino", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//marketid,winningnation
                        cname = string.IsNullOrEmpty(x["CasinoName"].ToString()) ? 0 : x["CasinoName"],
                        gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower(),
                        dserver = string.IsNullOrEmpty(x["dataserver"].ToString()) ? "" : x["dataserver"].ToString().ToLower(),
                    }).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Casino : " + ex.ToString(), " : Req" + "");
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("checkcasinovs")]
        public HttpResponseMessage CheckCasinovs([FromBody] CheckCasinovs casinores)
        {
            try
            {
                ErrorLog.WriteLogAll("CheckCasinovs", JsonConvert.SerializeObject(casinores));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.CheckCasinovs(casinores);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("CheckCasinovs", JsonConvert.SerializeObject(casinores), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = new
                {
                    vs = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["isvisible"].ToString()) ? false : Convert.ToBoolean(Response.Tables[0].Rows[0]["isvisible"])
                };

                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("CheckCasinovs : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(casinores));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("tpreport")]
        public HttpResponseMessage TPReport([FromBody] TPReport tPReport)
        {
            try
            {
                ErrorLog.WriteLogAll("TPReport", JsonConvert.SerializeObject(tPReport));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                tPReport.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.TPReport(tPReport);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("TPReport", JsonConvert.SerializeObject(tPReport), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                if (tPReport.ctype.ToLower() == "runner")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
              .Select(x => new
              {//[txnid],[txntype],[amount],[gamename],[referencenumber] as [roundid],[tip],[entdt],[matchName],[eventName],[betValue],[maxLiability],[maxWin],[winPoints],[totalScore]
                  tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                  ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                  amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                  gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                  rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? 0 : x["roundid"],
                  tip = string.IsNullOrEmpty(x["tip"].ToString()) ? 0 : Convert.ToInt32(x["tip"]),
                  edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : Convert.ToDateTime(x["entdt"]).ToString("yyyy-MM-dd HH:mm:ss.ffffff"),
                  mname = string.IsNullOrEmpty(x["matchName"].ToString()) ? "" : x["matchName"],
                  ename = string.IsNullOrEmpty(x["eventName"].ToString()) ? "" : x["eventName"],
                  bval = string.IsNullOrEmpty(x["betValue"].ToString()) ? 0 : x["betValue"],
                  maxli = string.IsNullOrEmpty(x["maxLiability"].ToString()) ? 0 : x["maxLiability"],
                  maxwin = string.IsNullOrEmpty(x["maxWin"].ToString()) ? 0 : x["maxWin"],
                  winp = string.IsNullOrEmpty(x["winPoints"].ToString()) ? 0 : x["winPoints"],
                  tscore = string.IsNullOrEmpty(x["totalScore"].ToString()) ? 0 : x["totalScore"]
              }).ToList();
                    return Return200("success", t1);
                }
                else if (tPReport.ctype.ToLower() == "binary")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable().Select(x => new
                    {//[gamename],[txntype],[txnid],[referenceid],[rate],[amount],[winloss],[timeslot],[marketname],[marketvalue],[entdt]
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                        tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                        refid = string.IsNullOrEmpty(x["referenceid"].ToString()) ? "" : x["referenceid"],
                        rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : x["rate"],
                        amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                        winloss = string.IsNullOrEmpty(x["winloss"].ToString()) ? "" : x["winloss"],
                        tslot = string.IsNullOrEmpty(x["timeslot"].ToString()) ? "" : x["timeslot"],
                        mname = string.IsNullOrEmpty(x["marketname"].ToString()) ? "" : x["marketname"],
                        mval = string.IsNullOrEmpty(x["marketvalue"].ToString()) ? "" : x["marketvalue"],
                        edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : Convert.ToDateTime(x["entdt"]).ToString("yyyy-MM-dd HH:mm:ss.ffffff")
                    }).ToList();
                    return Return200("success", t1);
                }
                else if (tPReport.ctype.ToLower() == "tgs" || tPReport.ctype.ToLower() == "slot" || tPReport.ctype.ToLower() == "tgslive" || tPReport.ctype.ToLower() == "vivo" || tPReport.ctype.ToLower() == "astar" || tPReport.ctype.ToLower() == "smart" || tPReport.ctype.ToLower() == "bc" || tPReport.ctype.ToLower() == "ds")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable().Select(x => new
                    {//[roundid],[gamename],[txntype],[txnid],[amount],[entdt] 
                        rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                        tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                        amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                        edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : Convert.ToDateTime(x["entdt"]).ToString("yyyy-MM-dd HH:mm:ss.ffffff")
                    }).ToList();
                    return Return200("success", t1);
                }
                else if (tPReport.ctype.ToLower() == "ludo" || tPReport.ctype.ToLower() == "rummy" || tPReport.ctype.ToLower() == "ludo-lands" || tPReport.ctype.ToLower() == "snakes-and-ladders")
                {//[roundid],[gamename],[txntype],[txnid],[amount],[entdt]
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable().Select(x => new
                    {//[roundid],[gamename],[txntype],[txnid],[referenceid],[rate],[winloss],[entdt]
                        rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                        tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                        refid = string.IsNullOrEmpty(x["referenceid"].ToString()) ? "" : x["referenceid"],
                        rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : Convert.ToDouble(x["rate"]),
                        winloss = string.IsNullOrEmpty(x["winloss"].ToString()) ? "" : x["winloss"],
                        edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : Convert.ToDateTime(x["entdt"]).ToString("yyyy-MM-dd HH:mm:ss.ffffff")
                    }).ToList();
                    return Return200("success", t1);
                }
                else
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
         .Select(x => new
         {//[txnid],[txntype],[amount],[gamename],[referencenumber] as [roundid],[tip],[entdt],[matchName],[eventName],[betValue],[maxLiability],[maxWin],[winPoints],[totalScore]
          //uname = string.IsNullOrEmpty(x["username"].ToString()) ? "" : x["username"],
             rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
             gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
             ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
             tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
             amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
             edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : Convert.ToDateTime(x["entdt"]).ToString("yyyy-MM-dd HH:mm:ss.ffffff"),
             tip = string.IsNullOrEmpty(x["tip"].ToString()) ? 0 : x["tip"],
         }).ToList();
                    return Return200("success", t1);
                }

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("TPReport : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(tPReport));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("tpgtypelist")]
        public HttpResponseMessage TPgtypelist()
        {
            try
            {
                ErrorLog.WriteLogAll("TPgtypelist", "");

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.TPgtypelist();

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("TPgtypelist", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//gname,gtype
                        cname = string.IsNullOrEmpty(x["gname"].ToString()) ? 0 : x["gname"],
                        gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"].ToString().ToLower(),
                    }).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("TPgtypelist : " + ex.ToString(), " : Req" + "");
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("tpallreport")]
        public HttpResponseMessage TPAllReport([FromBody] TPAllReport tPAllReport)
        {
            try
            {
                ErrorLog.WriteLogAll("TPAllReport", JsonConvert.SerializeObject(tPAllReport));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                tPAllReport.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.TPAllReport(tPAllReport);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("TPAllReport", JsonConvert.SerializeObject(tPAllReport), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                if (tPAllReport.ctype.ToLower() == "runner")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
            .Select(x => new
            {//[txnid],[txntype],[amount],[gamename],[referencenumber] as [roundid],[tip],[entdt],[matchName],[eventName],[betValue],[maxLiability],[maxWin],[winPoints],[totalScore]
                tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? 0 : x["roundid"],
                tip = string.IsNullOrEmpty(x["tip"].ToString()) ? 0 : Convert.ToInt32(x["tip"]),
                edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : Convert.ToDateTime(x["entdt"]).ToString("yyyy-MM-dd HH:mm:ss.ffffff"),
                mname = string.IsNullOrEmpty(x["matchName"].ToString()) ? "" : x["matchName"],
                ename = string.IsNullOrEmpty(x["eventName"].ToString()) ? "" : x["eventName"],
                bval = string.IsNullOrEmpty(x["betValue"].ToString()) ? 0 : x["betValue"],
                maxli = string.IsNullOrEmpty(x["maxLiability"].ToString()) ? 0 : x["maxLiability"],
                maxwin = string.IsNullOrEmpty(x["maxWin"].ToString()) ? 0 : x["maxWin"],
                winp = string.IsNullOrEmpty(x["winPoints"].ToString()) ? 0 : x["winPoints"],
                tscore = string.IsNullOrEmpty(x["totalScore"].ToString()) ? 0 : x["totalScore"]
            }).ToList();
                    return Return200("success", t1);
                }
                else if (tPAllReport.ctype.ToLower() == "binary")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable().Select(x => new
                    {//[gamename],[txntype],[txnid],[referenceid],[rate],[amount],[winloss],[timeslot],[marketname],[marketvalue],[entdt]
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                        tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                        refid = string.IsNullOrEmpty(x["referenceid"].ToString()) ? "" : x["referenceid"],
                        rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : x["rate"],
                        amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                        winloss = string.IsNullOrEmpty(x["winloss"].ToString()) ? "" : x["winloss"],
                        tslot = string.IsNullOrEmpty(x["timeslot"].ToString()) ? "" : x["timeslot"],
                        mname = string.IsNullOrEmpty(x["marketname"].ToString()) ? "" : x["marketname"],
                        mval = string.IsNullOrEmpty(x["marketvalue"].ToString()) ? "" : x["marketvalue"],
                        edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : Convert.ToDateTime(x["entdt"]).ToString("yyyy-MM-dd HH:mm:ss.ffffff")
                    }).ToList();
                    return Return200("success", t1);
                }
                else if (tPAllReport.ctype.ToLower() == "tgs" || tPAllReport.ctype.ToLower() == "slot" || tPAllReport.ctype.ToLower() == "tgslive" || tPAllReport.ctype.ToLower() == "vivo" || tPAllReport.ctype.ToLower() == "astar" || tPAllReport.ctype.ToLower() == "smart" || tPAllReport.ctype.ToLower() == "bc" || tPAllReport.ctype.ToLower() == "ds")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable().Select(x => new
                    {//[roundid],[gamename],[txntype],[txnid],[amount],[entdt] 
                        rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                        tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                        amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                        edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : Convert.ToDateTime(x["entdt"]).ToString("yyyy-MM-dd HH:mm:ss.ffffff")
                    }).ToList();
                    return Return200("success", t1);
                }
                else if (tPAllReport.ctype.ToLower() == "ludo" || tPAllReport.ctype.ToLower() == "rummy" || tPAllReport.ctype.ToLower() == "ludo-lands" || tPAllReport.ctype.ToLower() == "snakes-and-ladders")
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable().Select(x => new
                    {//[roundid],[gamename],[txntype],[txnid],[referenceid],[rate],[winloss],[entdt]
                        rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                        tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                        refid = string.IsNullOrEmpty(x["referenceid"].ToString()) ? "" : x["referenceid"],
                        rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : Convert.ToDouble(x["rate"]),
                        winloss = string.IsNullOrEmpty(x["winloss"].ToString()) ? "" : x["winloss"],
                        edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : Convert.ToDateTime(x["entdt"]).ToString("yyyy-MM-dd HH:mm:ss.ffffff")
                    }).ToList();
                    return Return200("success", t1);
                }
                else
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
             .Select(x => new
             {//[roundid],[gamename],[txntype],[txnid],[amount],p.[entdt], [tip]
                 rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                 gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                 ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                 tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                 amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                 edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : Convert.ToDateTime(x["entdt"]).ToString("yyyy-MM-dd HH:mm:ss.ffffff"),
                 tip = string.IsNullOrEmpty(x["tip"].ToString()) ? 0 : x["tip"],
             }).ToList();
                    return Return200("success", t1);

                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("TPAllReport : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(tPAllReport));
                return Return400("Server Error");
            }
            return Return300("No record found.");
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("tpcurrentbets")]
        public HttpResponseMessage TPcurrentbets()
        {
            try
            {
                ErrorLog.WriteLogAll("TPcurrentbets", "");

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.TPcurrentbets(uid);
                //ErrorLog.WriteLogAll("TPcurrentbets", JsonConvert.SerializeObject(Response));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("TPcurrentbets", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");

                var Response1 = _dimfrontservice.TPcurrentbets1(uid);
                //ErrorLog.WriteLogAll("TPcurrentbets", JsonConvert.SerializeObject(Response1));
                if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("TPcurrentbets1", "", Response1.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response1 == null || Response1.Tables.Count <= 0)
                    return Return300("No Data Found.");

                //if (Response.Tables[0].Rows.Count <= 0)
                //    return Return300("No Record Found.");
                //if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                //    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //var json = Response.Tables[0].AsEnumerable().Select((x => new
                //{
                //    rid = "-1",
                //    gname = "mkl",
                //    ttype = "",
                //    tid = "",
                //    amt = 0.0,
                //    edt = "",
                //    ctype = "",
                //    gtype = ""
                //})).ToList();

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//[roundid],[txntype],[txnid],[amount],[entdt],gamename,casinotype
                        rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"].ToString(),
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"].ToString(),
                        ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"].ToString(),
                        tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"].ToString(),
                        amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                        edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                        ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"].ToString(),
                        gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"].ToString()
                    }).ToList();

                var t2 = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                    .Select(x => new
                    {//[roundid],[txntype],[txnid],[amount],[entdt],gamename,casinotype
                        rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"].ToString(),
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"].ToString(),
                        ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"].ToString(),
                        tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"].ToString(),
                        amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                        edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                        ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"].ToString(),
                        gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"].ToString()
                    }).ToList();

                var t3 = Response.Tables[2].Rows.Count <= 0 ? null : Response.Tables[2].AsEnumerable()
              .Select(x => new
              {//[roundid],[txntype],[txnid],[amount],[entdt],gamename,casinotype
                  rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"].ToString(),
                  gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"].ToString(),
                  ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"].ToString(),
                  tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"].ToString(),
                  amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                  edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                  ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"].ToString(),
                  gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"].ToString()
              }).ToList();

                var t4 = Response.Tables[3].Rows.Count <= 0 ? null : Response.Tables[3].AsEnumerable()
                  .Select(x => new
                  {//[roundid],[txntype],[txnid],[amount],[entdt],gamename,casinotype
                      rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"].ToString(),
                      gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"].ToString(),
                      ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"].ToString(),
                      tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"].ToString(),
                      amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                      edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                      ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"].ToString(),
                      gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"].ToString()
                  }).ToList();

                var t5 = Response.Tables[4].Rows.Count <= 0 ? null : Response.Tables[4].AsEnumerable()
                  .Select(x => new
                  {//[roundid],[txntype],[txnid],[amount],[entdt],gamename,casinotype
                      rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"].ToString(),
                      gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"].ToString(),
                      ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"].ToString(),
                      tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"].ToString(),
                      amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                      edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                      ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"].ToString(),
                      gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"].ToString()
                  }).ToList();

                var t6 = Response.Tables[5].Rows.Count <= 0 ? null : Response.Tables[5].AsEnumerable()
                  .Select(x => new
                  {//[roundid],[txntype],[txnid],[amount],[entdt],gamename,casinotype
                      rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"].ToString(),
                      gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"].ToString(),
                      ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"].ToString(),
                      tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"].ToString(),
                      amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                      edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                      ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"].ToString(),
                      gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"].ToString()
                  }).ToList();

                var t7 = Response.Tables[6].Rows.Count <= 0 ? null : Response.Tables[6].AsEnumerable()
                  .Select(x => new
                  {//[roundid],[txntype],[txnid],[amount],[entdt],gamename,casinotype
                      rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"].ToString(),
                      gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"].ToString(),
                      ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"].ToString(),
                      tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"].ToString(),
                      amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                      edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                      ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"].ToString(),
                      gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"].ToString()
                  }).ToList();

                var t8 = Response.Tables[7].Rows.Count <= 0 ? null : Response.Tables[7].AsEnumerable()
                  .Select(x => new
                  {//[txntype],[txnid],[rate],[amount],[timeslot],[marketname],[marketvalue],[entdt],gamename,casinotype,gtype
                      gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                      ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                      tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                      rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : Convert.ToDouble(x["rate"]),
                      amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                      edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                      ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"],
                      gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"],
                      tslot = string.IsNullOrEmpty(x["timeslot"].ToString()) ? "" : x["timeslot"],
                      mname = string.IsNullOrEmpty(x["marketname"].ToString()) ? "" : x["marketname"],
                      mval = string.IsNullOrEmpty(x["marketvalue"].ToString()) ? "" : x["marketvalue"]
                  }).ToList();

                var t9 = Response.Tables[8].Rows.Count <= 0 ? null : Response.Tables[8].AsEnumerable()
                  .Select(x => new
                  {//roundid,tp.txntype,tp.txnid,tp.amount,tp.entdt,t.gamename,casinotype,gtype //////// TGS
                      rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                      ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                      tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                      amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                      edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                      gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                      ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"],
                      gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"]
                  }).ToList();

                var t10 = Response.Tables[9].Rows.Count <= 0 ? null : Response.Tables[9].AsEnumerable()
                        .Select(x => new
                        {//[roundid],[txntype],[txnid],[rate],[winloss],[entdt],'Ludo' as gamename,'Ludo' as casinotype, 'Ludo' as gtype
                            rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                            ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                            tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                            rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : Convert.ToDouble(x["rate"]),
                            wl = string.IsNullOrEmpty(x["winloss"].ToString()) ? "" : x["winloss"],
                            edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                            gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                            ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"],
                            gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"]
                        }).ToList();

                var t11 = Response.Tables[10].Rows.Count <= 0 ? null : Response.Tables[10].AsEnumerable()
                  .Select(x => new
                  {//roundid,tp.txntype,tp.txnid,tp.amount,tp.entdt,t.gamename,casinotype,gtype 
                      rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                      ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                      tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                      amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                      edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                      gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                      ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"],
                      gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"]
                  }).ToList();

                var t12 = Response.Tables[11].Rows.Count <= 0 ? null : Response.Tables[11].AsEnumerable()
                  .Select(x => new
                  {//roundid,tp.txntype,tp.txnid,tp.amount,tp.entdt,t.gamename,casinotype,gtype //////// TGS
                      rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                      ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                      tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                      amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                      edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                      gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                      ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"],
                      gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"]
                  }).ToList();

                var t13 = Response.Tables[12].Rows.Count <= 0 ? null : Response.Tables[12].AsEnumerable()
                       .Select(x => new
                       {//[roundid],[txntype],[txnid],[rate],[winloss],[entdt],'Rummy' as gamename,'Rummy' as casinotype, 'Rummy' as gtype
                           rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                           ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                           tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                           rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : Convert.ToDouble(x["rate"]),
                           wl = string.IsNullOrEmpty(x["winloss"].ToString()) ? "" : x["winloss"],
                           edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                           gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                           ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"],
                           gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"]
                       }).ToList();

                var t14 = Response1.Tables[0].Rows.Count <= 0 ? null : Response1.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//[roundid],[txntype],[txnid],[rate],[winloss],[entdt],'Ludo-Lands' as gamename,'Ludo-Lands' as casinotype, 'Ludo-Lands' as gtype
                        rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                        ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                        tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                        rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : Convert.ToDouble(x["rate"]),
                        wl = string.IsNullOrEmpty(x["winloss"].ToString()) ? "" : x["winloss"],
                        edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                        gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                        ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"],
                        gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"]
                    }).ToList();

                //var t1 = final.Where(p => p.rid.ToString() != "-1" && p.gname != "mkl");
                return Return200("success", new { t1 = t1, t2 = t2, t3 = t3, t4 = t4, t5 = t5, t6 = t6, t7 = t7, t8 = t8, t9 = t9, t10 = t10, t11 = t11, t12 = t12, t13 = t13, t14 = t14 });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("TPAllReport : " + ex.ToString(), " : Req" + "");
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("tpcurrentbetsfinal")]
        public HttpResponseMessage TPcurrentbets(TPcurrentbets pcurrentbets)
        {
            try
            {
                ErrorLog.WriteLogAll("TPcurrentbets", JsonConvert.SerializeObject(pcurrentbets));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                pcurrentbets.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.TPcurrentbetsfinal(pcurrentbets);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("TPcurrentbets", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                if (pcurrentbets.ctype.ToLower() == "binary")
                {//[txntype],[txnid],[rate],[amount],[timeslot],[marketname],
                 //[marketvalue],[entdt],gamename,casinotype,gtype 
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                      .Select(x => new
                      {
                          gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                          ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                          tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                          rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : Convert.ToDouble(x["rate"]),
                          amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                          tslot = string.IsNullOrEmpty(x["timeslot"].ToString()) ? "" : x["timeslot"],
                          mname = string.IsNullOrEmpty(x["marketname"].ToString()) ? "" : x["marketname"],
                          mval = string.IsNullOrEmpty(x["marketvalue"].ToString()) ? "" : x["marketvalue"],
                          edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                          //ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"],
                          //gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"],
                      }).ToList();
                    return Return200("success", t1);
                }
                else if (pcurrentbets.ctype.ToLower() == "ludo" || pcurrentbets.ctype.ToLower() == "rummy" || pcurrentbets.ctype.ToLower() == "ludo-lands")
                {
                    //roundid],[txntype],[txnid],
                    //[rate],[winloss],[entdt],'Ludo Classic' as gamename,'Ludo Classic' as casinotype, 'Ludo' as gtype
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                      .Select(x => new
                      {
                          rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
                          ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
                          tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
                          rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : Convert.ToDouble(x["rate"]),
                          wl = string.IsNullOrEmpty(x["winloss"].ToString()) ? "" : x["winloss"],
                          edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                          gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
                          //ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"],
                          //gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"]
                      }).ToList();
                    return Return200("success", t1);
                }
                else
                {
                    var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                     .Select(x => new
                     {
                         rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"].ToString(),
                         gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"].ToString(),
                         ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"].ToString(),
                         tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"].ToString(),
                         amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : Convert.ToDouble(x["amount"]),
                         edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
                         //ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"].ToString(),
                         //gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"].ToString()
                     }).ToList();
                    return Return200("success", t1);
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("TPAllReport : " + ex.ToString(), " : Req" + "");
                return Return400("Server Error");
            }
        }

        //[HttpPost]
        //[UserAuth, KeyFilter]
        //[Route("tpcurrentbets1")]
        //public HttpResponseMessage TPcurrentbets1()
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("TPcurrentbets1", "");

        //        string u_id = string.Empty;
        //        var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
        //        if (header != null)
        //        {
        //            u_id = JwtTokenGenerator.GetSaGuid(header);
        //        }

        //        Guid uu_id;
        //        bool res = Guid.TryParse(u_id, out uu_id);

        //        if (!res)
        //            return Return300("token not valid.");
        //        Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
        //        var Response = _dimfrontservice.TPcurrentbets1(uid);

        //        if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //        {
        //            ErrorLog.WriteLog("TPcurrentbets1", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //            return Return400("Data Error");
        //        }
        //        if (Response == null || Response.Tables.Count <= 0)
        //            return Return300("No Data Found.");

        //        var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
        //            .Select(x => new
        //            {//[roundid],[txntype],[txnid],[rate],[winloss],[entdt],'Ludo-Lands' as gamename,'Ludo-Lands' as casinotype, 'Ludo-Lands' as gtype
        //                rid = string.IsNullOrEmpty(x["roundid"].ToString()) ? "" : x["roundid"],
        //                ttype = string.IsNullOrEmpty(x["txntype"].ToString()) ? "" : x["txntype"],
        //                tid = string.IsNullOrEmpty(x["txnid"].ToString()) ? "" : x["txnid"],
        //                rate = string.IsNullOrEmpty(x["rate"].ToString()) ? 0 : Convert.ToDouble(x["rate"]),
        //                wl = string.IsNullOrEmpty(x["winloss"].ToString()) ? "" : x["winloss"],
        //                edt = string.IsNullOrEmpty(x["entdt"].ToString()) ? "" : x["entdt"].ToString(),
        //                gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"],
        //                ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"],
        //                gtype = string.IsNullOrEmpty(x["gtype"].ToString()) ? "" : x["gtype"]
        //            }).ToList();

        //        return Return200("success", new { t1 = t1 });
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.WriteLog("TPAllReport : " + ex.ToString(), " : Req" + "");
        //        return Return400("Server Error");
        //    }
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("acceptrules")]
        public HttpResponseMessage AcceptRules()
        {
            try
            {
                ErrorLog.WriteLogAll("AcceptRules", "");
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                var Response = _dimfrontservice.AcceptRules(uu_id);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("AcceptRules", uu_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("AcceptRules : " + ex.ToString(), " : Req");
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("casinorules")]
        public HttpResponseMessage CasinoRules([FromBody] CasinoRules casinoRules)
        {
            try
            {
                ErrorLog.WriteLogAll("CasinoRules", JsonConvert.SerializeObject(casinoRules));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                casinoRules.gtype.ToLower();
                var Response = _dimfrontservice.CasinoRules(casinoRules);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("CasinoRules", JsonConvert.SerializeObject(casinoRules), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//em.EventId,em.EventName,rm.[rules],rm.[rulescolor],rm.[rulesorder],rtm.[gametypename]
                        nat = string.IsNullOrEmpty(x["nation"].ToString()) ? "" : x["nation"].ToString(),
                        resval = string.IsNullOrEmpty(x["resultval"].ToString()) ? "" : x["resultval"].ToString(),
                        hed = string.IsNullOrEmpty(x["heading"].ToString()) ? "" : x["heading"].ToString(),
                    }).GroupBy(r1 => new
                    {
                        r1.hed,
                    }, (key1, group1) => new
                    {
                        hed = key1.hed,
                        child = group1.Select(y => new
                        {
                            nat = y.nat,
                            resval = y.resval,
                        })
                    })./*OrderBy(p1 => p1.lid)*/ToList();

                return Return200("success", t1);

            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("CasinoRules : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(casinoRules));
                return Return400(ex.ToString());
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginpoptheball")]
        public Object Loginpoptheball([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("Loginpoptheball", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.loginpoptheball, JsonConvert.SerializeObject(param), "application/json", "POST");
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
                //var Response = _dimfrontservice.Loginpoptheball(uu_id.ToString(), uid);


                //if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                //{
                //    ErrorLog.WriteLog("Loginpoptheball", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                //    return Return400("Data Error");
                //}
                //if (Response == null || Response.Tables.Count <= 0)
                //    return Return300("No Data Found.");
                //if (Response.Tables[0].Rows.Count <= 0)
                //    return Return300("No Record Found.");
                //if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                //    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());


                //var par = new
                //{
                //    PlayerId = uu_id.ToString(),
                //    PlayerName = Response.Tables[0].Rows[0]["userName"].ToString()
                //};
                ////var stade = EncryptString(JsonConvert.SerializeObject(par), ConfigItems.Secret);
                ////var res1 = DecryptString(stade, ConfigItems.Secret);

                //var url = Response.Tables.Count > 1 && Response.Tables[1].Rows.Count > 0 && Response.Tables[1].Columns.Contains("url") ? Response.Tables[1].Rows[0]["url"].ToString() : "";

                //var par1 = new
                //{
                //    Body = ""
                //};
                //var response = HttpHelper.Post2(url, JsonConvert.SerializeObject(par1), "application/json", "POST", ConfigItems.Popcid);
                //var obj = JsonConvert.DeserializeObject<Startres>(response);

                //if (obj.url == null)
                //    return Return300("No Record Found");
                //else
                //{
                //    string te = ConfigItems.Popball;
                //    string[] value = obj.url.Split(char.Parse(te));
                //    var Response1 = _dimfrontservice.Popballtoken(uu_id.ToString(), value[1].ToString());
                //    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                //    {
                //        ErrorLog.WriteLog("Loginpoptheball", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                //        return Return400("Data Error");
                //    }
                //    if (Response1 == null || Response1.Tables.Count <= 0)
                //        return Return300("No Data Found.");
                //    if (Response1.Tables[0].Rows.Count <= 0)
                //        return Return300("No Record Found.");
                //    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                //        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //    if (Response1.Tables[0].Rows[0]["id"].ToString() == "1")
                //        return Return200("success", new { url = obj.url });
                //    else
                //        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                //}
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginPoptheball : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginludo")]
        public Object LoginLudo([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginLudo", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.loginludo, JsonConvert.SerializeObject(param), "application/json", "POST");
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
                //var Response = _dimfrontservice.Loginpoptheball(uu_id.ToString(), uid);


                //if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                //{
                //    ErrorLog.WriteLog("Loginpoptheball", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                //    return Return400("Data Error");
                //}
                //if (Response == null || Response.Tables.Count <= 0)
                //    return Return300("No Data Found.");
                //if (Response.Tables[0].Rows.Count <= 0)
                //    return Return300("No Record Found.");
                //if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                //    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());


                //var par = new
                //{
                //    PlayerId = uu_id.ToString(),
                //    PlayerName = Response.Tables[0].Rows[0]["userName"].ToString()
                //};
                ////var stade = EncryptString(JsonConvert.SerializeObject(par), ConfigItems.Secret);
                ////var res1 = DecryptString(stade, ConfigItems.Secret);

                //var url = Response.Tables.Count > 1 && Response.Tables[1].Rows.Count > 0 && Response.Tables[1].Columns.Contains("url") ? Response.Tables[1].Rows[0]["url"].ToString() : "";

                //var par1 = new
                //{
                //    Body = ""
                //};
                //var response = HttpHelper.Post2(url, JsonConvert.SerializeObject(par1), "application/json", "POST", ConfigItems.Popcid);
                //var obj = JsonConvert.DeserializeObject<Startres>(response);

                //if (obj.url == null)
                //    return Return300("No Record Found");
                //else
                //{
                //    string te = ConfigItems.Popball;
                //    string[] value = obj.url.Split(char.Parse(te));
                //    var Response1 = _dimfrontservice.Popballtoken(uu_id.ToString(), value[1].ToString());
                //    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                //    {
                //        ErrorLog.WriteLog("Loginpoptheball", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                //        return Return400("Data Error");
                //    }
                //    if (Response1 == null || Response1.Tables.Count <= 0)
                //        return Return300("No Data Found.");
                //    if (Response1.Tables[0].Rows.Count <= 0)
                //        return Return300("No Record Found.");
                //    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                //        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //    if (Response1.Tables[0].Rows[0]["id"].ToString() == "1")
                //        return Return200("success", new { url = obj.url });
                //    else
                //        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                //}
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginLudo : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginiqoption")]
        public Object LoginIqOption([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginIqOption", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.loginiqoption, JsonConvert.SerializeObject(param), "application/json", "POST");
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
                //var Response = _dimfrontservice.Loginpoptheball(uu_id.ToString(), uid);


                //if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                //{
                //    ErrorLog.WriteLog("Loginpoptheball", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                //    return Return400("Data Error");
                //}
                //if (Response == null || Response.Tables.Count <= 0)
                //    return Return300("No Data Found.");
                //if (Response.Tables[0].Rows.Count <= 0)
                //    return Return300("No Record Found.");
                //if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                //    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());


                //var par = new
                //{
                //    PlayerId = uu_id.ToString(),
                //    PlayerName = Response.Tables[0].Rows[0]["userName"].ToString()
                //};
                ////var stade = EncryptString(JsonConvert.SerializeObject(par), ConfigItems.Secret);
                ////var res1 = DecryptString(stade, ConfigItems.Secret);

                //var url = Response.Tables.Count > 1 && Response.Tables[1].Rows.Count > 0 && Response.Tables[1].Columns.Contains("url") ? Response.Tables[1].Rows[0]["url"].ToString() : "";

                //var par1 = new
                //{
                //    Body = ""
                //};
                //var response = HttpHelper.Post2(url, JsonConvert.SerializeObject(par1), "application/json", "POST", ConfigItems.Popcid);
                //var obj = JsonConvert.DeserializeObject<Startres>(response);

                //if (obj.url == null)
                //    return Return300("No Record Found");
                //else
                //{
                //    string te = ConfigItems.Popball;
                //    string[] value = obj.url.Split(char.Parse(te));
                //    var Response1 = _dimfrontservice.Popballtoken(uu_id.ToString(), value[1].ToString());
                //    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                //    {
                //        ErrorLog.WriteLog("Loginpoptheball", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                //        return Return400("Data Error");
                //    }
                //    if (Response1 == null || Response1.Tables.Count <= 0)
                //        return Return300("No Data Found.");
                //    if (Response1.Tables[0].Rows.Count <= 0)
                //        return Return300("No Record Found.");
                //    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                //        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //    if (Response1.Tables[0].Rows[0]["id"].ToString() == "1")
                //        return Return200("success", new { url = obj.url });
                //    else
                //        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                //}
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginIqOption : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginrummy")]
        public Object LoginRummy([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginRummy", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.loginrummy, JsonConvert.SerializeObject(param), "application/json", "POST");
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
                //var Response = _dimfrontservice.Loginpoptheball(uu_id.ToString(), uid);


                //if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                //{
                //    ErrorLog.WriteLog("Loginpoptheball", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                //    return Return400("Data Error");
                //}
                //if (Response == null || Response.Tables.Count <= 0)
                //    return Return300("No Data Found.");
                //if (Response.Tables[0].Rows.Count <= 0)
                //    return Return300("No Record Found.");
                //if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                //    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());


                //var par = new
                //{
                //    PlayerId = uu_id.ToString(),
                //    PlayerName = Response.Tables[0].Rows[0]["userName"].ToString()
                //};
                ////var stade = EncryptString(JsonConvert.SerializeObject(par), ConfigItems.Secret);
                ////var res1 = DecryptString(stade, ConfigItems.Secret);

                //var url = Response.Tables.Count > 1 && Response.Tables[1].Rows.Count > 0 && Response.Tables[1].Columns.Contains("url") ? Response.Tables[1].Rows[0]["url"].ToString() : "";

                //var par1 = new
                //{
                //    Body = ""
                //};
                //var response = HttpHelper.Post2(url, JsonConvert.SerializeObject(par1), "application/json", "POST", ConfigItems.Popcid);
                //var obj = JsonConvert.DeserializeObject<Startres>(response);

                //if (obj.url == null)
                //    return Return300("No Record Found");
                //else
                //{
                //    string te = ConfigItems.Popball;
                //    string[] value = obj.url.Split(char.Parse(te));
                //    var Response1 = _dimfrontservice.Popballtoken(uu_id.ToString(), value[1].ToString());
                //    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                //    {
                //        ErrorLog.WriteLog("Loginpoptheball", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                //        return Return400("Data Error");
                //    }
                //    if (Response1 == null || Response1.Tables.Count <= 0)
                //        return Return300("No Data Found.");
                //    if (Response1.Tables[0].Rows.Count <= 0)
                //        return Return300("No Record Found.");
                //    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                //        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //    if (Response1.Tables[0].Rows[0]["id"].ToString() == "1")
                //        return Return200("success", new { url = obj.url });
                //    else
                //        return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                //}
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginRummy : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginludolands")]
        public Object LoginLudolands([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginLudolands", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.loginludolands, JsonConvert.SerializeObject(param), "application/json", "POST");
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginLudolands : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginpoker")]
        public Object LoginPoker([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginPoker", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.loginpoker, JsonConvert.SerializeObject(param), "application/json", "POST");
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginPoker : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginteen")]
        public Object LoginTeen([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginTeen", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.loginteen, JsonConvert.SerializeObject(param), "application/json", "POST");
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginTeen : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginslot")]
        public Object LoginSlot([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginSlot", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.loginslot, JsonConvert.SerializeObject(param), "application/json", "POST");
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginTeen : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginsandl")]
        public Object LoginSandl([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginSandl", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.loginsandl, JsonConvert.SerializeObject(param), "application/json", "POST");
                ErrorLog.WriteLogAll("LoginSandl1", JsonConvert.SerializeObject(result));
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginSandl : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginslot2")]
        public Object LoginSlot2([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginSlot2", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.loginslot2, JsonConvert.SerializeObject(param), "application/json", "POST");
                ErrorLog.WriteLogAll("LoginSandl1", JsonConvert.SerializeObject(result));
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginSandl : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("logintuktuk")]
        public Object LoginTuktuk([FromBody] Loginpoptheball loginpoptheball)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginTuktuk", JsonConvert.SerializeObject(loginpoptheball));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

                var param = new { guid = u_id, uid = uid, gtype = loginpoptheball.gtype };

                var result = HttpHelper.Post(ConfigItems.Urlpop + ApiEndpoint.logintuktuk, JsonConvert.SerializeObject(param), "application/json", "POST");
                ErrorLog.WriteLogAll("LoginTuktuk", JsonConvert.SerializeObject(result));
                var obj = JsonConvert.DeserializeObject<PTBResp>(result);
                return obj;
            }
            catch (SystemException ex)
            {
                ErrorLog.WriteLog("LoginSandl : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(loginpoptheball));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("worlipana")]
        public HttpResponseMessage WorliPana([FromBody] WorliPana worliPana)
        {
            try
            {
                ErrorLog.WriteLogAll("WorliPana", JsonConvert.SerializeObject(worliPana));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.WorliPana(worliPana);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("WorliPana", JsonConvert.SerializeObject(worliPana), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {
                        tcnt = string.IsNullOrEmpty(x["totcount"].ToString()) ? "" : x["totcount"]
                    });
                var t2 = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                    .Select(x => new
                    {
                        tpana = string.IsNullOrEmpty(x["totpana"].ToString()) ? "" : x["totpana"]
                    }).OrderBy(_ => _.tpana);
                return Return200("Success", new { t1 = t1, t2 = t2 });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("WorliPana : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(worliPana));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("worlirule")]
        public HttpResponseMessage WorliRule([FromBody] WorliRule worliRule)
        {
            try
            {
                ErrorLog.WriteLogAll("worliRule", JsonConvert.SerializeObject(worliRule));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.WorliRule(worliRule);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("WorliRule", JsonConvert.SerializeObject(worliRule), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //String str = "{\"status\": 200,\"msg\": \"Success\",\"data\": " + JsonConvert.SerializeObject(Response) + "}";
                //return Content(str, "application/json");

                return Return200("Success", Response);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("WorliRule : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(worliRule));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getcricketv3data")]
        public Object GetCricketv3data([FromBody] GetTeenOdds getTeenOdds)
        {
            try
            {
                ErrorLog.WriteLogAll("GetCricketv3data", JsonConvert.SerializeObject(getTeenOdds));
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                bool uredis = JwtTokenGenerator.Geturedis(header);
                if (uredis)
                {
                    var par = "gtype=" + getTeenOdds.gtype.ToLower();
                    var resp = HttpHelper.Post(ConfigItems.RedisUrlC + getTeenOdds.gtype.ToLower() + ApiEndpoint.getdata, par, "application/x-www-form-urlencoded", "POST");

                    var obj = JsonConvert.DeserializeObject<GetCricketv3data>(resp);

                    if (obj != null && obj.data != null && obj.data.t1 != null && obj.data.t1.scard == 1)
                    {
                        var par1 = new
                        {
                            newgameid = obj.data.t1.gmid.ToString()
                        };
                        //var par1 = "{\"newgameid\":\"" + gameDetail.gmid.ToString() + "\"}";
                        try
                        {
                            var resp1 = HttpHelper.Post(ConfigItems.Urlsc + ApiEndpoint.getoldgameid, JsonConvert.SerializeObject(par1), "application/json", "POST");
                            var obj1 = JsonConvert.DeserializeObject<Gamenewid>(resp1);
                            obj.data.t1.oldgmid = obj1 != null && obj1.status == 200 ? obj1.gameid : "0";
                        }
                        catch (Exception ex)
                        {
                            ErrorLog.WriteLog("GetCricketv3data : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(getTeenOdds));
                        }
                    }
                    return obj;

                }
                else
                {
                    return Return300("no record found.");
                }
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetCricketv3data : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(getTeenOdds));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("cricketv3popup")]
        public HttpResponseMessage Cricketv3popup([FromBody] Cricketv3popup cricketv3Popup)
        {
            try
            {
                ErrorLog.WriteLogAll("Cricketv3popup", JsonConvert.SerializeObject(cricketv3Popup));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }
                cricketv3Popup.uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));
                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Cricketv3popup(cricketv3Popup);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Cricketv3popup", JsonConvert.SerializeObject(cricketv3Popup), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = new
                {//gm.eventname,gm.markettime,gm.WinNation,tr.ResultDesc,tr.Cards
                    rid = Response != null && Response.Tables != null && Response.Tables.Count > 1 && Response.Tables[1].Rows.Count > 0 && string.IsNullOrEmpty(Response.Tables[1].Rows[0]["gameid"].ToString()) ? "" : Response.Tables[1].Rows[0]["gameid"].ToString(),
                    mtime = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["marketstarttime"].ToString()) ? "" : Response.Tables[0].Rows[0]["marketstarttime"].ToString(),
                    rdesc = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["ResultDesc"].ToString()) ? 0 : Response.Tables[0].Rows[0]["ResultDesc"],
                    winnat = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["nation"].ToString()) ? "" : Response.Tables[0].Rows[0]["nation"].ToString(),
                    win = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["WinSection"].ToString()) ? "" : Response.Tables[0].Rows[0]["WinSection"].ToString(),
                    ename = "",
                    score = Response.Tables.Count > 1 && Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                    .Select(x => new
                    {//cid,gameid,marketid,sectionid,ball,run,cards,wkt,inning,overc
                        cid = string.IsNullOrEmpty(x["cid"].ToString()) ? 0 : x["cid"],
                        nat = string.IsNullOrEmpty(x["nation"].ToString()) ? "" : x["nation"],
                        gmid = string.IsNullOrEmpty(x["gameid"].ToString()) ? 0 : x["gameid"],
                        mid = string.IsNullOrEmpty(x["marketid"].ToString()) ? 0 : x["marketid"],
                        sid = string.IsNullOrEmpty(x["sectionid"].ToString()) ? 0 : x["sectionid"],
                        run = string.IsNullOrEmpty(x["run"].ToString()) ? 0 : x["run"],
                        card = string.IsNullOrEmpty(x["cards"].ToString()) ? "" : x["cards"],
                        wkt = string.IsNullOrEmpty(x["wkt"].ToString()) ? 0 : x["wkt"],
                        ing = string.IsNullOrEmpty(x["inning"].ToString()) ? 0 : x["inning"],
                        oc = string.IsNullOrEmpty(x["overc"].ToString()) ? 0 : x["overc"],
                    }).Where(_ => _.card.ToString() != "").Select(p => p).OrderBy(o => o.ing).ToList()
                };
                var soda = _dimfrontservice.Cricketv3popupsoda(cricketv3Popup);
                var t2 = soda != null && soda.Tables != null && soda.Tables.Count <= 0 || soda.Tables[0].Rows.Count <= 0 ? null : soda.Tables[0].AsEnumerable()
                     .Select(x => new
                     {//nation,userrate,bettype,amount,winloss,IsMatched,PlaceDate,IpAddress,BrowserDetail
                         nat = string.IsNullOrEmpty(x["nation"].ToString()) ? "" : x["nation"],
                         urate = string.IsNullOrEmpty(x["userrate"].ToString()) ? 0 : x["userrate"],
                         bhav = string.IsNullOrEmpty(x["bhav"].ToString()) ? 0 : x["bhav"],
                         btype = string.IsNullOrEmpty(x["bettype"].ToString()) ? "" : x["bettype"].ToString().ToLower(),
                         amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                         wl = string.IsNullOrEmpty(x["winloss"].ToString()) ? 0 : x["winloss"],
                         pdt = string.IsNullOrEmpty(x["PlaceDate"].ToString()) ? "" : x["PlaceDate"].ToString(),
                         ip = string.IsNullOrEmpty(x["IpAddress"].ToString()) ? "" : x["IpAddress"].ToString(),
                         bdetail = string.IsNullOrEmpty(x["BrowserDetail"].ToString()) ? "" : x["BrowserDetail"].ToString(),
                         match = string.IsNullOrEmpty(x["IsMatched"].ToString()) ? false : x["IsMatched"]
                     }).ToList();
                return Return200("Success", new { t1 = t1, t2 = t2 });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Cricketv3popup : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(cricketv3Popup));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("cricketsopopup")]
        public HttpResponseMessage Cricketsopopup([FromBody] Cricketv3popup cricketv3Popup)
        {
            try
            {
                ErrorLog.WriteLogAll("Cricketsopopup", JsonConvert.SerializeObject(cricketv3Popup));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }
                cricketv3Popup.uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));
                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.CricketSopopup(cricketv3Popup);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Cricketv3popup", JsonConvert.SerializeObject(cricketv3Popup), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = new
                {//gm.eventname,gm.markettime,gm.WinNation,tr.ResultDesc,tr.Cards
                    rid = Response != null && Response.Tables != null && Response.Tables.Count > 1 && Response.Tables[1].Rows.Count > 0 && string.IsNullOrEmpty(Response.Tables[1].Rows[0]["gameid"].ToString()) ? "" : Response.Tables[1].Rows[0]["gameid"].ToString(),
                    mtime = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["marketstarttime"].ToString()) ? "" : Response.Tables[0].Rows[0]["marketstarttime"].ToString(),
                    rdesc = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["ResultDesc"].ToString()) ? 0 : Response.Tables[0].Rows[0]["ResultDesc"],
                    winnat = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["nation"].ToString()) ? "" : Response.Tables[0].Rows[0]["nation"].ToString(),
                    win = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["WinSection"].ToString()) ? "" : Response.Tables[0].Rows[0]["WinSection"].ToString(),
                    score = Response.Tables.Count > 1 && Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                    .Select(x => new
                    {//cid,gameid,marketid,sectionid,ball,run,cards,wkt,inning,overc
                        cid = string.IsNullOrEmpty(x["cid"].ToString()) ? 0 : x["cid"],
                        nat = string.IsNullOrEmpty(x["nation"].ToString()) ? "" : x["nation"],
                        gmid = string.IsNullOrEmpty(x["gameid"].ToString()) ? 0 : x["gameid"],
                        mid = string.IsNullOrEmpty(x["marketid"].ToString()) ? 0 : x["marketid"],
                        sid = string.IsNullOrEmpty(x["sectionid"].ToString()) ? 0 : x["sectionid"],
                        run = string.IsNullOrEmpty(x["run"].ToString()) ? 0 : x["run"],
                        card = string.IsNullOrEmpty(x["cards"].ToString()) ? "" : x["cards"],
                        wkt = string.IsNullOrEmpty(x["wkt"].ToString()) ? 0 : x["wkt"],
                        ing = string.IsNullOrEmpty(x["inning"].ToString()) ? 0 : x["inning"],
                        oc = string.IsNullOrEmpty(x["overc"].ToString()) ? 0 : x["overc"],
                    }).Where(_ => _.card.ToString() != "").Select(p => p).OrderBy(o => o.ing).ToList()
                };
                var soda = _dimfrontservice.Cricketv3popupsoda(cricketv3Popup);
                var t2 = soda != null && soda.Tables != null && soda.Tables.Count <= 0 || soda.Tables[0].Rows.Count <= 0 ? null : soda.Tables[0].AsEnumerable()
                     .Select(x => new
                     {//nation,userrate,bettype,amount,winloss,IsMatched,PlaceDate,IpAddress,BrowserDetail
                         nat = string.IsNullOrEmpty(x["nation"].ToString()) ? "" : x["nation"],
                         urate = string.IsNullOrEmpty(x["userrate"].ToString()) ? 0 : x["userrate"],
                         bhav = string.IsNullOrEmpty(x["bhav"].ToString()) ? 0 : x["bhav"],
                         btype = string.IsNullOrEmpty(x["bettype"].ToString()) ? "" : x["bettype"].ToString().ToLower(),
                         amt = string.IsNullOrEmpty(x["amount"].ToString()) ? 0 : x["amount"],
                         wl = string.IsNullOrEmpty(x["winloss"].ToString()) ? 0 : x["winloss"],
                         pdt = string.IsNullOrEmpty(x["PlaceDate"].ToString()) ? "" : x["PlaceDate"].ToString(),
                         ip = string.IsNullOrEmpty(x["IpAddress"].ToString()) ? "" : x["IpAddress"].ToString(),
                         bdetail = string.IsNullOrEmpty(x["BrowserDetail"].ToString()) ? "" : x["BrowserDetail"].ToString(),
                         match = string.IsNullOrEmpty(x["IsMatched"].ToString()) ? false : x["IsMatched"]
                     }).ToList();
                return Return200("Success", new { t1 = t1, t2 = t2 });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Cricketsopopup : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(cricketv3Popup));
                return Return400("Server Error");
            }
        }
        //[UserAuth, KeyFilter]
        //[Route("getuserentry")]
        //public HttpResponseMessage GetUserentry(GetUserentry getUserentry)
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("GetUserentry", JsonConvert.SerializeObject(getUserentry));

        //        //string u_id = string.Empty;
        //        //var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
        //        //if (header != null)
        //        //{
        //        //    u_id = JwtTokenGenerator.GetSaGuid(header);
        //        //}

        //        //Guid uu_id;
        //        //bool res = Guid.TryParse(u_id, out uu_id);

        //        //if (!res)
        //        //    return Return300("token not valid.");
        //        if (_cache.IsExist(GlobalCacheKey.Userentry + getUserentry.domain, ConfigItems.Redisudb))
        //        {
        //            var data = _cache.Get<UserentryRes>(GlobalCacheKey.Userentry + getUserentry.domain, ConfigItems.Redisudb);
        //            return Return200("Success", data);
        //        }
        //        return Return300("No record found");

        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.WriteLog("GetUserentry : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(getUserentry));
        //        return Return400("Server Error");
        //    }
        //}
        //[UserAuth, KeyFilter]
        [UserAuth, KeyFilter]
        [HttpPost]
        [Route("getsportteam")]
        public async Task<HttpResponseMessage> GetSportteam()
        {
            try
            {
                ErrorLog.WriteLogAll("GetSportteam", "");
                var data = await _cache.GetSetMembers<GetSportteam>(GlobalCacheKey.Set, ConfigItems.Redisudb, ConfigItems.re);
                if (data != null && data.Count() > 0)
                    return Return200("Success", data);
                else
                    return Return300("No record found");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetSportteam : " + ex.ToString(), " : Req" + "");
                return Return400("Server Error");
            }
        }
        //[UserAuth, KeyFilter]LoginLudo
        //[Route("loginludo")]
        //public HttpResponseMessage ()
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("LoginLudo", "");

        //        string u_id = string.Empty;
        //        var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
        //        if (header != null)
        //        {
        //            u_id = JwtTokenGenerator.GetSaGuid(header);
        //        }

        //        Guid uu_id;
        //        bool res = Guid.TryParse(u_id, out uu_id);

        //        if (!res)
        //            return Return300("token not valid.");

        //        Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

        //        var Response = _dimfrontservice.Loginludo(uu_id.ToString(), uid);

        //        if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //        {
        //            ErrorLog.WriteLog("LoginLudo", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //            return Return400("Data Error");
        //        }
        //        if (Response == null || Response.Tables.Count <= 0)
        //            return Return300("No Data Found.");
        //        if (Response.Tables[0].Rows.Count <= 0)
        //            return Return300("No Record Found.");
        //        if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
        //            return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());


        //        var par = new
        //        {
        //            PlayerId = uu_id.ToString(),
        //            PlayerName = Response.Tables[0].Rows[0]["userName"].ToString(),
        //            //PlayerImage = "https://theme-assets.s3.eu-west-1.amazonaws.com/v3/static/front/img/new-launch.png"
        //        };
        //        var stade = EncryptString(JsonConvert.SerializeObject(par), ConfigItems.LudoSecret);
        //        var res1 = DecryptString(stade, ConfigItems.LudoSecret);

        //        var url = Response.Tables.Count > 1 && Response.Tables[1].Rows.Count > 0 && Response.Tables[1].Columns.Contains("url") ? Response.Tables[1].Rows[0]["url"].ToString() : "";

        //        var par1 = new
        //        {
        //            Body = stade
        //        };
        //        var response = HttpHelper.Post2(url, JsonConvert.SerializeObject(par1), "application/json", "POST", ConfigItems.Ludocid);
        //        var obj = JsonConvert.DeserializeObject<Startres>(response);

        //        if (obj.url == null)
        //            return Return300("No Record Found");
        //        else
        //        {//https://ludo.shub.casino?session=87070064-5615-4e2a-a8dc-526b3a45191a
        //            string te = ConfigItems.Ludo;
        //            string[] value = obj.url.Split(char.Parse(te));
        //            var Response1 = _dimfrontservice.Ludotoken(uu_id.ToString(), value[1].ToString());
        //            if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //            {
        //                ErrorLog.WriteLog("LoginLudo", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //                return Return400("Data Error");
        //            }
        //            if (Response1 == null || Response1.Tables.Count <= 0)
        //                return Return300("No Data Found.");
        //            if (Response1.Tables[0].Rows.Count <= 0)
        //                return Return300("No Record Found.");
        //            if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
        //                return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

        //            if (Response1.Tables[0].Rows[0]["id"].ToString() == "1")
        //                return Return200("success", new { url = obj.url });
        //            else
        //                return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
        //        }
        //    }
        //    catch (SystemException ex)
        //    {
        //        ErrorLog.WriteLog("LoginLudo : " + ex.ToString(), " : Req" + "");
        //        return Return400("Server Error");
        //    }
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("tvurl")]
        public HttpResponseMessage TVUrl([FromBody] TVUrl tvu)
        {
            try
            {
                ErrorLog.WriteLogAll("TVUrl", JsonConvert.SerializeObject(tvu));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                tvu.guid = uu_id;

                UserLogin userLogin = new UserLogin();
                userLogin.guid = uu_id;
                userLogin.gtype = "tv";

                var Response = _dimfrontservice.UserLogin(userLogin);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("TVUrl", JsonConvert.SerializeObject(tvu), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var par1 = new
                {
                    token = Response.Tables[0].Rows[0]["idval"].ToString(),
                    gtype = "tv"
                };
                //var resp1 = HttpHelper.Post("http://3.249.22.134:8032/api/user/framelogin", JsonConvert.SerializeObject(par1), "application/json", "POST");
                //var resp2 = JsonConvert.DeserializeObject<ULoginResp>(resp1);

                var t1 = new
                {
                    url = ConfigItems.TVUrl + tvu.gmid + "/" + tvu.platform + "/" + tvu.ipa + "/" + Response.Tables[0].Rows[0]["idval"].ToString()
                };
                //var resp1 = HttpHelper.Post(t1.url, "application/json", "POST");

                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("TVUrl", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(tvu));
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [Route("tvdatawa")]
        public HttpResponseMessage TvdataWA([FromBody] Tvata tvata)
        {
            try
            {
                ErrorLog.WriteLogAll("TvdataWA", JsonConvert.SerializeObject(tvata));

                var Response = _dimfrontservice.Tvata(tvata);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("TvdataWA", JsonConvert.SerializeObject(tvata), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//top 1 1 as ID,@myip as Ipaddress,[portno],[Camstring],[sslflag],[porttype],[tvtype]
                        id = string.IsNullOrEmpty(x["ID"].ToString()) ? 0 : x["ID"],
                        ip = string.IsNullOrEmpty(x["Ipaddress"].ToString()) ? 0 : x["Ipaddress"],
                        pno = string.IsNullOrEmpty(x["portno"].ToString()) ? 0 : x["portno"],
                        cam = string.IsNullOrEmpty(x["Camstring"].ToString()) ? "" : x["Camstring"],
                        ssl = string.IsNullOrEmpty(x["sslflag"].ToString()) ? "" : x["sslflag"],
                        ptype = string.IsNullOrEmpty(x["porttype"].ToString()) ? "" : x["porttype"],
                        ttype = string.IsNullOrEmpty(x["tvtype"].ToString()) ? "" : x["tvtype"],
                    }).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("TvdataWA : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(tvata));
                return Return400("Server Error");
            }
        }

        //[HttpPost]
        //[Route("maintenance")]
        //public HttpResponseMessage Maintenance([FromBody] Maintenance maintenance)
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("Maintenance", JsonConvert.SerializeObject(maintenance));
        //        ErrorLog.Writemain(maintenance.ismain.ToString());
        //        if (maintenance.ismain)
        //        {
        //            _cache.Flush(ConfigItems.RedisLocaldb.ToString());
        //        }
        //        return Return200("Success");
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.WriteLog("Maintenance : " + ex.ToString(), " : Req" + "");
        //        return Return400("Server Error");
        //    }
        //}

        //[UserAuth, KeyFilter]
        //[HttpPost]
        //[Route("usercreate")]
        //public HttpResponseMessage Usercreate([FromBody] Usercreate insertUser)
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("Usercreate", JsonConvert.SerializeObject(insertUser));
        //        string u_id = string.Empty;
        //        //var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
        //        //if (header != null)
        //        //{
        //        //    u_id = JwtTokenGenerator.GetSaGuid(header);
        //        //}

        //        //Guid uu_id;
        //        //bool res = Guid.TryParse(u_id, out uu_id);

        //        //if (!res)
        //        //    return Return300("token not valid.");
        //        var Response = _dimfrontservice.Usercreate(insertUser);

        //        if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //        {
        //            ErrorLog.WriteLog("Usercreate", JsonConvert.SerializeObject(insertUser), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //            return Return400("Data Error");
        //        }
        //        if (Response == null || Response.Tables.Count <= 0)
        //            return Return300("No Data Found.");
        //        if (Response.Tables[0].Rows.Count <= 0)
        //            return Return300("No Record Found.");
        //        if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
        //            return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

        //        if (Response.Tables[0].Rows[0]["id"].ToString() == "1")
        //        {
        //            if (Response.Tables[0].Rows[0]["json"].ToString().Length > 1)
        //            {
        //                var Res = _dimfrontservice.UsercreateData(Response.Tables[0].Rows[0]["json"].ToString());
        //                if (Res != null && Response.Tables.Count > 0 && Res.Tables[Res.Tables.Count - 1].Columns.Contains("id") && Res.Tables[Res.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //                {
        //                    ErrorLog.WriteLog("UsercreateData", Res.Tables[0].Rows[0]["json"].ToString(), Res.Tables[Res.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //                    return Return400("Data Error");
        //                }
        //                if (Res == null || Res.Tables.Count <= 0)
        //                    return Return300("No Data Found.");
        //                if (Res.Tables[0].Rows.Count <= 0)
        //                    return Return300("No Record Found.");
        //                if (Res.Tables[0].Columns.Contains("id") && Res.Tables[0].Rows[0]["id"].ToString() == "0")
        //                    return Return300(Res.Tables[0].Rows[0]["MSG"].ToString());
        //                //return Return200(Res.Tables[0].Rows[0]["MSG"].ToString());
        //            }
        //            //return Return200(Res.Tables[0].Rows[0]["MSG"].ToString());
        //        }
        //        return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.WriteLog("Usercreate" + ex.ToString(), " : Req" + JsonConvert.SerializeObject(insertUser));
        //        return Return400(ex.Message);
        //    }
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("paymentval")]
        public HttpResponseMessage Paymentval([FromBody] Paymentval paymentval)
        {
            try
            {
                ErrorLog.WriteLogAll("Paymentval", JsonConvert.SerializeObject(paymentval));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }
                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                paymentval.uid = u_id;

                var Response = _dimfrontservice.Paymentval(paymentval);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Paymentval", JsonConvert.SerializeObject(paymentval), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = new
                {
                    cod = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["Code"].ToString()) ? "" : Response.Tables[0].Rows[0]["Code"].ToString(),
                };

                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Paymentval : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(paymentval));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("Createreq")]
        public HttpResponseMessage Createreq([FromBody] Createreq paymentval)
        {
            try
            {
                ErrorLog.WriteLogAll("Createreq", JsonConvert.SerializeObject(paymentval));
                if (paymentval.exp != 2)
                {
                    if (String.IsNullOrEmpty(paymentval.ifsc))
                        return Return100("ifsc is empty.");
                    if (String.IsNullOrEmpty(paymentval.anumber))
                        return Return100("accountnumber is empty.");
                    if (String.IsNullOrEmpty(paymentval.aname))
                        return Return100("accountname is empty.");
                }
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }
                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                paymentval.guid = u_id;

                var Response = _dimfrontservice.Createreq(paymentval);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Createreq", JsonConvert.SerializeObject(paymentval), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Createreq : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(paymentval));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getreq")]
        public HttpResponseMessage Getreq()
        {
            try
            {
                ErrorLog.WriteLogAll("Getreq", "");

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }
                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                //paymentval.uid = u_id;

                var Response = _dimfrontservice.Getreq(u_id);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Getreq", u_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
               .Select(x => new
               {//[wid]. [accnumber], [accholdername], [ifsccode], [bankname], [accounttype], [remark],  [entdate],  [Username]
                // wid = string.IsNullOrEmpty(x["wid"].ToString()) ? "" : x["wid"],
                   amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                   anumber = string.IsNullOrEmpty(x["accnumber"].ToString()) ? "" : x["accnumber"],
                   aname = string.IsNullOrEmpty(x["accholdername"].ToString()) ? "" : x["accholdername"],
                   ifsc = string.IsNullOrEmpty(x["ifsccode"].ToString()) ? "" : x["ifsccode"],
                   bname = string.IsNullOrEmpty(x["bankname"].ToString()) ? "" : x["bankname"],
                   atype = string.IsNullOrEmpty(x["accounttype"].ToString()) ? "" : x["accounttype"],
                   rem = string.IsNullOrEmpty(x["remark"].ToString()) ? "" : x["remark"],
                   edt = string.IsNullOrEmpty(x["entdate"].ToString()) ? "" : x["entdate"].ToString(),
                   rstatus = string.IsNullOrEmpty(x["reqstatus"].ToString()) ? "" : x["reqstatus"],
                   exp = string.IsNullOrEmpty(x["express"].ToString()) ? 0 : Convert.ToInt32(x["express"]),
               }).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Getreq : " + ex.ToString(), " : Req" + "");
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getcop")]
        public HttpResponseMessage GetCop()
        {
            try
            {
                ErrorLog.WriteLogAll("GetCop", "");

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }
                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                //paymentval.uid = u_id;

                var Response = _dimfrontservice.GetCop(uu_id);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GetCop", u_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
               .Select(x => new
               {//select CoupenCode,Updatedate
                   ccode = string.IsNullOrEmpty(x["CoupenCode"].ToString()) ? "" : x["CoupenCode"].ToString(),
                   dt = string.IsNullOrEmpty(x["Updatedate"].ToString()) ? "" : x["Updatedate"].ToString()
               }).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetCop : " + ex.ToString(), " : Req" + "");
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("runnerviewmore")]
        public HttpResponseMessage RunnerViewmore([FromBody] RunnerViewmore paymentval)
        {
            try
            {
                ErrorLog.WriteLogAll("RunnerViewmore", JsonConvert.SerializeObject(paymentval));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }
                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                var Response = _dimfrontservice.RunnerViewmore(paymentval);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("RunnerViewmore", JsonConvert.SerializeObject(paymentval), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = new
                {
                    pdetail = string.IsNullOrEmpty(Response.Tables[0].Rows[0]["playerdetail"].ToString()) ? "" : JsonConvert.DeserializeObject(Response.Tables[0].Rows[0]["playerdetail"].ToString()),
                };
                if (string.IsNullOrEmpty(t1.pdetail.ToString()))
                    return Return300("no record found.");
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("RunnerViewmore : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(paymentval));
                return Return400("Server Error");
            }
        }
        //[UserAuth, KeyFilter]
        //[Route("loginteen")]
        //public HttpResponseMessage LoginTeen()
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("LoginTeen", "");

        //        string u_id = string.Empty;
        //        var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
        //        if (header != null)
        //        {
        //            u_id = JwtTokenGenerator.GetSaGuid(header);
        //        }

        //        Guid uu_id;
        //        bool res = Guid.TryParse(u_id, out uu_id);

        //        if (!res)
        //            return Return300("token not valid.");

        //        Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));

        //        var Response = _dimfrontservice.LoginTeen(uu_id.ToString(), uid);

        //        if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //        {
        //            ErrorLog.WriteLog("LoginTeen", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //            return Return400("Data Error");
        //        }
        //        if (Response == null || Response.Tables.Count <= 0)
        //            return Return300("No Data Found.");
        //        if (Response.Tables[0].Rows.Count <= 0)
        //            return Return300("No Record Found.");
        //        if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
        //            return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());


        //        var par = new
        //        {
        //            PlayerId = uu_id.ToString(),
        //            PlayerName = Response.Tables[0].Rows[0]["userName"].ToString()
        //        };
        //        var stade = EncryptString(JsonConvert.SerializeObject(par), "b3%?d(xXnakA}9Xh");
        //        var res1 = DecryptString(stade, ConfigItems.Secret);

        //        var url = Response.Tables.Count > 1 && Response.Tables[1].Rows.Count > 0 && Response.Tables[1].Columns.Contains("url") ? Response.Tables[1].Rows[0]["url"].ToString() : "";

        //        var par1 = new
        //        {
        //            Body = stade
        //        };
        //        var response = HttpHelper.Post2(url, JsonConvert.SerializeObject(par1), "application/json", "POST", ConfigItems.Popcid);
        //        var obj = JsonConvert.DeserializeObject<Startres>(response);

        //        if (obj.url == null)
        //            return Return300("No Record Found");
        //        else
        //        {
        //            string te = ConfigItems.Popball;
        //            string[] value = obj.url.Split(char.Parse(te));
        //            var Response1 = _dimfrontservice.Popballtoken(uu_id.ToString(), value[1].ToString());
        //            if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //            {
        //                ErrorLog.WriteLog("LoginTeen", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //                return Return400("Data Error");
        //            }
        //            if (Response1 == null || Response1.Tables.Count <= 0)
        //                return Return300("No Data Found.");
        //            if (Response1.Tables[0].Rows.Count <= 0)
        //                return Return300("No Record Found.");
        //            if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
        //                return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

        //            if (Response1.Tables[0].Rows[0]["id"].ToString() == "1")
        //                return Return200("success", new { url = obj.url });
        //            else
        //                return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
        //        }
        //    }
        //    catch (SystemException ex)
        //    {
        //        ErrorLog.WriteLog("LoginTeen : " + ex.ToString(), " : Req" + "");
        //        return Return400("Server Error");
        //    }
        //}

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("rptdelbet")]
        public HttpResponseMessage RptDelBet([FromBody] DeleteBetReport dbr)
        {
            try
            {
                ErrorLog.WriteLogAll("RptDelBet", JsonConvert.SerializeObject(dbr));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                dbr.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.RptDelBet(dbr);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("RptDelBet", JsonConvert.SerializeObject(dbr), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable().Select(x => new
                {//gm.EventType,gm.EventName,p.Nation,p.UserRate,p.BetType,p.Amount,p.PlaceDate,p.GameType,Bhav,p.Marketname
                    etype = string.IsNullOrEmpty(x["EventType"].ToString()) ? "" : x["EventType"],
                    ename = string.IsNullOrEmpty(x["EventName"].ToString()) ? "" : x["EventName"],
                    nat = string.IsNullOrEmpty(x["Nation"].ToString()) ? "" : x["Nation"],
                    urate = string.IsNullOrEmpty(x["UserRate"].ToString()) ? 0 : x["UserRate"],
                    btype = string.IsNullOrEmpty(x["BetType"].ToString()) ? "" : x["BetType"],
                    amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                    pdt = string.IsNullOrEmpty(x["PlaceDate"].ToString()) ? "" : x["PlaceDate"],
                    gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"],
                    bhav = string.IsNullOrEmpty(x["Bhav"].ToString()) ? 0 : x["Bhav"],
                    mname = string.IsNullOrEmpty(x["Marketname"].ToString()) ? "" : x["Marketname"]
                }).OrderBy(l => Convert.ToDateTime(l.pdt)).ToList();

                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("RptDelBet : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(dbr));
                return Return400("Server Error");
            }
            return Return300("No record found.");
        }

        //[HttpPost]
        //[UserAuth, KeyFilter]
        //[Route("logintgs")]
        //public HttpResponseMessage LoginTGS([FromBody] TGSLogin tgs)
        //{
        //    try
        //    {
        //        ErrorLog.WriteLogAll("LoginTGS", JsonConvert.SerializeObject(tgs));

        //        string u_id = string.Empty;
        //        var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
        //        if (header != null)
        //        {
        //            u_id = JwtTokenGenerator.GetSaGuid(header);
        //        }

        //        Guid uu_id;
        //        bool res = Guid.TryParse(u_id, out uu_id);

        //        if (!res)
        //            return Return300("token not valid.");

        //        tgs.guid = uu_id;
        //        Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
        //        var Response = _dimfrontservice.LoginTGS(tgs);

        //        if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
        //        {
        //            ErrorLog.WriteLog("LoginTGS", JsonConvert.SerializeObject(tgs), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
        //            return Return400("Data Error");
        //        }
        //        if (Response == null || Response.Tables.Count <= 0)
        //            return Return300("No Data Found.");
        //        if (Response.Tables[0].Rows.Count <= 0)
        //            return Return300("No Record Found.");
        //        if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
        //        {
        //            var Response1 = _dimfrontservice.GetTPCSUserData(uid, "tgs", "GetUserData");

        //            if (Response1 == null || Response1.Tables.Count <= 0)
        //                return Return300("No Data Found.");
        //            if (Response1.Tables[0].Rows.Count <= 0)
        //                return Return300("No Record Found.");
        //            if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
        //                return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

        //            TPCSUserMaster objtpcsum = new TPCSUserMaster();
        //            objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
        //            objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
        //            objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
        //            objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
        //            objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
        //            objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
        //            objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
        //            objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
        //            objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
        //            objtpcsum.cscode = "TGS";

        //            var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);

        //            string param3 = "uname=" + Response1.Tables[0].Rows[0]["username"].ToString() + "&accid=" + Response1.Tables[0].Rows[0]["uguid"].ToString() + "&curr=" + Response1.Tables[0].Rows[0]["Currency"].ToString() + "&gid=" + tgs.gid;
        //            var Resp3 = HttpHelper.Post(ConfigItems.TGSUrlApi, param3, "application/x-www-form-urlencoded", "Post", "");

        //            var ClientRes3 = JsonConvert.DeserializeObject<CFUrlResp>(Resp3);

        //            if (ClientRes3.status == 200)
        //                return Return200("Success", new { url = ClientRes3.data.url.ToString() });
        //            else
        //                return Return300(ClientRes3.msg);
        //        }

        //        var Response3 = _dimfrontservice.GetTPCSUserData(uid, "tgs", "ExistUserData");
        //        if (Response3 == null || Response3.Tables.Count <= 0)
        //            return Return300("No Data Found.");
        //        if (Response3.Tables[0].Rows.Count <= 0)
        //            return Return300("No Record Found.");
        //        if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
        //            return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

        //        string param = "uname=" + Response3.Tables[0].Rows[0]["username"].ToString() + "&accid=" + Response.Tables[0].Rows[0]["guid"].ToString() + "&curr=" + Response.Tables[0].Rows[0]["currency"].ToString() + "&gid=" + tgs.gid;
        //        var Resp = HttpHelper.Post(ConfigItems.TGSUrlApi, param, "application/x-www-form-urlencoded", "Post", "");

        //        var ClientRes = JsonConvert.DeserializeObject<CFUrlResp>(Resp);
        //        if (ClientRes.status == 200)
        //            return Return200("Success", new { url = ClientRes.data.url.ToString() });
        //        else
        //            return Return300(ClientRes.msg);
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLog.WriteLog("LoginTGS : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(tgs));
        //        return Return400("Server Error");
        //    }
        //}
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("fancypopup")]
        public HttpResponseMessage Fancypopup([FromBody] Fancypopup dbr)
        {
            try
            {
                ErrorLog.WriteLogAll("Fancypopup", JsonConvert.SerializeObject(dbr));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                dbr.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.Fancypopup(dbr);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Fancypopup", JsonConvert.SerializeObject(dbr), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                                          .Select(x => new
                                          {//Run, Amount
                                              run = string.IsNullOrEmpty(x["Run"].ToString()) ? 0 : x["Run"],
                                              amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"]
                                          }).OrderBy(o => o.run).ToList();

                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Fancypopup : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(dbr));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("casinolisttest")]
        public HttpResponseMessage Casinolisttest([FromBody] TPTest tt)
        {
            try
            {
                ErrorLog.WriteLogAll("Casinolisttest", "");

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Casinolisttest(tt);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Casinolisttest", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                     .Select(x => new
                     {//[cmid],[casinoname],[isowncasino],[istabing],[srno]
                         ctype = string.IsNullOrEmpty(x["cmid"].ToString()) ? 0 : x["cmid"],
                         sno = string.IsNullOrEmpty(x["srno"].ToString()) ? 0 : x["srno"],
                         cname = string.IsNullOrEmpty(x["casinoname"].ToString()) ? "" : x["casinoname"],
                         type = Convert.ToBoolean(x["isowncasino"]) == true ? "LC" : "CS",
                         //isown = string.IsNullOrEmpty(x["isowncasino"].ToString()) ? false : x["isowncasino"],
                         //istab = string.IsNullOrEmpty(x["istabing"].ToString()) ? false : x["istabing"]
                     }).OrderBy(q => q.sno);
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Casinolisttest : " + ex.ToString(), " : Req" + "");
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("providerlist")]
        public HttpResponseMessage Providerlist([FromBody] TPTest tt)
        {
            try
            {
                ErrorLog.WriteLogAll("Providerlist", "");

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Providerlist(tt);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Providerlist", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                     .Select(x => new
                     {//[pid],[pname] 
                         pid = string.IsNullOrEmpty(x["pid"].ToString()) ? 0 : x["pid"],
                         pname = string.IsNullOrEmpty(x["pname"].ToString()) ? "" : x["pname"]
                     });
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Providerlist : " + ex.ToString(), " : Req" + "");
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("categorylist")]
        public HttpResponseMessage Categorylist([FromBody] Categorylist dbr)
        {
            try
            {
                ErrorLog.WriteLogAll("Categorylist", JsonConvert.SerializeObject(dbr));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Categorylist(dbr);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Categorylist", JsonConvert.SerializeObject(dbr), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                     .Select(x => new
                     {//[cid],[cname]
                         cid = string.IsNullOrEmpty(x["cid"].ToString()) ? 0 : x["cid"],
                         cname = string.IsNullOrEmpty(x["cname"].ToString()) ? "" : x["cname"]
                     });
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Categorylist : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(dbr));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("slotlist")]
        public HttpResponseMessage Slotlist([FromBody] Slotlist dbr)
        {
            try
            {
                ErrorLog.WriteLogAll("Slotlist", JsonConvert.SerializeObject(dbr));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Slotlist(dbr);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Slotlist", JsonConvert.SerializeObject(dbr), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                     .Select(x => new
                     {//gameid,gamename,imagepath,casinoid
                         cid = string.IsNullOrEmpty(x["casinoid"].ToString()) ? 0 : x["casinoid"],
                         pid = string.IsNullOrEmpty(x["pid"].ToString()) ? 0 : x["pid"],
                         gid = dbr.cid,
                         gmid = string.IsNullOrEmpty(x["gameid"].ToString()) ? 0 : x["gameid"],
                         imgpath = string.IsNullOrEmpty(x["imagepath"].ToString()) ? 0 : x["imagepath"],
                         gname = string.IsNullOrEmpty(x["gamename"].ToString()) ? "" : x["gamename"]
                     });
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Slotlist : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(dbr));
                return Return400("Server Error");
            }
        }


        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("logintgs")]
        public HttpResponseMessage LoginTGS([FromBody] TGSLogin tgs)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginTGS", JsonConvert.SerializeObject(tgs));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                tgs.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginTGS(tgs);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginTGS", JsonConvert.SerializeObject(tgs), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, Response.Tables[0].Rows[0]["casinocode"].ToString(), "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginTGS1", JsonConvert.SerializeObject(tgs), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = Response.Tables[0].Rows[0]["casinocode"].ToString().ToUpper();

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginTGS2", JsonConvert.SerializeObject(tgs), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }

                    string param3 = "uname=" + Response1.Tables[0].Rows[0]["username"].ToString() + "&accid=" + Response1.Tables[0].Rows[0]["uguid"].ToString() + "&curr=" + Response1.Tables[0].Rows[0]["Currency"].ToString() + "&gid=" + tgs.gid + "&tkn=" + Response2.Tables[0].Rows[0]["token"].ToString();
                    var Resp3 = HttpHelper.Post(ConfigItems.TGSUrlApi, param3, "application/x-www-form-urlencoded", "Post", "");

                    var ClientRes3 = JsonConvert.DeserializeObject<CFUrlResp>(Resp3);

                    if (ClientRes3.status == 200)
                        return Return200("Success", new { url = ClientRes3.data.url.ToString() });
                    else
                        return Return300(ClientRes3.msg);
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, Response.Tables[0].Rows[0]["casinocode"].ToString(), "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginTGS3", JsonConvert.SerializeObject(tgs), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                string param = "uname=" + Response3.Tables[0].Rows[0]["username"].ToString() + "&accid=" + Response.Tables[0].Rows[0]["guid"].ToString() + "&curr=" + Response.Tables[0].Rows[0]["currency"].ToString() + "&gid=" + tgs.gid + "&tkn=" + Response.Tables[0].Rows[0]["token"].ToString();
                var Resp = HttpHelper.Post(ConfigItems.TGSUrlApi, param, "application/x-www-form-urlencoded", "Post", "");

                var ClientRes = JsonConvert.DeserializeObject<CFUrlResp>(Resp);
                if (ClientRes.status == 200)
                    return Return200("Success", new { url = ClientRes.data.url.ToString() });
                else
                    return Return300(ClientRes.msg);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginTGS : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(tgs));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginvl")]
        public HttpResponseMessage LoginVL([FromBody] EZLogin ez)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginVL", JsonConvert.SerializeObject(ez));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                ez.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginVL(ez);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginVL", JsonConvert.SerializeObject(ez), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, "vegas", "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginVL1", JsonConvert.SerializeObject(ez), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = "vegas";

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginVL2", JsonConvert.SerializeObject(ez), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    var t2 = new
                    {
                        url = Response1.Tables[1].Rows[0]["url"].ToString() + ez.tid + "&code=" + Response2.Tables[0].Rows[0]["token"].ToString()
                    };
                    return Return200("Success", t2);
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, "vegas", "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginVL3", JsonConvert.SerializeObject(ez), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = new
                {
                    url = Response3.Tables[1].Rows[0]["url"].ToString() + ez.tid + "&code=" + Response.Tables[0].Rows[0]["vtoken"].ToString()
                };
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginVL : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(ez));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("logines")]
        public HttpResponseMessage LoginES([FromBody] ESLogin es)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginES", JsonConvert.SerializeObject(es));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                es.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginES(es);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginES", JsonConvert.SerializeObject(es), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, "slot", "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginES1", JsonConvert.SerializeObject(es), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = "slot";

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginES2", JsonConvert.SerializeObject(es), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    var t2 = new
                    {
                        url = Response1.Tables[1].Rows[0]["url"].ToString() + Response2.Tables[0].Rows[0]["token"].ToString() + "&openTable=" + es.gid
                    };
                    return Return200("Success", t2);
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, "slot", "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginES3", JsonConvert.SerializeObject(es), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = new
                {
                    url = Response3.Tables[1].Rows[0]["url"].ToString() + Response.Tables[0].Rows[0]["slottoken"].ToString() + "&openTable=" + es.gid
                };
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginES : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(es));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginqt")]
        public HttpResponseMessage LoginQT([FromBody] QTLogin qt)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginQT", JsonConvert.SerializeObject(qt));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                qt.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginQT(qt);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginQT", JsonConvert.SerializeObject(qt), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, "qt", "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginQT1", JsonConvert.SerializeObject(qt), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = "QT";

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginQT2", JsonConvert.SerializeObject(qt), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    string param1 = "uid=" + Response2.Tables[0].Rows[0]["userid"].ToString().ToLower() + "&curr=" + Response2.Tables[0].Rows[0]["currency"].ToString() + "&dvc=" + qt.device + "&wsi=" + Response2.Tables[0].Rows[0]["token"].ToString() + "&gid=" + qt.gid;
                    var Resp1 = HttpHelper.Post(ConfigItems.QTUrlApi, param1, "application/x-www-form-urlencoded", "Post", "");

                    var ClientRes3 = JsonConvert.DeserializeObject<CFUrlResp>(Resp1);

                    if (ClientRes3.status == 200)
                    {
                        var t1 = new
                        {
                            url = ClientRes3.data.url.ToString()
                            //token = ClientRes.access_token.ToString()
                        };
                        return Return200("Success", t1);
                    }
                    else
                        Return300(ClientRes3.msg);
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, "qt", "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginQT3", JsonConvert.SerializeObject(qt), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                //var param = new { grant_type = "password", response_type = "token", username = "api_diamond", password = "df08fa72" };

                string param2 = "uid=" + Response.Tables[0].Rows[0]["userid"].ToString().ToLower() + "&curr=" + Response.Tables[0].Rows[0]["currency"].ToString() + "&dvc=" + qt.device + "&wsi=" + Response.Tables[0].Rows[0]["token"].ToString() + "&gid=" + qt.gid;
                var Resp2 = HttpHelper.Post(ConfigItems.QTUrlApi, param2, "application/x-www-form-urlencoded", "Post", "");

                var ClientRes1 = JsonConvert.DeserializeObject<CFUrlResp>(Resp2);

                if (ClientRes1.status == 200)
                {
                    var t1 = new
                    {
                        url = ClientRes1.data.url.ToString()
                        //token = ClientRes.access_token.ToString()
                    };
                    return Return200("Success", t1);
                }
                else
                    return Return300(ClientRes1.msg);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginQT : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(qt));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getrules")]
        public HttpResponseMessage GetRules([FromBody] GetRules updateres)
        {
            try
            {
                ErrorLog.WriteLogAll("GetRules", JsonConvert.SerializeObject(updateres));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                updateres.gtype.ToLower();
                var Response = _dimfrontservice.GetRules(updateres);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GetRules", JsonConvert.SerializeObject(updateres), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                .Select(x => new
                {//[casinotype], [subtype], [rules], [srno]
                    ctype = string.IsNullOrEmpty(x["casinotype"].ToString()) ? "" : x["casinotype"].ToString(),
                    stype = string.IsNullOrEmpty(x["subtype"].ToString()) ? "" : x["subtype"].ToString(),
                    rules = string.IsNullOrEmpty(x["rules"].ToString()) ? "" : x["rules"].ToString(),
                    sno = string.IsNullOrEmpty(x["srno"].ToString()) ? 0 : x["srno"],
                }).ToList();
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetRules : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(updateres));
                return Return400(ex.ToString());
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("kbcuserbook")]
        public HttpResponseMessage KbcUserBook([FromBody] CasinoUserBook casinoUserBook)
        {
            try
            {
                ErrorLog.WriteLogAll("KbcUserBook", JsonConvert.SerializeObject(casinoUserBook));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                casinoUserBook.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                casinoUserBook.gtype.ToLower();

                var Response = _dimfrontservice.KbcUserBook(casinoUserBook);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("KbcUserBook", JsonConvert.SerializeObject(casinoUserBook), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                    .Select(x => new
                    {//pid,Nation,bettype,Amount,GameType,bhav,nationjson
                        pid = string.IsNullOrEmpty(x["pid"].ToString()) ? 0 : x["pid"],
                        btype = string.IsNullOrEmpty(x["BetType"].ToString()) ? "" : x["BetType"].ToString().ToLower(),
                        amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                        nat = string.IsNullOrEmpty(x["Nation"].ToString()) ? "" : x["Nation"],
                        bhav = string.IsNullOrEmpty(x["bhav"].ToString()) ? 0 : x["bhav"],
                        natjson = string.IsNullOrEmpty(x["nationjson"].ToString()) ? null : JToken.Parse(x["nationjson"].ToString()),
                        gtype = string.IsNullOrEmpty(x["GameType"].ToString()) ? "" : x["GameType"].ToString().ToLower()
                    }).ToList();

                //return Request.CreateResponse(HttpStatusCode.OK, new { status = 200, msg = "success", data = t1 });
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("KbcUserBook : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(casinoUserBook));
                //return Return400("Server Error");
                return Return400(ex.ToString());
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("kbcpayout")]
        public HttpResponseMessage KbcPayout([FromBody] KbcPayout casinoUserBook)
        {
            try
            {
                ErrorLog.WriteLogAll("KbcPayout", JsonConvert.SerializeObject(casinoUserBook));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                casinoUserBook.uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                casinoUserBook.gtype.ToLower();

                var Response = _dimfrontservice.KbcPayout(casinoUserBook);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("KbcPayout", JsonConvert.SerializeObject(casinoUserBook), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("KbcPayout : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(casinoUserBook));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("launchcasino")]
        public HttpResponseMessage LaunchCasino([FromBody] CasinoLogin cl)
        {
            try
            {
                ErrorLog.WriteLogAll("LaunchCasino", JsonConvert.SerializeObject(cl));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                cl.guid = uu_id;
                var Response = _dimfrontservice.LaunchCasino(cl);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LaunchCasino", JsonConvert.SerializeObject(cl), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = new
                {
                    url = Response.Tables[0].Rows[0]["url"].ToString() + Response.Tables[0].Rows[0]["idval"].ToString() + "&tidm=" + cl.tid + "&mode=" + cl.device.ToLower()
                };
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LaunchCasino : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(cl));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("paymenturl")]
        public HttpResponseMessage PaymentUrl([FromBody] PaymentUrl tvu)
        {
            try
            {
                ErrorLog.WriteLogAll("PaymentUrl", JsonConvert.SerializeObject(tvu));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                tvu.uid = uu_id.ToString();
                Paymenturltoken userLogin = new Paymenturltoken();
                userLogin.guid = uu_id;
                userLogin.gtype = "payment";
                //ErrorLog.WriteLog("PaymentUrl", "", " : Req" + JsonConvert.SerializeObject(userLogin));
                var Response = _dimfrontservice.Paymenturltoken(userLogin);
                //ErrorLog.WriteLog("PaymentUrl", "", ": Req" + JsonConvert.SerializeObject(Response));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("PaymentUrl", JsonConvert.SerializeObject(tvu), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                tvu.token = Response.Tables[0].Rows[0]["idval"].ToString();

                var resp2 = JsonConvert.SerializeObject(tvu);
                //ErrorLog.WriteLog("PaymentUrl", "", " : Req" + resp2);
                var enc = EncryptString(ConfigItems.PaymentSecret, resp2);
                //ErrorLog.WriteLog("PaymentUrl", "" ,": Req" + enc); ?  token=&amt=
                var t1 = new
                {
                    url = Response.Tables[0].Rows[0]["url"].ToString() + enc//"token="+ enc + "&amt="+ tvu.amt
                };

                //var resp1 = HttpHelper.Post(t1.url, "application/json", "POST");
                //ErrorLog.WriteLog("PaymentUrl", "", " : Req" + JsonConvert.SerializeObject(t1));
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("PaymentUrl", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(tvu));
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("paymentwith")]
        public HttpResponseMessage Paymentwith([FromBody] Paymentwith paymentval)
        {
            try
            {
                ErrorLog.WriteLogAll("Paymentwith", JsonConvert.SerializeObject(paymentval));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }
                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                paymentval.guid = u_id;

                var Response = _dimfrontservice.Paymentwith(paymentval);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Paymentwith", JsonConvert.SerializeObject(paymentval), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Paymentwith : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(paymentval));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getpaymentwith")]
        public HttpResponseMessage GetPaymentwith()
        {
            try
            {
                ErrorLog.WriteLogAll("GetPaymentwith", "");

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }
                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                //paymentval.uid = u_id;

                var Response = _dimfrontservice.GetPaymentwith(u_id);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GetPaymentwith", u_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
               .Select(x => new
               {//[accnumber],[accholdername],[ifsccode],[bankname],[accounttype],[Amount],[remark],[reqstatus],[reqmsg],[entdate]
                   amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                   anumber = string.IsNullOrEmpty(x["accnumber"].ToString()) ? "" : x["accnumber"],
                   aname = string.IsNullOrEmpty(x["accholdername"].ToString()) ? "" : x["accholdername"],
                   ifsc = string.IsNullOrEmpty(x["ifsccode"].ToString()) ? "" : x["ifsccode"],
                   bname = string.IsNullOrEmpty(x["bankname"].ToString()) ? "" : x["bankname"],
                   atype = string.IsNullOrEmpty(x["accounttype"].ToString()) ? "" : x["accounttype"],
                   rem = string.IsNullOrEmpty(x["remark"].ToString()) ? "" : x["remark"],
                   edt = string.IsNullOrEmpty(x["entdate"].ToString()) ? "" : x["entdate"].ToString(),
                   rstatus = string.IsNullOrEmpty(x["reqstatus"].ToString()) ? "" : x["reqstatus"],
                   rmsg = string.IsNullOrEmpty(x["reqmsg"].ToString()) ? "" : x["reqmsg"],
               }).ToList();
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetPaymentwith : " + ex.ToString(), " : Req" + "");
                return Return400("Server Error");
            }
        }
        public static string EncryptString(string key, string plainText)
        {
            byte[] iv = new byte[16];
            byte[] array;

            using (Aes aes = Aes.Create())
            {
                aes.Key = Encoding.UTF8.GetBytes(key);
                aes.IV = iv;

                ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);

                using (MemoryStream memoryStream = new MemoryStream())
                {
                    using (CryptoStream cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter streamWriter = new StreamWriter(cryptoStream))
                        {
                            streamWriter.Write(plainText);
                        }
                        array = memoryStream.ToArray();
                    }
                }
            }
            return Base64UrlEncoder.Encode(array);
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("getdepolist")]
        public HttpResponseMessage GetDepolist()
        {
            try
            {
                ErrorLog.WriteLogAll("GetDepolist", "");
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                Int64 uid = JwtTokenGenerator.GetUid(header);
                var Response = _dimfrontservice.GetDepolist(uid);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("GetDepolist", "Getmid", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                //if (Response == null || Response.Tables.Count <= 0)
                //    return Return300("No Data Found.");
                //if (Response.Tables[0].Rows.Count <= 0)
                //    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                .Select(x => new
                {//Select Accountid,Amount,EntryDate
                    aid = string.IsNullOrEmpty(x["Accountid"].ToString()) ? 0 : x["Accountid"],
                    amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? "" : x["Amount"],
                    edt = string.IsNullOrEmpty(x["EntryDate"].ToString()) ? "" : x["EntryDate"].ToString(),
                    rnum = string.IsNullOrEmpty(x["RowNum"].ToString()) ? 0 : x["RowNum"],
                }).ToList();
                var data = new GetcophistoryRes();
                try
                {//clientid,[secretkey]
                    if (Response != null && Response.Tables != null && Response.Tables.Count > 0 && Response.Tables[1].Rows.Count > 0 && Response.Tables[1].Columns.Contains("clientid") && Response.Tables[1].Columns.Contains("secretkey"))
                    {
                        var resp = HttpHelper.Getbonus(ConfigItems.CopUrl + "transaction/wallet/all?PlayerId=" + u_id.ToString(), Response.Tables[1].Rows[0]["clientid"].ToString());
                        ErrorLog.WriteLogAll("GetDepolisthistory", JsonConvert.SerializeObject(resp));
                        var res1 = ConfigItems.Encrypt ? Encryptionbonus.DecryptString(resp, Response.Tables[1].Rows[0]["secretkey"].ToString()) : resp;
                        ErrorLog.WriteLogAll("GetDepolisthistory1", JsonConvert.SerializeObject(res1));
                        data = JsonConvert.DeserializeObject<GetcophistoryRes>(res1);
                        if (data != null && data.ErrorCode == 0 && data.Data.Count() > 0)
                        {
                            var mdata = data.Data.Select(s => new
                            {
                                id = s.Id,
                                cid = s.ClientId,
                                pid = s.PlayerId,
                                pname = s.PlayerName,
                                depoid = s.DepositId,
                                copid = s.CouponId,
                                wag = s.Wagering,
                                rwag = s.RemainingWagering,
                                amt = s.Amount,
                                minbal = s.MinBalance,
                                giv = s.Given.ToString("MM/dd/yyyy HH:mm:ss tt"),
                                cdt = s.CreateDate.ToString("MM/dd/yyyy HH:mm:ss tt"),
                                expdt = s.ExpireDate.ToString("MM/dd/yyyy HH:mm:ss tt"),
                                depodt = s.DepositDate.ToString("MM/dd/yyyy HH:mm:ss tt"),
                                sta = s.Status,
                                depoamt = s.DepositAmount,
                                deponum = s.DepositNumber,
                                depogrpid = s.DepositGroupId,
                                depogrpname = s.DepositGroupName,
                                depocopid = s.DepositCouponId,
                                depocopname = s.DepositCouponName,
                                proid = s.ProductId,
                                proname = s.ProductName,
                                prokey = s.ProductKey,
                            }).ToList();
                            if (mdata != null && mdata.Count() > 0)
                                return Return200("success", new { t1 = t1, t2 = mdata });
                        }
                        return Return200("success", new { t1 = t1, t2 = (string)null });
                    }
                }
                catch (Exception ex)
                {
                    ErrorLog.WriteLog("GetDepolisthistory", ex.Message.ToString());
                }

                if (data == null && data.ErrorCode == 1 && t1 == null && t1.Count <= 0)
                    return Return300("No Data Found.");
                return Return200("success", new { t1 = t1, t2 = data.Error });
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("GetDepolist", ex.Message.ToString());
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("couponlist")]
        public HttpResponseMessage Couponlist(Couponlist couponlist)
        {
            try
            {
                ErrorLog.WriteLogAll("Couponlist", JsonConvert.SerializeObject(couponlist));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                couponlist.uid = JwtTokenGenerator.GetUid(header);
                var Response = _dimfrontservice.Verifyamt(couponlist);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Couponlist", "Getmid", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //Amount, tranno,General ,Username
                Couponlistapi couponlistapi = new Couponlistapi();
                couponlistapi.DepositId = Convert.ToString(couponlist.aid);
                couponlistapi.DepositNumber = Response.Tables[0].Rows[0]["tranno"].ToString();
                couponlistapi.DepositAmount = Convert.ToDouble(Response.Tables[0].Rows[0]["Amount"]);
                couponlistapi.PlayerName = Response.Tables[0].Rows[0]["Username"].ToString();
                couponlistapi.PlayerId = u_id.ToString();
                couponlistapi.Balance = Convert.ToDouble(Response.Tables[0].Rows[0]["General"]);
                if (Response != null && Response.Tables != null && Response.Tables.Count > 0 && Response.Tables[1].Rows.Count > 0 && Response.Tables[1].Columns.Contains("clientid") && Response.Tables[1].Columns.Contains("secretkey"))
                {
                    var par = ConfigItems.Encrypt ? Encryptionbonus.EncryptString(JsonConvert.SerializeObject(couponlistapi), Response.Tables[1].Rows[0]["secretkey"].ToString()) : JsonConvert.SerializeObject(couponlistapi);
                    var resp = HttpHelper.Postbonus(ConfigItems.CopUrl + "coupon/player/" + couponlistapi.PlayerId + "/coupon", par, "application/json", "POST", Response.Tables[1].Rows[0]["clientid"].ToString());
                    ErrorLog.WriteLogAll("Res : " + JsonConvert.SerializeObject(resp), "CouponList");
                    var res1 = ConfigItems.Encrypt ? Encryptionbonus.DecryptString(resp, Response.Tables[1].Rows[0]["secretkey"].ToString()) : resp;
                    ErrorLog.WriteLogAll("Res : " + JsonConvert.SerializeObject(res1), "CouponList");
                    var data = JsonConvert.DeserializeObject<CouponlistRes>(res1);
                    if (data != null && data.errorcode == 0 && data.data.Count() > 0)
                    {
                        var mdata = data.data.Select(s => new
                        {
                            id = s.id,
                            name = s.name,
                            wag = s.wagering,
                            expin = s.expiresIn,
                            amt = s.amount,
                            minbal = s.minBalance,
                            pro = s.product,
                            dmum = s.depositnumber,
                        }).ToList();
                        if (mdata != null && mdata.Count() > 0)
                            return Return200("success", mdata);
                        return Return300("No Record Found.");
                    }
                    else
                    {
                        return Return300(data.error);
                    }
                }
                return Return300("No Record Found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Couponlist", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(couponlist));
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("createwallet")]
        public HttpResponseMessage Createwallet(Createwallet couponlist)
        {
            try
            {
                ErrorLog.WriteLogAll("Createwallet", JsonConvert.SerializeObject(couponlist));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                couponlist.uid = JwtTokenGenerator.GetUid(header);
                Couponlist couponlist1 = new Couponlist();
                couponlist1.aid = couponlist.aid;
                couponlist1.amt = couponlist.amt;
                couponlist1.uid = couponlist.uid;
                var Response = _dimfrontservice.Verifyamt(couponlist1);
                ErrorLog.Logwa("Verifyamt: " + JsonConvert.SerializeObject(couponlist1), "res: " + JsonConvert.SerializeObject(Response));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Createwallet", "Getmid", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                //Amount, tranno,General ,Username
                Couponlistapi couponlistapi = new Couponlistapi();
                couponlistapi.DepositId = Convert.ToString(couponlist.aid);
                couponlistapi.DepositNumber = Response.Tables[0].Rows[0]["tranno"].ToString();
                couponlistapi.DepositAmount = Convert.ToDouble(Response.Tables[0].Rows[0]["Amount"]);
                couponlistapi.PlayerName = Response.Tables[0].Rows[0]["Username"].ToString();
                couponlistapi.PlayerId = u_id.ToString();
                couponlistapi.Balance = Convert.ToDouble(Response.Tables[0].Rows[0]["General"]);
                couponlistapi.CouponId = couponlist.copid;
                couponlistapi.SubId = Response.Tables[0].Rows[0]["Subid"].ToString();
                couponlistapi.SubBalance = Convert.ToDouble(Response.Tables[0].Rows[0]["mastergeneral"]);
                couponlistapi.DepositDate = Convert.ToDateTime(couponlist.ddt);

                //var resp = HttpHelper.Post(ConfigItems.CopUrl + ApiEndpoint.createwallet, JsonConvert.SerializeObject(couponlistapi), "application/json", "POST");
                //ErrorLog.WriteLogAll("Createwallet", JsonConvert.SerializeObject(resp));
                if (Response != null && Response.Tables != null && Response.Tables.Count > 0 && Response.Tables[1].Rows.Count > 0 && Response.Tables[1].Columns.Contains("clientid") && Response.Tables[1].Columns.Contains("secretkey"))
                {
                    var par = ConfigItems.Encrypt ? Encryptionbonus.EncryptString(JsonConvert.SerializeObject(couponlistapi), Response.Tables[1].Rows[0]["secretkey"].ToString()) : JsonConvert.SerializeObject(couponlistapi);
                    var resp = HttpHelper.Postbonus(ConfigItems.CopUrl + "coupon/wallet", par, "application/json", "POST", Response.Tables[1].Rows[0]["clientid"].ToString());

                    var res1 = ConfigItems.Encrypt ? Encryptionbonus.DecryptString(resp, Response.Tables[1].Rows[0]["secretkey"].ToString()) : resp;
                    ErrorLog.Logwa("walletgg" + JsonConvert.SerializeObject(couponlistapi), "res: " + JsonConvert.SerializeObject(res1));
                    var data = JsonConvert.DeserializeObject<CreatewalletRes>(res1);
                    if (data != null && data.ErrorCode == 0)
                    {
                        couponlist1.copcod = data.Data.Id;
                        var Response1 = _dimfrontservice.CouponActive(couponlist1);
                        ErrorLog.Logwa("CouponActive" + JsonConvert.SerializeObject(couponlist1), "res: " + JsonConvert.SerializeObject(Response1));
                        if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                        {
                            ErrorLog.WriteLog("CouponActive", "Getmid", Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                            return Return400("Data Error");
                        }
                        if (Response1 == null || Response1.Tables.Count <= 0)
                            return Return300("No Data Found.");
                        if (Response1.Tables[0].Rows.Count <= 0)
                            return Return300("No Record Found.");
                        if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                            return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                        try
                        {
                            var parsub = ConfigItems.Encrypt ? Encryptionbonus.EncryptString(JsonConvert.SerializeObject(couponlistapi), Response.Tables[1].Rows[0]["secretkey"].ToString()) : JsonConvert.SerializeObject(couponlistapi);
                            var respsub = HttpHelper.Getbonus(ConfigItems.CopUrl + "transaction/wallet/sub/" + Response1.Tables[0].Rows[0]["Subid"].ToString() + "/sum", Response.Tables[1].Rows[0]["clientid"].ToString());
                            ErrorLog.Logwa("walletsub" + JsonConvert.SerializeObject(couponlist1), "res: " + JsonConvert.SerializeObject(Response1));
                            var ressub = ConfigItems.Encrypt ? Encryptionbonus.DecryptString(respsub, Response.Tables[1].Rows[0]["secretkey"].ToString()) : respsub;
                            var datasub = JsonConvert.DeserializeObject<Subres>(ressub);
                            if (datasub.data != null && datasub.errorCode == 0)
                            {
                                couponlist1.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["Subid"]);
                                couponlist1.amt = datasub.data.amount;
                                var Responsesub = _dimfrontservice.Masterexp(couponlist1);
                                ErrorLog.Logwa("Masterexp: " + JsonConvert.SerializeObject(couponlist1), "res: " + JsonConvert.SerializeObject(Responsesub));
                                //if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                                //{
                                //    ErrorLog.WriteLog("Createwallet", "Getmid", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                                //    return Return400("Data Error");
                                //}
                                //if (Response == null || Response.Tables.Count <= 0)
                                //    return Return300("No Data Found.");
                                //if (Response.Tables[0].Rows.Count <= 0)
                                //    return Return300("No Record Found.");
                                //if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                                //    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                            }

                        }
                        catch (Exception ex)
                        {
                            ErrorLog.WriteLog("Createwallet+subid", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(couponlist));
                        }

                        return Return200(Response1.Tables[0].Rows[0]["MSG"].ToString());
                    }
                    else
                    {
                        return Return300(data.Error);
                    }
                }
                return Return300("No Record Found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Createwallet", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(couponlist));
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("paymenturlnew")]
        public HttpResponseMessage PaymentUrlnew([FromBody] PaymentUrlnew tvu)
        {
            try
            {
                ErrorLog.WriteLogAll("PaymentUrlnew", JsonConvert.SerializeObject(tvu));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                tvu.uid = uu_id.ToString();
                Paymenturltoken userLogin = new Paymenturltoken();
                userLogin.guid = uu_id;
                userLogin.gtype = tvu.type;
                userLogin.ptype = tvu.ptype;
                userLogin.pname = tvu.pname;
                //ErrorLog.WriteLog("PaymentUrl", "", " : Req" + JsonConvert.SerializeObject(userLogin));
                var Response = _dimfrontservice.PaymenturlNew(userLogin);
                //ErrorLog.WriteLog("PaymentUrl", "", ": Req" + JsonConvert.SerializeObject(Response));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("PaymentUrlnew", JsonConvert.SerializeObject(tvu), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                tvu.token = Response.Tables[0].Rows[0]["idval"].ToString();
                //tvu.pname = Response.Tables[0].Rows[0]["paymentname"].ToString();
                var resp2 = JsonConvert.SerializeObject(tvu);
                //ErrorLog.WriteLog("PaymentUrl", "", " : Req" + resp2);
                var enc = EncryptString(ConfigItems.PaymentSecret, resp2);
                //ErrorLog.WriteLog("PaymentUrl", "" ,": Req" + enc); ?  token=&amt=
                var t1 = new
                {
                    url = Response.Tables[0].Rows[0]["url"].ToString() + enc//"token="+ enc + "&amt="+ tvu.amt
                };

                //var resp1 = HttpHelper.Post(t1.url, "application/json", "POST");
                //ErrorLog.WriteLog("PaymentUrl", "", " : Req" + JsonConvert.SerializeObject(t1));
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("PaymentUrlnew", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(tvu));
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("paymentlst")]
        public HttpResponseMessage Paymentlst([FromBody] Paymentlst userLogin)
        {
            try
            {
                //var json = JsonConvert.Serialize({
                //PlayerId: string
                //PlayerName: string});

                ErrorLog.WriteLogAll("Paymentlst", JsonConvert.SerializeObject(userLogin));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                userLogin.guid = uu_id;
                var Response = _dimfrontservice.Paymentlst(userLogin);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Paymentlst", JsonConvert.SerializeObject(userLogin), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                    .Select(x => new
                    {//[paymentname],[bname],[bdetail],[subvalid]
                        pname = string.IsNullOrEmpty(x["paymentname"].ToString()) ? "" : x["paymentname"],
                        bname = string.IsNullOrEmpty(x["bname"].ToString()) ? "" : x["bname"],
                        bdetail = string.IsNullOrEmpty(x["bdetail"].ToString()) ? "" : x["bdetail"],
                        svalid = string.IsNullOrEmpty(x["subvalid"].ToString()) ? 0 : x["subvalid"],
                        minb = Response.Tables[2].Rows.Count <= 0 && string.IsNullOrEmpty(Response.Tables[2].Rows[0]["minbet"].ToString()) ? 0 : (x["paymentname"].ToString().ToLower() == "crypto" ? 2000 : Response.Tables[2].Rows[0]["minbet"]),
                        maxb = Response.Tables[2].Rows.Count <= 0 && string.IsNullOrEmpty(Response.Tables[2].Rows[0]["maxbet"].ToString()) ? 0 : (x["paymentname"].ToString().ToLower() == "crypto" ? 0 : Response.Tables[2].Rows[0]["maxbet"]),
                    }).ToList();
                //var t2 = Response.Tables[2].Rows.Count <= 0 ? null : Response.Tables[2].AsEnumerable()
                //    .Select(x => new
                //    {//[paymentname],[bname],[bdetail],[subvalid]
                //        minb = string.IsNullOrEmpty(x["minbet"].ToString()) ? 0 : x["minbet"],
                //        maxb = string.IsNullOrEmpty(x["maxbet"].ToString()) ? 0 : x["maxbet"],
                //    }).ToList();
                if (t1 != null && t1.Count() > 0)
                    return Return200("Success", new { t1 = t1/*, t2 = t2 != null && t2.Count() > 0 ? t2 : null*/ });
                return Return300("No Record Found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Paymentlst", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(userLogin));
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("paymentlstsub")]
        public HttpResponseMessage Paymentlstsub([FromBody] Paymentlst userLogin)
        {
            try
            {
                //var json = JsonConvert.Serialize({
                //PlayerId: string
                //PlayerName: string});

                ErrorLog.WriteLogAll("Paymentlstsub", JsonConvert.SerializeObject(userLogin));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                userLogin.guid = uu_id;
                var Response = _dimfrontservice.Paymentlstsub(userLogin);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Paymentlstsub", JsonConvert.SerializeObject(userLogin), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                var t1 = Response.Tables[1].Rows.Count <= 0 ? null : Response.Tables[1].AsEnumerable()
                    .Select(x => new
                    {//[paymentname],[bname],[bdetail],[subvalid]
                        spay = string.IsNullOrEmpty(x["subpayment"].ToString()) ? "" : x["subpayment"].ToString().Trim(),
                    }).ToList();
                if (t1 != null && t1.Count() > 0)
                    return Return200("Success", t1);
                return Return300("No Record Found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Paymentlstsub", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(userLogin));
                return Return400(ex.Message);
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginvgs")]
        public HttpResponseMessage LoginVGS([FromBody] VGSLogin vgs)
        {
            try
            {
                //http://games.vivogaming.com/?token=5865885-0141&operatorID=35&application=roulette&tableID=1
                //Parameters:
                //token = Id of the current session(generated by EC System)
                //operatorID = Id of the operator (fixed value, provided by VGS Representative)
                //language = EN(2 Letters CODE; Client GUI Language)
                //tableID = Id of the table where the game will start
                //application = Name of the application being opened
                ErrorLog.WriteLogAll("LoginVGS", JsonConvert.SerializeObject(vgs));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                vgs.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginVGS(vgs);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginVGS", JsonConvert.SerializeObject(vgs), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, Response.Tables[0].Rows[0]["casinocode"].ToString(), "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginVGS1", JsonConvert.SerializeObject(vgs), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = Response.Tables[0].Rows[0]["casinocode"].ToString().ToUpper();

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginVGS", JsonConvert.SerializeObject(vgs), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    var t2 = new
                    {
                        url = Response1.Tables[1].Rows[0]["url"].ToString() + Response2.Tables[0].Rows[0]["token"].ToString() + "&application=" + vgs.gname.ToLower() + "&tableID=" + vgs.tid.ToString()
                    };
                    return Return200("Success", t2);
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, Response.Tables[0].Rows[0]["casinocode"].ToString(), "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginVGS3", JsonConvert.SerializeObject(vgs), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = new
                {
                    url = Response3.Tables[1].Rows[0]["url"].ToString() + Response.Tables[0].Rows[0]["token"].ToString() + "&application=" + vgs.gname.ToLower() + "&tableID=" + vgs.tid.ToString()
                };
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginVGS : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(vgs));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginssg")]
        public HttpResponseMessage LoginSSG([FromBody] SSGLogin ssg)
        {
            try
            {
                //https://eu-staging.ssgportal.com/GameLauncher/Loader.aspx?PortalName=wolf777&lang=en&Token=a108b218-78db-46d2-beb8-65d93c726a75&GameCategory=Roulette&GameName=VirtualRoulette&returnUrl=https://googke.com
                ErrorLog.WriteLogAll("LoginSSG", JsonConvert.SerializeObject(ssg));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                ssg.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginSSG(ssg);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginSSG", JsonConvert.SerializeObject(ssg), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, "BC", "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginSSG1", JsonConvert.SerializeObject(ssg), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = "BC";

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginSSG", JsonConvert.SerializeObject(ssg), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    var t2 = new
                    {
                        url = Response1.Tables[1].Rows[0]["url"].ToString() + Response2.Tables[0].Rows[0]["token"].ToString() + "&GameCategory=" + ssg.gcat + "&GameName=" + ssg.gname + "&returnUrl=" + ssg.rurl
                    };
                    return Return200("Success", t2);
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, "BC", "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginSSG3", JsonConvert.SerializeObject(ssg), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = new
                {
                    url = Response3.Tables[1].Rows[0]["url"].ToString() + Response.Tables[0].Rows[0]["eztoken"].ToString() //+ "&GameCategory=" + ssg.gcat + "&GameName=" + ssg.gname + "&returnUrl=" + ssg.rurl
                };
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginSSG : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(ssg));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("loginastar")]
        public HttpResponseMessage LoginAstar([FromBody] AstarLogin astar)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginAstar", JsonConvert.SerializeObject(astar));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                astar.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.LoginAstar(astar);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginAstar", JsonConvert.SerializeObject(astar), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, Response.Tables[0].Rows[0]["casinocode"].ToString(), "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") && Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginAstar1", JsonConvert.SerializeObject(astar), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = Response.Tables[0].Rows[0]["casinocode"].ToString().ToUpper();

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") && Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginAstar", JsonConvert.SerializeObject(astar), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }
                    var t2 = new
                    {
                        url = Response1.Tables[1].Rows[0]["url"].ToString() + Response2.Tables[0].Rows[0]["token"].ToString() + "&language=en&lobbyid=" + astar.lid + "&tableid=" + astar.tid
                    };
                    return Return200("Success", t2);
                }
                else if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0" && Response.Tables[0].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, Response.Tables[0].Rows[0]["casinocode"].ToString(), "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") && Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginAstar3", JsonConvert.SerializeObject(astar), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = new
                {
                    url = Response3.Tables[1].Rows[0]["url"].ToString() + Response.Tables[0].Rows[0]["token"].ToString() + "&language=en&lobbyid=" + astar.lid + "&tableid=" + astar.tid
                };
                return Return200("Success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginAstar : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(astar));
                return Return400("Server Error");
            }
        }

        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("logintp")]
        public HttpResponseMessage LoginTP([FromBody] LoginTP ltp)
        {
            try
            {
                ErrorLog.WriteLogAll("LoginTP", JsonConvert.SerializeObject(ltp));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"];
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");

                ltp.guid = uu_id;
                Int32 uid = Convert.ToInt32(JwtTokenGenerator.GetUid(header));

                if (ltp.tid.ToLower() == "dream" || ltp.tid.ToLower() == "daba")
                {
                    UserLogin userLogin = new UserLogin();
                    userLogin.gtype = ltp.tid;
                    userLogin.guid = uu_id;
                    var ResponseDD = _dimfrontservice.UserLogin(userLogin);
                    if (ResponseDD != null && ResponseDD.Tables.Count > 0 && ResponseDD.Tables[ResponseDD.Tables.Count - 1].Columns.Contains("id") &&
                        ResponseDD.Tables[ResponseDD.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("UserLogin", JsonConvert.SerializeObject(userLogin),
                            ResponseDD.Tables[ResponseDD.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }

                    if (ResponseDD == null || ResponseDD.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (ResponseDD.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (ResponseDD.Tables[0].Columns.Contains("id") && ResponseDD.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(ResponseDD.Tables[0].Rows[0]["MSG"].ToString());


                    var t1 = new
                    {
                        token = ResponseDD.Tables[0].Rows[0]["idval"],
                        url = string.IsNullOrEmpty(ResponseDD.Tables[0].Rows[0]["url"].ToString()) ? "" : ResponseDD.Tables[0].Rows[0]["url"]
                    };
                    return Return200("Success", t1);
                }
                else if (ltp.gid == 2288 && ltp.tid.ToString() == "roulette")
                {
                    CasinoLogin cl = new CasinoLogin();
                    cl.tid = ltp.gid.ToString();
                    cl.gtype = ltp.tid;
                    cl.device = ltp.device;
                    cl.guid = uu_id;
                    var ResponseLC = _dimfrontservice.LaunchCasino(cl);

                    if (ResponseLC != null && ResponseLC.Tables.Count > 0 && ResponseLC.Tables[ResponseLC.Tables.Count - 1].Columns.Contains("id") &&
                        ResponseLC.Tables[ResponseLC.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LaunchCasino", JsonConvert.SerializeObject(cl), ResponseLC.Tables[ResponseLC.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }

                    if (ResponseLC == null || ResponseLC.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (ResponseLC.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (ResponseLC.Tables[0].Columns.Contains("id") && ResponseLC.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(ResponseLC.Tables[0].Rows[0]["MSG"].ToString());

                    var t1 = new
                    {
                        url = ResponseLC.Tables[0].Rows[0]["url"] + ResponseLC.Tables[0].Rows[0]["idval"].ToString() + "&tidm=" + cl.tid + "&mode=" +
                              cl.device.ToLower()
                    };
                    return Return200("Success", t1);
                }
                var Response = _dimfrontservice.LoginTP(ltp);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") &&
                    Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginTP", JsonConvert.SerializeObject(ltp), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }

                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[1].Columns.Contains("id") && Response.Tables[1].Rows[0]["id"].ToString() == "0" &&
                    Response.Tables[1].Rows[0]["ulock"].ToString() == "0")
                {
                    var Response1 = _dimfrontservice.GetTPCSUserData(uid, Response.Tables[1].Rows[0]["casinocode"].ToString(), "GetUserData");
                    if (Response1 != null && Response1.Tables.Count > 0 && Response1.Tables[Response1.Tables.Count - 1].Columns.Contains("id") &&
                        Response1.Tables[Response1.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginTP1", JsonConvert.SerializeObject(ltp), Response1.Tables[Response1.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }

                    if (Response1 == null || Response1.Tables.Count <= 0)
                        return Return300("No Data Found.");
                    if (Response1.Tables[0].Rows.Count <= 0)
                        return Return300("No Record Found.");
                    if (Response1.Tables[0].Columns.Contains("id") && Response1.Tables[0].Rows[0]["id"].ToString() == "0")
                        return Return300(Response1.Tables[0].Rows[0]["MSG"].ToString());

                    TPCSUserMaster objtpcsum = new TPCSUserMaster();
                    objtpcsum.uid = Convert.ToInt64(Response1.Tables[0].Rows[0]["userid"]);
                    objtpcsum.guid = Response1.Tables[0].Rows[0]["uguid"].ToString();
                    objtpcsum.uname = Response1.Tables[0].Rows[0]["userName"].ToString();
                    objtpcsum.gen = Convert.ToDecimal(Response1.Tables[0].Rows[0]["general"]) - Convert.ToDecimal(Response1.Tables[0].Rows[0]["exposer"]);
                    objtpcsum.curr = Response1.Tables[0].Rows[0]["Currency"].ToString();
                    objtpcsum.webref = Response1.Tables[0].Rows[0]["WebRef"].ToString();
                    objtpcsum.webdom = Response1.Tables[0].Rows[0]["webdomain"].ToString();
                    objtpcsum.pship = Response1.Tables[0].Rows[0]["Partnership"].ToString();
                    objtpcsum.pshiptype = Convert.ToInt64(Response1.Tables[0].Rows[0]["PartnershipType"]);
                    objtpcsum.cscode = Response.Tables[1].Rows[0]["casinocode1"].ToString().ToUpper();

                    var Response2 = _dimfrontservice.GetTPCSUserMster(objtpcsum);
                    if (Response2 != null && Response2.Tables.Count > 0 && Response2.Tables[Response2.Tables.Count - 1].Columns.Contains("id") &&
                        Response2.Tables[Response2.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                    {
                        ErrorLog.WriteLog("LoginTP", JsonConvert.SerializeObject(ltp), Response2.Tables[Response2.Tables.Count - 1].Rows[0]["MSG"].ToString());
                        return Return400("Data Error");
                    }

                    if (Response2.Tables.Count > 0 && Response2.Tables[0].Rows.Count > 0) // && ds1.Tables[0].Rows[0]["id"].ToString() == "1"
                    {
                        Response2.Tables[0].TableName = "CasinoData";
                        Response.Tables.RemoveAt(1);
                        Response.Tables.Add(Response2.Tables[0].Copy());
                        Response1.Tables[1].TableName = "URLData";
                        Response.Tables.Add(Response1.Tables[1].Copy());
                    }

                    var tpurl1 = new
                    {
                        tbl = Response,
                        rurl = ltp.rurl,
                        tkn = Response2.Tables[0].Rows[0]["token"].ToString(),
                        dvc = ltp.device
                    };
                    var resptpurl1 = HttpHelper.Post(ConfigItems.CommonTPUrl, JsonConvert.SerializeObject(tpurl1), "application/json", "POST");
                    var tpurlresp1 = JsonConvert.DeserializeObject<LoginTPResp>(resptpurl1);
                    if (tpurlresp1.status == 200)
                        return Return200("Success", new { url = tpurlresp1.data });
                    else
                        return Return300(tpurlresp1.msg);
                }
                else if (Response.Tables[1].Columns.Contains("id") && Response.Tables[1].Rows[0]["id"].ToString() == "0" &&
                         Response.Tables[1].Rows[0]["ulock"].ToString() == "1")
                {
                    return Return300(Response.Tables[1].Rows[0]["MSG"].ToString());
                }

                var Response3 = _dimfrontservice.GetTPCSUserData(uid, Response.Tables[1].Rows[0]["casinocode"].ToString(), "ExistUserData");
                if (Response3 != null && Response3.Tables.Count > 0 && Response3.Tables[Response3.Tables.Count - 1].Columns.Contains("id") &&
                    Response3.Tables[Response3.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("LoginTP3", JsonConvert.SerializeObject(ltp), Response3.Tables[Response3.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }

                if (Response3 == null || Response3.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response3.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response3.Tables[0].Columns.Contains("id") && Response3.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response3.Tables[0].Rows[0]["MSG"].ToString());

                Response3.Tables[1].TableName = "URLData";
                Response.Tables.Add(Response3.Tables[1].Copy());

                var tpurl = new
                {
                    tbl = Response,
                    rurl = ltp.rurl,
                    tkn = Response.Tables[1].Rows[0]["token"].ToString(),
                    dvc = ltp.device
                };
                var resptpurl = HttpHelper.Post(ConfigItems.CommonTPUrl, JsonConvert.SerializeObject(tpurl), "application/json", "POST");
                var tpurlresp = JsonConvert.DeserializeObject<LoginTPResp>(resptpurl);
                if (tpurlresp.status == 200)
                    return Return200("Success", new { url = tpurlresp.data });
                else
                    return Return300(tpurlresp.msg);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("LoginTP : " + ex, " : Req" + JsonConvert.SerializeObject(ltp));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("paymentcur")]
        public HttpResponseMessage Paymentcur()
        {
            try
            {
                ErrorLog.WriteLogAll("Paymentcur", "");
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                //userLogin.guid = uu_id;
                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.Paymentcur(uid);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Paymentcur", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                .Select(x => new
                {//c.CurrencyId,Currency,1 as GetplaymentList
                    curid = string.IsNullOrEmpty(x["CurrencyId"].ToString()) ? 0 : x["CurrencyId"],
                    cur = string.IsNullOrEmpty(x["Currency"].ToString()) ? "" : x["Currency"],
                    getplst = string.IsNullOrEmpty(x["GetplaymentList"].ToString()) ? 0 : x["GetplaymentList"],
                }).ToList();
                if (t1 != null && t1.Count() > 0)
                    return Return200("Success", new { t1 = t1 });
                return Return300("No Record Found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Paymentcur", ex.Message.ToString(), " : Req" + "");
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("paymentuupdate")]
        public HttpResponseMessage Paymentuupdate([FromBody] Paymentuupdate userLogin)
        {
            try
            {
                ErrorLog.WriteLogAll("Paymentuupdate", JsonConvert.SerializeObject(userLogin));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                userLogin.guid = uu_id.ToString();
                userLogin.uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.Paymentuupdate(userLogin);
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Paymentuupdate", JsonConvert.SerializeObject(userLogin), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Paymentuupdate", ex.Message.ToString(), " : Req" + JsonConvert.SerializeObject(userLogin));
                return Return400(ex.Message);
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("sportbooklist")]
        public HttpResponseMessage Sportbooklist([FromBody] TPTest tt)
        {
            try
            {
                ErrorLog.WriteLogAll("Sportbooklist", JsonConvert.SerializeObject(tt));

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                var Response = _dimfrontservice.Sportbooklist(tt);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Sportbooklist", "", Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                     .Select(x => new
                     {//[cmid],[casinoname],[srno]
                         cmid = string.IsNullOrEmpty(x["cmid"].ToString()) ? 0 : x["cmid"],
                         cname = string.IsNullOrEmpty(x["casinoname"].ToString()) ? "" : x["casinoname"],
                         srno = string.IsNullOrEmpty(x["srno"].ToString()) ? 0 : x["srno"]
                     });
                return Return200("success", t1);
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Sportbooklist : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(tt));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("mpaymenttype")]
        public HttpResponseMessage MPaymenttype()
        {
            try
            {
                ErrorLog.WriteLogAll("MPaymenttype", "");
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                Int64 uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.MPaymenttype(uid);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("MPaymenttype", uu_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
               .Select(x => new
               {//Pid,Paymentname
                   pid = string.IsNullOrEmpty(x["Pid"].ToString()) ? 0 : x["Pid"],
                   pname = string.IsNullOrEmpty(x["Paymentname"].ToString()) ? "" : x["Paymentname"],
               }).ToList();
                if (t1 != null && t1.Count() > 0)
                    return Return200("Success", t1);
                return Return300("No Record Found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("MPaymenttype : " + ex.ToString(), " : Req");
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("mgetupaytype")]
        public HttpResponseMessage MgetuPaytype(MgetuPaytype mPaymenttype)
        {
            try
            {
                ErrorLog.WriteLogAll("MgetuPaytype", JsonConvert.SerializeObject(mPaymenttype));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                mPaymenttype.uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));
                var Response = _dimfrontservice.MgetuPaytype(mPaymenttype);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("MgetuPaytype", uu_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                .Select(x => new
                {//s.Psid,s.[pid],Paymentname, [title], [detail], s.[valid], [entdate] ,remark 
                    pid = string.IsNullOrEmpty(x["Pid"].ToString()) ? 0 : x["Pid"],
                    psid = string.IsNullOrEmpty(x["Psid"].ToString()) ? 0 : x["Psid"],
                    pname = string.IsNullOrEmpty(x["Paymentname"].ToString()) ? "" : x["Paymentname"],
                    title = string.IsNullOrEmpty(x["title"].ToString()) ? "" : x["title"],
                    detail = string.IsNullOrEmpty(x["detail"].ToString()) ? null : JToken.Parse(x["detail"].ToString()),
                    valid = string.IsNullOrEmpty(x["valid"].ToString()) ? 0 : x["valid"],
                    edt = string.IsNullOrEmpty(x["entdate"].ToString()) ? "" : x["entdate"].ToString(),
                    rem = string.IsNullOrEmpty(x["remark"].ToString()) ? "" : x["remark"],
                }).ToList();
                if (t1 != null && t1.Count() > 0)
                    return Return200("Success", t1);
                return Return300("No Record Found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("MgetuPaytype : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(mPaymenttype));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth]
        [Route("uaddpayment")]
        public HttpResponseMessage Uaddpayment()
        {
            Uaddpayment mPaymenttype = new Uaddpayment();
            try
            {
                var rqst = HttpContext.Current.Request;

                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);
                if (!res)
                    return Return300("token not valid.");
                mPaymenttype.psid = Convert.ToString(rqst.Form["psid"]);
                mPaymenttype.ptype = Convert.ToString(rqst.Form["ptype"]);
                mPaymenttype.amt = Convert.ToString(rqst.Form["amt"]);
                mPaymenttype.uid = Convert.ToInt64(JwtTokenGenerator.GetUid(header));
                if (string.IsNullOrEmpty(mPaymenttype.psid))
                    return Return100("psid is empty.");
                if (string.IsNullOrEmpty(mPaymenttype.ptype))
                    return Return100("ptype is empty.");
                if (string.IsNullOrEmpty(mPaymenttype.amt))
                    return Return100("amt is empty.");
                var httpPostedFile = rqst.Files["imgpath"];
                ErrorLog.WriteLogAll("Uaddpayment", JsonConvert.SerializeObject(mPaymenttype));
                if (httpPostedFile != null)
                {
                    var extention = Path.GetExtension(httpPostedFile.FileName);
                    var allowedExtensions = new[] { ".jpg", ".jpeg", ".png" };
                    if (!allowedExtensions.Contains(extention))
                    {
                        return Return100("Only PNG,JPG and JPEG files are allowed.");
                    }
                    System.Drawing.Image img = System.Drawing.Image.FromStream(httpPostedFile.InputStream, true, true);
                    int height = img.Height;
                    int width = img.Width;
                    decimal size = Math.Round(((decimal)httpPostedFile.ContentLength / (decimal)1024), 2);
                    if (size > 1024)
                    {
                        return Return100("Maximun file size is 1MB.");
                    }
                    var newfilename = (Guid.NewGuid() + Path.GetExtension(httpPostedFile.FileName)).ToLower();

                    var fileSavePath = System.Web.Hosting.HostingEnvironment.MapPath("~/MPayment/" + newfilename);
                    httpPostedFile.SaveAs(fileSavePath);

                    var client = new AmazonS3Client(ConfigItems.AWSAccess, ConfigItems.AWSSecret, Amazon.RegionEndpoint.EUWest1);
                    try
                    {
                        PutObjectRequest putRequest = new PutObjectRequest
                        {
                            BucketName = ConfigItems.AWSBucket,
                            Key = (DateTime.Now.Month + "_" + DateTime.Now.Year) + "/" + DateTime.Now.Date.Day + "/" + newfilename,
                            FilePath = fileSavePath,
                            ContentType = "text/plain",
                            CannedACL = S3CannedACL.PublicReadWrite
                        };

                        PutObjectResponse response = client.PutObject(putRequest);
                        mPaymenttype.imgpath = ConfigItems.AWSS3Path + (DateTime.Now.Month + "_" + DateTime.Now.Year) + "/" + DateTime.Now.Date.Day + "/" + newfilename;
                    }
                    catch (AmazonS3Exception amazonS3Exception)
                    {
                        if (amazonS3Exception.ErrorCode != null && (amazonS3Exception.ErrorCode.Equals("InvalidAccessKeyId") || amazonS3Exception.ErrorCode.Equals("InvalidSecurity")))
                        {
                            ErrorLog.WriteLog("AWSError : " + amazonS3Exception.ErrorCode, " : Req" + JsonConvert.SerializeObject(mPaymenttype)); //throw new Exception("Check the provided AWS Credentials.");
                        }
                        else
                        {
                            ErrorLog.WriteLog("AWSError2 : " + amazonS3Exception.ErrorCode, " : Req" + JsonConvert.SerializeObject(mPaymenttype));
                        }
                    }
                }
                else
                    mPaymenttype.imgpath = "";
                //ErrorLog.WriteLogAll("Uaddpayment1", JsonConvert.SerializeObject(mPaymenttype));
                var Response = _dimfrontservice.Uaddpayment(mPaymenttype);
                //ErrorLog.WriteLogAll("Uaddpayment2", JsonConvert.SerializeObject(mPaymenttype));
                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("Uaddpayment", uu_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());
                //ErrorLog.WriteLogAll("Uaddpayment3", JsonConvert.SerializeObject(mPaymenttype));
                return Return200(Response.Tables[0].Rows[0]["MSG"].ToString());
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("Uaddpayment : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(mPaymenttype));
                return Return400("Server Error");
            }
        }
        [HttpPost]
        [UserAuth, KeyFilter]
        [Route("mpaymentrpt")]
        public HttpResponseMessage MPaymentRpt(MPaymentRpt mPaymenttype)
        {
            try
            {
                ErrorLog.WriteLogAll("MPaymentRpt", JsonConvert.SerializeObject(mPaymenttype));
                string u_id = string.Empty;
                var header = HttpContext.Current.Request.Headers["Authorization"].ToString();
                if (header != null)
                {
                    u_id = JwtTokenGenerator.GetSaGuid(header);
                }

                Guid uu_id;
                bool res = Guid.TryParse(u_id, out uu_id);

                if (!res)
                    return Return300("token not valid.");
                mPaymenttype.uid = u_id;
                var Response = _dimfrontservice.MPaymentRpt(mPaymenttype);

                if (Response != null && Response.Tables.Count > 0 && Response.Tables[Response.Tables.Count - 1].Columns.Contains("id") && Response.Tables[Response.Tables.Count - 1].Rows[0]["id"].ToString() == "-1")
                {
                    ErrorLog.WriteLog("MPaymentRpt", uu_id.ToString(), Response.Tables[Response.Tables.Count - 1].Rows[0]["MSG"].ToString());
                    return Return400("Data Error");
                }
                if (Response == null || Response.Tables.Count <= 0)
                    return Return300("No Data Found.");
                if (Response.Tables[0].Rows.Count <= 0)
                    return Return300("No Record Found.");
                if (Response.Tables[0].Columns.Contains("id") && Response.Tables[0].Rows[0]["id"].ToString() == "0")
                    return Return300(Response.Tables[0].Rows[0]["MSG"].ToString());

                var t1 = Response.Tables[0].Rows.Count <= 0 ? null : Response.Tables[0].AsEnumerable()
                 .Select(x => new
                 {//pmid,d.[userid],u.username,Paymentname, [title], [detail] , [imagepath], [ispayment],
                  //d.[entdate], [paymentdate],d.remark,Amount,rating
                     pid = string.IsNullOrEmpty(x["pid"].ToString()) ? "" : x["pid"],
                     pmid = string.IsNullOrEmpty(x["pmid"].ToString()) ? 0 : x["pmid"],
                     //uid = string.IsNullOrEmpty(x["userid"].ToString()) ? 0 : x["userid"],
                     //uname = string.IsNullOrEmpty(x["username"].ToString()) ? "" : x["username"],
                     pname = string.IsNullOrEmpty(x["Paymentname"].ToString()) ? "" : x["Paymentname"],
                     title = string.IsNullOrEmpty(x["title"].ToString()) ? "" : x["title"],
                     detail = string.IsNullOrEmpty(x["detail"].ToString()) ? null : JToken.Parse(x["detail"].ToString()),
                     imgpath = string.IsNullOrEmpty(x["imagepath"].ToString()) ? "" : x["imagepath"],
                     ispay = string.IsNullOrEmpty(x["ispayment"].ToString()) ? 0 : x["ispayment"],
                     edt = string.IsNullOrEmpty(x["entdate"].ToString()) ? "" : x["entdate"].ToString(),
                     pdt = string.IsNullOrEmpty(x["paymentdate"].ToString()) ? "" : x["paymentdate"].ToString(),
                     rem = string.IsNullOrEmpty(x["remark"].ToString()) ? "" : x["remark"],
                     amt = string.IsNullOrEmpty(x["Amount"].ToString()) ? 0 : x["Amount"],
                     ptype = string.IsNullOrEmpty(x["Paymenttype"].ToString()) ? "" : x["Paymenttype"].ToString(),
                     rat = string.IsNullOrEmpty(x["rating"].ToString()) ? "" : x["rating"],
                 }).ToList();
                if (t1 != null && t1.Count() > 0)
                    return Return200("Success", t1);
                return Return300("No Record Found.");
            }
            catch (Exception ex)
            {
                ErrorLog.WriteLog("MPaymentRpt : " + ex.ToString(), " : Req" + JsonConvert.SerializeObject(mPaymenttype));
                return Return400("Server Error");
            }
        }
        #endregion
    }
    public static class StringCompression
    {
        /// <summary>
        /// Compresses a string and returns a deflate compressed, Base64 encoded string.
        /// </summary>
        /// <param name="uncompressedString">String to compress</param>
        public static string Compress(this string uncompressedString)
        {
            byte[] compressedBytes;

            using (var uncompressedStream = new MemoryStream(Encoding.UTF8.GetBytes(uncompressedString)))
            {
                using (var compressedStream = new MemoryStream())
                {
                    // setting the leaveOpen parameter to true to ensure that compressedStream will not be closed when compressorStream is disposed
                    // this allows compressorStream to close and flush its buffers to compressedStream and guarantees that compressedStream.ToArray() can be called afterward
                    // although MSDN documentation states that ToArray() can be called on a closed MemoryStream, I don't want to rely on that very odd behavior should it ever change
                    using (var compressorStream = new DeflateStream(compressedStream, CompressionLevel.Fastest, true))
                    {
                        uncompressedStream.CopyTo(compressorStream);
                    }

                    // call compressedStream.ToArray() after the enclosing DeflateStream has closed and flushed its buffer to compressedStream
                    compressedBytes = compressedStream.ToArray();
                }
            }

            return Convert.ToBase64String(compressedBytes);
        }

        /// <summary>
        /// Decompresses a deflate compressed, Base64 encoded string and returns an uncompressed string.
        /// </summary>
        /// <param name="compressedString">String to decompress.</param>
        public static string Decompress(this string compressedString)
        {
            byte[] decompressedBytes;

            var compressedStream = new MemoryStream(Convert.FromBase64String(compressedString));

            using (var decompressorStream = new DeflateStream(compressedStream, CompressionMode.Decompress))
            {
                using (var decompressedStream = new MemoryStream())
                {
                    decompressorStream.CopyTo(decompressedStream);

                    decompressedBytes = decompressedStream.ToArray();
                }
            }

            return Encoding.UTF8.GetString(decompressedBytes);
        }
        public static string RemoveInvalidChars(this string strSource)
        {
            return Regex.Replace(strSource, @"[^0-9a-zA-Z=+\/]", "");
        }
    }
    public static class CompressionExtensions
    {
        public static IEnumerable<byte> Zip(this object obj)
        {
            byte[] bytes = obj.Serialize();

            using (MemoryStream msi = new MemoryStream(bytes))
            using (MemoryStream mso = new MemoryStream())
            {
                using (var gs = new GZipStream(mso, CompressionMode.Compress))
                    msi.CopyToAsync(gs);

                return mso.ToArray().AsEnumerable();
            }
        }

        public static Task<object> Unzip(this byte[] bytes)
        {
            using (MemoryStream msi = new MemoryStream(bytes))
            using (MemoryStream mso = new MemoryStream())
            {
                using (var gs = new GZipStream(msi, CompressionMode.Decompress))
                {
                    // Sync example:
                    //gs.CopyTo(mso);

                    // Async way (take care of using async keyword on the method definition)
                    gs.CopyToAsync(mso);
                }

                return mso.ToArray().Deserialize();
            }
        }
    }

    public static class SerializerExtensions
    {
        public static byte[] Serialize<T>(this T objectToWrite)
        {
            using (MemoryStream stream = new MemoryStream())
            {
                BinaryFormatter binaryFormatter = new BinaryFormatter();
                binaryFormatter.Serialize(stream, objectToWrite);

                return stream.GetBuffer();
            }
        }

        public static async Task<T> _Deserialize<T>(this byte[] arr)
        {
            using (MemoryStream stream = new MemoryStream())
            {
                BinaryFormatter binaryFormatter = new BinaryFormatter();
                await stream.WriteAsync(arr, 0, arr.Length);
                stream.Position = 0;

                return (T)binaryFormatter.Deserialize(stream);
            }
        }

        public static async Task<object> Deserialize(this byte[] arr)
        {
            object obj = await arr._Deserialize<object>();
            return obj;
        }
    }
    //test
}
